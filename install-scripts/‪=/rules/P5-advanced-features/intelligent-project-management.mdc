---
type: "project_rule"
description: "智能项目管理系统 - 整合阶段管理、工作流编排、智能推荐和记忆系统"
globs: ["**/*"]
priority: 900
---

# 🧠 智能项目管理系统

> **统一管理**: 整合严格阶段管理、完整工作流、智能推荐机制、记忆系统和超级大脑系统

## 🎯 系统概述

本系统提供智能化的项目管理能力，结合现代AI代理技术和传统项目管理最佳实践，确保项目从需求分析到部署运维的全生命周期管理。

## 📋 五阶段项目管理

### 阶段定义
```yaml
项目阶段:
  阶段1 - 需求分析: 
    目标: 明确需求，确定方案
    约束: 禁止代码生成，专注需求澄清
    产出: 需求文档、技术方案、项目计划
  
  阶段2 - 架构设计:
    目标: 搭建架构，创建框架
    约束: 禁止业务逻辑实现
    产出: 架构图、技术选型、项目结构
  
  阶段3 - 开发实现:
    目标: 实现功能，编写代码
    约束: 禁止架构重大调整
    产出: 功能代码、单元测试、API文档
  
  阶段4 - 测试优化:
    目标: 测试修复，性能优化
    约束: 禁止新功能开发
    产出: 测试报告、性能优化、Bug修复
  
  阶段5 - 部署运维:
    目标: 部署配置，运维监控
    约束: 禁止代码修改
    产出: 部署脚本、监控配置、运维文档
```

### 阶段切换机制
```yaml
切换方式:
  命令格式: "/switch [阶段号]"
  自然语言: "切换到XX阶段"、"进入XX阶段"
  智能推荐: "/switch 0" 启动推荐模式
  
辅助命令:
  "/status" - 查看当前阶段和规则
  "/recommend" - 获取阶段推荐
  "/memory" - 查看项目记忆
```

## 🤖 智能推荐机制

### 关键词匹配矩阵
```yaml
阶段1_需求分析:
  高权重词: ["需求", "要求", "想要", "希望", "计划", "讨论", "分析"]
  中权重词: ["功能", "特性", "方案", "思路", "技术选型"]
  排除词: ["开始", "实现", "代码", "开发", "部署"]

阶段2_架构设计:
  高权重词: ["架构", "结构", "框架", "搭建", "初始化", "配置"]
  中权重词: ["设计", "模式", "组件", "模块", "接口"]
  排除词: ["业务逻辑", "具体实现", "细节功能"]

阶段3_开发实现:
  高权重词: ["实现", "开发", "编写", "代码", "功能", "逻辑"]
  中权重词: ["算法", "接口", "组件", "模块", "方法"]
  排除词: ["架构调整", "重构", "设计变更"]

阶段4_测试优化:
  高权重词: ["测试", "优化", "性能", "调试", "修复", "Bug"]
  中权重词: ["验证", "检查", "改进", "调优", "监控"]
  排除词: ["新功能", "新需求", "功能扩展"]

阶段5_部署运维:
  高权重词: ["部署", "上线", "发布", "运维", "监控", "配置"]
  中权重词: ["环境", "服务器", "域名", "SSL", "备份"]
  排除词: ["代码修改", "功能调整", "逻辑变更"]
```

### 智能推荐算法
```yaml
推荐流程:
  1. 关键词提取和权重计算
  2. 上下文分析和意图识别
  3. 当前阶段适配度评估
  4. 最优阶段推荐和理由说明
  5. 用户确认和阶段切换
```

## 💾 项目记忆系统

### 记忆存储结构
```json
{
  "project_id": "项目唯一标识",
  "project_name": "项目名称",
  "current_phase": "当前阶段",
  "created_time": "创建时间",
  "last_updated": "最后更新时间",
  "phases": {
    "phase_1_requirements": {
      "status": "completed|in_progress|pending",
      "start_time": "开始时间",
      "end_time": "结束时间",
      "requirements": "需求描述",
      "technical_decisions": ["技术决策列表"],
      "deliverables": ["交付物列表"],
      "user_confirmations": ["用户确认记录"]
    },
    "phase_2_architecture": {
      "status": "completed|in_progress|pending",
      "technical_stack": "技术栈选择",
      "architecture_design": "架构设计方案",
      "system_components": ["系统组件列表"],
      "design_patterns": ["设计模式列表"]
    },
    "phase_3_development": {
      "status": "completed|in_progress|pending",
      "implementation_plan": "实施计划",
      "code_structure": "代码结构设计",
      "development_milestones": ["开发里程碑"],
      "completed_features": ["已完成功能"]
    },
    "phase_4_testing": {
      "status": "completed|in_progress|pending",
      "testing_strategy": "测试策略",
      "quality_standards": "质量标准",
      "performance_metrics": "性能指标",
      "bug_reports": ["Bug报告列表"]
    },
    "phase_5_deployment": {
      "status": "completed|in_progress|pending",
      "deployment_strategy": "部署策略",
      "environment_config": "环境配置",
      "monitoring_setup": "监控配置",
      "maintenance_plan": "维护计划"
    }
  },
  "global_notes": ["全局备注"],
  "lessons_learned": ["经验教训"]
}
```

### 自动记录触发条件
```yaml
记录触发:
  阶段切换时: 自动保存当前阶段状态
  重要决策时: 技术选型、架构设计等
  里程碑达成时: 功能完成、测试通过等
  问题解决时: Bug修复、性能优化等
  用户确认时: 需求确认、方案批准等
```

## 🚀 超级大脑系统

### 激活机制
```yaml
触发词:
  主要触发词:
    - "启动超级大脑系统"
    - "启动智能项目管理"
    - "激活项目大脑"
    - "开启智能管理"
  
  状态查询:
    - "查看项目状态"
    - "项目进度如何"
    - "当前在哪个阶段"
```

### 智能管理功能
```yaml
核心功能:
  1. 项目状态监控:
     - 实时跟踪项目进度
     - 识别潜在风险和瓶颈
     - 提供优化建议
  
  2. 智能决策支持:
     - 基于历史数据的决策建议
     - 技术选型推荐
     - 资源分配优化
  
  3. 自动化工作流:
     - 阶段自动切换建议
     - 任务优先级排序
     - 依赖关系管理
  
  4. 学习和优化:
     - 项目模式识别
     - 最佳实践总结
     - 个性化推荐
```

## 🔄 完整工作流集成

### 前后端协同工作流
```yaml
协同模式:
  并行开发:
    - 前端: UI/UX设计和组件开发
    - 后端: API设计和业务逻辑
    - 同步点: 接口定义、数据模型
  
  集成测试:
    - 前端: 组件测试、E2E测试
    - 后端: 单元测试、集成测试
    - 联调: API对接、数据流测试
  
  部署协调:
    - 前端: 静态资源部署
    - 后端: 服务部署和配置
    - 监控: 全栈性能监控
```

### MCP工具智能编排
```yaml
工具编排策略:
  阶段1_需求分析:
    主要工具: ["mcp-feedback-enhanced", "memory"]
    目标: 需求收集和分析
  
  阶段2_架构设计:
    主要工具: ["codebase-retrieval", "server-filesystem"]
    目标: 架构设计和项目初始化
  
  阶段3_开发实现:
    主要工具: ["server-github", "codebase-retrieval", "server-filesystem"]
    目标: 代码开发和版本管理
  
  阶段4_测试优化:
    主要工具: ["server-filesystem", "codebase-retrieval"]
    目标: 测试执行和性能优化
  
  阶段5_部署运维:
    主要工具: ["server-github", "server-filesystem"]
    目标: 部署配置和运维管理
```

## 📊 使用示例

### 项目启动
```
用户: "启动超级大脑系统，我要开发一个电商网站"
AI: "🧠 超级大脑系统已激活！
     📋 项目类型: 电商网站
     🎯 推荐阶段: 阶段1-需求分析
     💡 建议: 让我们先明确具体需求和功能范围
     
     请告诉我：
     1. 目标用户群体
     2. 核心功能需求
     3. 技术栈偏好
     4. 项目时间线"
```

### 阶段切换
```
用户: "需求已经明确了，开始架构设计"
AI: "🔄 检测到阶段切换意图
     📝 正在保存阶段1成果到项目记忆...
     ✅ 切换到阶段2-架构设计
     
     🏗️ 架构设计阶段任务:
     1. 技术栈选择
     2. 系统架构设计
     3. 数据库设计
     4. 项目结构初始化"
```

### 智能推荐
```
用户: "我想开始写代码了"
AI: "🤖 智能分析中...
     📊 关键词匹配: '写代码' → 阶段3-开发实现
     ⚠️  当前阶段: 阶段2-架构设计
     
     💡 建议: 架构设计尚未完成，建议先完成：
     - 数据库表结构设计
     - API接口定义
     - 前端组件规划
     
     确认切换到开发阶段吗？(y/n)"
```

## 🎯 集成优势

1. **结构化管理**: 严格的阶段约束确保项目有序进行
2. **智能辅助**: AI推荐和自动化减少人工决策负担
3. **记忆延续**: 完整的项目记忆确保信息不丢失
4. **工具协同**: MCP工具与项目阶段深度集成
5. **经验积累**: 持续学习和优化提升项目成功率

---

**🎯 使用提示**: 通过 `/switch 0` 启动智能推荐，让AI帮助您选择最适合的项目阶段！