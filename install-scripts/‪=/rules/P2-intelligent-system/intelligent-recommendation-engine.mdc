---
type: "global_rule"
description: "智能推荐引擎 - 基于关键词匹配和上下文分析的阶段推荐系统"
globs: ["**/*"]
priority: 930
---

# 🤖 智能推荐引擎

> **智能决策**: 基于自然语言理解和上下文分析的项目阶段智能推荐系统

## 🎯 系统概述

智能推荐引擎是超级大脑系统的核心决策组件，通过分析用户输入、项目上下文和历史数据，为用户提供最适合的项目阶段推荐和工作流建议。

## 🧠 推荐算法架构

### 多层推荐模型
```yaml
推荐层次:
  L1_关键词匹配:
    权重: 40%
    方法: 基于预定义关键词库的快速匹配
    优势: 响应快速、准确率高
  
  L2_语义理解:
    权重: 35%
    方法: 基于NLP的语义分析和意图识别
    优势: 理解复杂表达、上下文感知
  
  L3_上下文分析:
    权重: 20%
    方法: 项目状态、历史轨迹、用户偏好分析
    优势: 个性化推荐、连续性保证
  
  L4_学习优化:
    权重: 5%
    方法: 基于反馈的模型参数动态调整
    优势: 持续改进、适应性强
```

## 📚 关键词匹配系统

### 阶段关键词库
```yaml
阶段1_需求分析:
  高权重词 (权重: 3.0):
    - "需求", "要求", "想要", "希望", "计划"
    - "讨论", "分析", "了解", "确定", "明确"
    - "目标", "目的", "用途", "场景", "用户"
    - "功能", "特性", "能力", "作用", "效果"
  
  中权重词 (权重: 2.0):
    - "方案", "思路", "想法", "概念", "理念"
    - "技术选型", "技术栈", "框架选择", "语言选择"
    - "可行性", "评估", "调研", "研究", "探索"
  
  低权重词 (权重: 1.0):
    - "项目", "系统", "应用", "软件", "平台"
    - "开始", "启动", "初始", "第一步", "首先"
  
  排除词 (权重: -2.0):
    - "实现", "开发", "编写", "代码", "编程"
    - "部署", "上线", "发布", "运行", "启动"
    - "测试", "调试", "修复", "优化", "改进"

阶段2_架构设计:
  高权重词 (权重: 3.0):
    - "架构", "结构", "框架", "设计", "模式"
    - "搭建", "构建", "建立", "创建", "初始化"
    - "组件", "模块", "服务", "接口", "API"
    - "数据库", "存储", "缓存", "队列", "中间件"
  
  中权重词 (权重: 2.0):
    - "技术选型", "技术栈", "工具选择", "环境配置"
    - "目录结构", "项目结构", "文件组织", "代码组织"
    - "依赖管理", "包管理", "版本控制", "构建工具"
  
  低权重词 (权重: 1.0):
    - "准备", "配置", "安装", "设置", "环境"
    - "规划", "计划", "方案", "策略", "思路"
  
  排除词 (权重: -2.0):
    - "业务逻辑", "具体实现", "细节功能", "算法实现"
    - "用户界面", "前端页面", "交互逻辑", "事件处理"

阶段3_开发实现:
  高权重词 (权重: 3.0):
    - "实现", "开发", "编写", "编程", "代码"
    - "功能", "逻辑", "算法", "方法", "函数"
    - "组件", "模块", "类", "接口", "服务"
    - "前端", "后端", "API", "数据库", "界面"
  
  中权重词 (权重: 2.0):
    - "集成", "对接", "连接", "调用", "交互"
    - "处理", "操作", "管理", "控制", "执行"
    - "验证", "校验", "检查", "过滤", "转换"
  
  低权重词 (权重: 1.0):
    - "完善", "补充", "添加", "扩展", "增强"
    - "修改", "调整", "更新", "改进", "优化"
  
  排除词 (权重: -2.0):
    - "架构调整", "重构", "设计变更", "框架更换"
    - "需求变更", "功能调整", "范围修改"

阶段4_测试优化:
  高权重词 (权重: 3.0):
    - "测试", "检测", "验证", "校验", "确认"
    - "优化", "改进", "提升", "增强", "完善"
    - "性能", "效率", "速度", "响应", "吞吐"
    - "Bug", "错误", "问题", "异常", "故障"
  
  中权重词 (权重: 2.0):
    - "调试", "排查", "定位", "分析", "诊断"
    - "修复", "解决", "处理", "修正", "纠正"
    - "监控", "统计", "分析", "报告", "指标"
  
  低权重词 (权重: 1.0):
    - "检查", "审查", "评估", "评价", "质量"
    - "稳定", "可靠", "安全", "兼容", "健壮"
  
  排除词 (权重: -2.0):
    - "新功能", "新需求", "功能扩展", "需求增加"
    - "架构调整", "设计修改", "技术更换"

阶段5_部署运维:
  高权重词 (权重: 3.0):
    - "部署", "发布", "上线", "发布", "交付"
    - "运维", "维护", "管理", "监控", "运营"
    - "服务器", "云服务", "容器", "集群", "环境"
    - "域名", "SSL", "CDN", "负载均衡", "备份"
  
  中权重词 (权重: 2.0):
    - "配置", "设置", "安装", "启动", "运行"
    - "安全", "权限", "认证", "授权", "加密"
    - "日志", "监控", "告警", "统计", "分析"
  
  低权重词 (权重: 1.0):
    - "文档", "说明", "手册", "指南", "教程"
    - "培训", "交接", "移交", "支持", "维护"
  
  排除词 (权重: -2.0):
    - "代码修改", "功能调整", "逻辑变更", "算法优化"
    - "界面调整", "交互修改", "样式更新"
```

### 动态权重调整
```yaml
权重调整因子:
  时间因子:
    - 最近使用的关键词权重增加 20%
    - 长期未使用的关键词权重减少 10%
  
  成功因子:
    - 成功推荐后相关关键词权重增加 15%
    - 错误推荐后相关关键词权重减少 25%
  
  用户偏好因子:
    - 用户偏好的工作方式相关关键词权重增加 10%
    - 用户不喜欢的方式相关关键词权重减少 15%
  
  项目类型因子:
    - 特定项目类型的专用关键词权重增加 25%
    - 不适用项目类型的关键词权重减少 20%
```

## 🔍 语义理解系统

### 意图识别模型
```yaml
意图分类:
  信息获取意图:
    模式: ["什么是", "如何", "为什么", "能否", "是否"]
    推荐策略: 提供详细说明和建议
    阶段倾向: 当前阶段或需求分析
  
  执行操作意图:
    模式: ["开始", "创建", "实现", "部署", "测试"]
    推荐策略: 直接进入相应执行阶段
    阶段倾向: 根据操作类型确定
  
  问题解决意图:
    模式: ["问题", "错误", "Bug", "不工作", "失败"]
    推荐策略: 进入调试和优化模式
    阶段倾向: 测试优化阶段
  
  学习探索意图:
    模式: ["学习", "了解", "研究", "探索", "比较"]
    推荐策略: 提供学习资源和指导
    阶段倾向: 需求分析或架构设计
```

### 上下文语义分析
```yaml
语义特征提取:
  技术栈识别:
    - 编程语言: Python, JavaScript, Java, C#, Go, Rust
    - 前端框架: React, Vue, Angular, Svelte
    - 后端框架: Express, Django, Spring, .NET
    - 数据库: MySQL, PostgreSQL, MongoDB, Redis
  
  项目规模评估:
    - 小型项目: 个人项目、原型、学习项目
    - 中型项目: 团队项目、企业应用、产品开发
    - 大型项目: 平台系统、分布式应用、企业级解决方案
  
  复杂度分析:
    - 简单: 单一功能、直接逻辑、标准实现
    - 中等: 多模块集成、业务逻辑复杂、性能要求
    - 复杂: 分布式架构、高并发、安全要求、合规需求
```

## 📊 上下文分析引擎

### 项目状态分析
```yaml
状态维度:
  进度状态:
    - 项目阶段和完成度
    - 里程碑达成情况
    - 时间线和延期风险
  
  技术状态:
    - 技术栈成熟度
    - 架构稳定性
    - 代码质量指标
  
  团队状态:
    - 团队规模和技能
    - 工作负载和效率
    - 协作模式和工具
  
  资源状态:
    - 时间和预算约束
    - 硬件和基础设施
    - 外部依赖和风险
```

### 历史模式识别
```yaml
模式类型:
  成功模式:
    - 高效的工作流程
    - 成功的技术选择
    - 有效的问题解决方案
  
  风险模式:
    - 常见的错误和陷阱
    - 性能瓶颈和问题
    - 集成和兼容性问题
  
  用户偏好模式:
    - 喜欢的技术和工具
    - 习惯的工作方式
    - 学习和成长轨迹
```

## 🎯 推荐决策引擎

### 决策算法
```yaml
决策流程:
  1. 输入预处理:
     - 文本清理和标准化
     - 关键词提取和标记
     - 语义特征向量化
  
  2. 多维度评分:
     - 关键词匹配得分
     - 语义相似度得分
     - 上下文适配得分
     - 历史成功率得分
  
  3. 综合决策:
     - 加权平均计算
     - 置信度评估
     - 备选方案生成
  
  4. 结果优化:
     - 多样性保证
     - 可解释性增强
     - 个性化调整
```

### 推荐策略
```yaml
策略类型:
  保守策略:
    - 优先推荐当前阶段的后续步骤
    - 避免大幅度的阶段跳跃
    - 确保工作连续性和稳定性
  
  积极策略:
    - 根据用户意图快速切换阶段
    - 支持并行工作和快速迭代
    - 鼓励探索和创新
  
  平衡策略:
    - 综合考虑效率和稳定性
    - 根据项目特点动态调整
    - 提供多种选择和建议
```

## 📈 学习和优化系统

### 反馈收集
```yaml
反馈类型:
  显式反馈:
    - 用户确认或拒绝推荐
    - 满意度评分和评价
    - 改进建议和意见
  
  隐式反馈:
    - 用户行为和选择模式
    - 任务完成时间和质量
    - 错误率和重试次数
  
  系统反馈:
    - 推荐准确率统计
    - 性能指标监控
    - 异常情况检测
```

### 模型优化
```yaml
优化方法:
  参数调优:
    - 权重系数的动态调整
    - 阈值参数的优化
    - 算法超参数的调节
  
  特征工程:
    - 新特征的发现和提取
    - 特征组合和变换
    - 特征选择和降维
  
  模型更新:
    - 在线学习和增量更新
    - 模型版本管理和回滚
    - A/B测试和效果评估
```

## 🎨 推荐结果展示

### 推荐格式
```yaml
标准推荐格式:
  "🤖 智能推荐分析
   
   📊 输入分析:
   • 关键词匹配: [匹配的关键词]
   • 意图识别: [识别的用户意图]
   • 上下文评估: [当前项目状态]
   
   🎯 推荐结果:
   • 建议阶段: [推荐的项目阶段]
   • 置信度: [推荐置信度百分比]
   • 推荐理由: [详细的推荐理由]
   
   📋 下一步行动:
   • 主要任务: [阶段的主要任务]
   • 预期产出: [阶段的预期产出]
   • 注意事项: [需要注意的事项]
   
   🔄 其他选择:
   • 备选方案: [其他可能的选择]
   • 风险提示: [潜在的风险和挑战]
   
   确认切换到推荐阶段吗？(y/n)"
```

### 个性化定制
```yaml
定制选项:
  详细程度:
    - 简洁模式: 只显示推荐结果
    - 标准模式: 包含分析和理由
    - 详细模式: 包含所有信息和选项
  
  交互方式:
    - 自动模式: 直接执行推荐
    - 确认模式: 需要用户确认
    - 选择模式: 提供多个选项
  
  显示风格:
    - 技术风格: 专业术语和详细分析
    - 友好风格: 通俗易懂的表达
    - 简洁风格: 直接明了的建议
```

---

**🚀 使用提示**: 输入 `/recommend` 或自然描述您的需求，智能推荐引擎将为您提供最佳的项目阶段建议！