---
type: "project_rule"
description: "智能MCP推荐命令 - 自动检测用户MCP环境并提供个性化推荐"
globs: ["**/*"]
priority: 960
alwaysApply: true
---

# 🤖 智能MCP推荐命令

> **自动化推荐**: 基于项目分析和用户需求，智能推荐最适合的MCP工具组合

## 🎯 激活命令

### 主要命令
```yaml
MCP检测和推荐:
  - "检查MCP状态" / "MCP状态检查"
  - "推荐MCP工具" / "MCP工具推荐"
  - "配置MCP环境" / "MCP环境配置"
  - "优化MCP设置" / "MCP设置优化"
  - "MCP使用报告" / "生成MCP报告"
```

### 快速命令
```yaml
一键操作:
  - "一键配置MCP" - 自动检测并配置最佳MCP组合
  - "MCP健康检查" - 全面检查MCP环境状态
  - "MCP性能优化" - 分析并优化MCP配置
```

## 🔍 智能检测流程

### 1. 环境扫描
```yaml
检测步骤:
  系统环境:
    - 操作系统类型和版本
    - Node.js和npm版本
    - Claude应用版本
    - 现有MCP配置文件
  
  项目分析:
    - 项目类型识别 (前端/后端/全栈)
    - 技术栈分析 (React/Vue/Node.js/Python等)
    - 项目规模和复杂度
    - 团队协作需求
  
  当前配置:
    - ~/.claude/mcp_settings.json 状态
    - 已安装的MCP服务器
    - 工具使用频率和性能
    - 错误日志和问题分析
```

### 2. 智能分析
```yaml
分析维度:
  需求评估:
    - 开发阶段 (设计/开发/测试/部署)
    - 工作流复杂度
    - 协作团队规模
    - 性能要求
  
  缺口识别:
    - 缺失的关键工具
    - 性能瓶颈点
    - 效率改进机会
    - 安全和稳定性风险
```

## 📊 推荐算法

### 基础推荐矩阵
```yaml
项目类型映射:
  前端项目:
    必需工具:
      - server-filesystem: 文件操作
      - codebase-retrieval: 代码搜索
      - server-memory: 记忆系统
    推荐工具:
      - server-github: Git协作
      - 浏览器自动化: UI测试
      - mermaid生成: 架构图
    可选工具:
      - Peekaboo: 视觉AI (macOS)
      - 截图自动化: 设计验证
  
  后端项目:
    必需工具:
      - server-filesystem: 文件操作
      - codebase-retrieval: 代码搜索
      - server-memory: 记忆系统
    推荐工具:
      - server-github: Git协作
      - server-database: 数据库操作
      - API测试工具: 接口验证
    可选工具:
      - Docker集成: 容器化
      - 监控工具: 性能分析
  
  全栈项目:
    必需工具:
      - server-filesystem: 文件操作
      - codebase-retrieval: 代码搜索
      - server-memory: 记忆系统
      - mcp-feedback-enhanced: 增强反馈
    推荐工具:
      - server-github: Git协作
      - 浏览器自动化: 端到端测试
      - 数据库工具: 全栈数据管理
    可选工具:
      - 部署工具: CI/CD集成
      - 监控套件: 全栈监控
```

### 个性化调整
```yaml
调整因子:
  团队规模:
    - 个人项目: 简化配置，专注核心工具
    - 小团队: 增加协作工具
    - 大团队: 完整工具链和监控
  
  项目阶段:
    - 原型阶段: 快速开发工具
    - 开发阶段: 完整开发工具链
    - 测试阶段: 测试和质量工具
    - 部署阶段: 部署和监控工具
  
  经验水平:
    - 新手: 简化配置，详细指导
    - 中级: 标准配置，优化建议
    - 专家: 高级配置，自定义选项
```

## 🛠️ 自动配置生成

### 配置模板
```yaml
配置生成:
  基础模板:
    - 标准mcp_settings.json结构
    - 工具优先级设置
    - 性能优化参数
    - 安全和权限配置
  
  个性化定制:
    - 基于项目需求的工具选择
    - 优化的参数配置
    - 自定义快捷命令
    - 错误处理和日志设置
```

### 安装指导
```yaml
安装流程:
  自动安装:
    - 生成npm安装命令
    - 创建配置文件
    - 验证安装结果
    - 提供测试命令
  
  手动指导:
    - 详细安装步骤
    - 配置文件示例
    - 常见问题解决
    - 验证和测试方法
```

## 📈 使用示例

### 命令执行流程
```yaml
用户输入: "检查MCP状态"

AI响应流程:
  1. 环境检测:
     "🔍 正在检测您的MCP环境..."
     - 扫描系统配置
     - 分析项目类型
     - 检查现有工具
  
  2. 状态报告:
     "📊 MCP环境状态报告:"
     - 已安装工具: [列表]
     - 缺失工具: [列表]
     - 性能状态: [评分]
     - 推荐改进: [建议]
  
  3. 智能推荐:
     "💡 基于您的 [项目类型] 项目，我推荐:"
     - 必需工具: [具体推荐]
     - 可选工具: [增强功能]
     - 配置优化: [性能建议]
  
  4. 行动建议:
     "🚀 您可以选择:"
     - "一键配置MCP" - 自动安装推荐工具
     - "手动配置" - 获取详细指导
     - "稍后配置" - 保存推荐方案
```

### 推荐输出示例
```yaml
示例输出:
  "🎯 基于您的React前端项目，我推荐以下MCP工具组合:
  
  📦 必需工具 (立即安装):
  • server-filesystem - 高效文件操作
  • codebase-retrieval - 智能代码搜索
  • server-memory - 项目记忆系统
  
  🔧 推荐工具 (提升效率):
  • server-github - Git协作增强
  • 浏览器自动化 - UI测试支持
  
  ⚡ 可选工具 (高级功能):
  • Peekaboo - 视觉AI分析 (需macOS 14.0+)
  
  💾 我可以为您生成自动安装脚本，或提供详细的手动配置指南。
  请选择: '一键配置MCP' 或 '手动配置指导'"
```

## 🔄 持续优化

### 学习机制
```yaml
优化策略:
  使用分析:
    - 工具使用频率统计
    - 性能和效率指标
    - 用户满意度反馈
    - 错误和问题模式
  
  推荐改进:
    - 基于使用数据调整推荐
    - 优化配置参数
    - 更新工具优先级
    - 改进用户体验
```

### 反馈循环
```yaml
反馈机制:
  自动收集:
    - 工具响应时间
    - 成功/失败率
    - 用户操作模式
    - 系统性能指标
  
  主动改进:
    - 定期推荐更新
    - 新工具集成建议
    - 配置优化提醒
    - 最佳实践分享
```

---

**🎯 激活提示**: 该规则会自动监控项目状态，在检测到MCP配置不完整时主动提供推荐。用户也可以随时使用上述命令获取个性化的MCP配置建议。