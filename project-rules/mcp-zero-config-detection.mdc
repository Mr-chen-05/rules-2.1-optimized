---
type: "project_rule"
description: "MCP零配置检测和提醒策略 - 检测用户是否缺少MCP配置并主动提醒引导"
globs: ["**/*"]
priority: 970
alwaysApply: true
---

# 🔍 MCP零配置检测和提醒策略

> **主动关怀**: 检测用户MCP配置状态，在缺少配置时主动提醒和引导

## 🎯 检测触发条件

### 自动检测时机
```yaml
触发场景:
  任务开始时: 每次接收用户任务时自动检测
  文件操作时: 需要文件系统操作时检测
  代码分析时: 需要代码检索时检测
  项目管理时: 涉及项目记忆时检测
  GitHub操作时: 需要Git协作时检测
```

### 检测逻辑
```yaml
检测步骤:
  1. 扫描常见MCP配置路径:
     - ~/.claude/mcp_settings.json
     - %USERPROFILE%\AppData\Roaming\Trae\User\mcp.json
     - %USERPROFILE%\AppData\Roaming\Cursor\User\globalStorage\cursor.mcp\mcp_settings.json
  
  2. 分析配置完整性:
     - 配置文件是否存在
     - 是否包含基础MCP服务器
     - 服务器配置是否有效
  
  3. 评估功能缺失:
     - 缺少文件系统工具
     - 缺少记忆系统
     - 缺少代码检索能力
     - 缺少GitHub集成
```

## 💡 智能提醒机制

### 零配置检测响应
```yaml
当检测到用户完全没有MCP配置时:
  
  立即提醒:
    "🔍 检测到您尚未配置MCP工具。MCP (Model Context Protocol) 可以显著提升AI助手的能力！"
    
  价值说明:
    "配置MCP工具后，我可以："
    "📁 直接操作您的文件和项目"
    "🧠 记住项目信息和上下文"
    "🔍 智能搜索和分析代码"
    "🔗 集成GitHub进行协作"
    "💬 提供更丰富的交互反馈"
    
  引导配置:
    "🚀 推荐配置方案："
    "1. 快速配置 (5分钟): 运行自动安装脚本"
    "2. 手动配置 (15分钟): 按照详细指南配置"
    "3. 稍后配置: 继续当前任务，稍后配置"
```

### 部分配置检测响应
```yaml
当检测到用户有部分MCP配置时:
  
  分析现状:
    "📊 检测到您已配置了 [X] 个MCP工具"
    "✅ 已有: [已配置的工具列表]"
    "❌ 缺少: [建议添加的工具列表]"
    
  针对性建议:
    "💡 基于您的项目类型 ([项目类型])，建议添加："
    "- [具体工具名称]: [功能说明]"
    "- [具体工具名称]: [功能说明]"
    
  配置指导:
    "🔧 您可以选择："
    "1. '推荐MCP工具' - 获取个性化推荐"
    "2. '检查MCP状态' - 查看详细配置分析"
    "3. 继续当前任务 - 使用现有配置"
```

## 🎯 个性化推荐策略

### 基于项目类型推荐
```yaml
前端项目:
  必需工具:
    - server-filesystem: "管理项目文件和组件"
    - server-memory: "记住项目结构和偏好"
  推荐工具:
    - server-github: "版本控制和协作"
    - mcp-feedback-enhanced: "增强交互体验"
  
后端项目:
  必需工具:
    - server-filesystem: "管理API和配置文件"
    - server-memory: "记住数据库结构和API设计"
    - codebase-retrieval: "智能代码搜索和分析"
  推荐工具:
    - server-github: "代码协作和CI/CD"
    - 数据库工具: "数据库操作和管理"

全栈项目:
  必需工具:
    - server-filesystem: "管理前后端文件"
    - server-memory: "记住完整项目架构"
    - codebase-retrieval: "跨技术栈代码分析"
    - mcp-feedback-enhanced: "复杂项目交互管理"
  推荐工具:
    - server-github: "团队协作和版本管理"
    - 自动化工具: "测试和部署自动化"
```

### 基于用户经验推荐
```yaml
新手用户:
  简化配置: 只推荐3个核心工具
  详细指导: 提供步骤详细的配置指南
  持续支持: 配置过程中提供实时帮助
  
中级用户:
  标准配置: 推荐5-7个常用工具
  效率优化: 提供性能调优建议
  最佳实践: 分享使用技巧和经验
  
高级用户:
  完整配置: 推荐全套工具链
  自定义选项: 提供高级配置选项
  集成建议: 与现有工具链集成方案
```

## 🚀 配置引导流程

### 快速配置路径
```yaml
一键配置:
  检测环境: "检查Node.js、Python环境"
  推荐脚本: "运行 mcp-scripts/run-powershell-installer.bat"
  验证安装: "测试MCP工具是否正常工作"
  配置优化: "根据项目需求调整配置"
  
引导命令:
  - "一键配置MCP" - 自动安装推荐工具
  - "MCP配置指导" - 获取详细配置步骤
  - "检查MCP状态" - 验证当前配置状态
```

### 手动配置路径
```yaml
详细指导:
  环境准备: "确保Node.js ≥16.0.0, Python ≥3.8"
  工具安装: "逐步安装每个MCP工具"
  配置文件: "创建和编辑mcp_settings.json"
  测试验证: "验证每个工具是否正常工作"
  
参考文档:
  - "docs/MCP-QUICK-START-GUIDE.md" - 快速入门
  - "docs/MCP-DETAILED-CONFIG-GUIDE.md" - 详细配置
  - "mcp-scripts/安装脚本使用说明.md" - 脚本说明
```

## 📊 检测结果示例

### 零配置用户
```yaml
检测结果:
  "🔍 MCP配置检测结果："
  "❌ 未检测到任何MCP配置"
  "📈 配置MCP后可提升效率 60-80%"
  
  "🎯 推荐行动："
  "1. 运行快速配置脚本 (推荐)"
  "2. 查看MCP工具介绍了解价值"
  "3. 按照详细指南手动配置"
  
  "💡 现在配置还是稍后？"
  "- '立即配置' - 我来指导您完成配置"
  "- '了解更多' - 先了解MCP工具的价值"
  "- '稍后配置' - 继续当前任务"
```

### 部分配置用户
```yaml
检测结果:
  "📊 MCP配置分析："
  "✅ 已配置: filesystem, memory (2个工具)"
  "❌ 建议添加: github, codebase-retrieval (2个工具)"
  "📈 完整配置后可再提升效率 30-40%"
  
  "🎯 针对性建议："
  "基于您的全栈项目，建议添加："
  "- GitHub集成: 版本控制和协作"
  "- 代码检索: 智能代码分析"
  
  "💡 需要配置建议吗？"
  "- '推荐MCP工具' - 获取详细推荐"
  "- '检查MCP状态' - 查看完整分析"
  "- '继续任务' - 使用现有配置"
```

## 🔄 持续监控机制

### 定期检查
```yaml
检查频率:
  新项目: 每次进入新项目时检查
  功能需求: 当任务需要特定MCP功能时检查
  性能问题: 检测到效率问题时分析MCP配置
  
优化建议:
  配置更新: 发现新的有用工具时推荐
  性能调优: 基于使用模式优化配置
  问题修复: 检测到配置问题时主动修复
```

---

**🎯 激活提示**: 该规则会在每次任务开始时自动检测用户的MCP配置状态，对于零配置或配置不完整的用户主动提供友好的提醒和引导，确保用户能够充分利用MCP工具的强大功能。