---
type: "intelligent_workflow_rule"
description: "AI-powered changelog management with automatic generation and version tracking - AI驱动的变更日志管理"
globs: ["**/*"]
priority: 620
alwaysApply: true
integrations: ["super-brain-system", "mcp-intelligent-strategy", "intelligent-project-management", "commit"]
---

# 📋 Changelog Management - 智能变更日志管理

AI驱动的自动化变更日志生成和管理系统，集成版本控制、智能分类和格式化输出。

## 🧠 AI Intelligence Core - AI智能核心

### 智能激活条件
```yaml
自动激活场景:
  - 检测到版本标签创建或更新
  - 用户执行 "/changelog" 相关命令
  - 项目进入发布准备阶段
  - 超级大脑系统推荐生成变更日志
  - 集成到commit工作流中（支持 /commit-fast 别名）

智能分析维度:
  - 提交历史分析和分类 (35%)
  - 版本语义化识别 (25%)
  - 变更影响评估 (20%)
  - 用户关注度分析 (15%)
  - 发布时机判断 (5%)
```

## 🚀 Commands - 智能命令

- `/changelog` - 生成完整变更日志
- `/changelog --since <version>` - 生成指定版本以来的变更
- `/changelog --auto` - 自动化生成并更新文件
- `/changelog --preview` - 预览变更日志内容
- `/changelog --format <type>` - 指定输出格式 (markdown/json/html)
- `/changelog --release` - 生成发布版本变更日志

## ✨ AI-Powered Features - AI驱动功能

### 🤖 智能提交分析引擎
```yaml
提交历史挖掘:
  语义分析:
    - 自动解析约定式提交格式
    - 识别提交类型和作用域
    - 提取关键变更信息
    - 分析变更重要性和影响

  智能分类:
    - 功能增强 (Features)
    - 问题修复 (Bug Fixes)
    - 性能改进 (Performance)
    - 安全更新 (Security)
    - 文档更新 (Documentation)
    - 开发工具 (Development)
    - 重大变更 (Breaking Changes)

  影响评估:
    - 用户可见性评估
    - API兼容性分析
    - 性能影响评估
    - 安全影响分析
```

### 🔧 版本管理集成
```yaml
版本识别:
  语义化版本:
    - 自动识别 MAJOR.MINOR.PATCH 格式
    - 支持预发布版本 (alpha, beta, rc)
    - 处理版本标签和分支
    - 智能版本号建议

  发布管理:
    - 自动检测发布候选
    - 生成发布说明
    - 集成CI/CD流水线
    - 支持多环境发布

  历史追踪:
    - 维护完整版本历史
    - 跟踪版本间差异
    - 生成版本对比报告
    - 支持版本回滚信息
```

### 📝 智能内容生成
```yaml
内容生成引擎:
  自动摘要:
    - 生成版本亮点摘要
    - 提取关键功能描述
    - 创建用户友好的说明
    - 生成技术细节补充

  格式化输出:
    - Markdown格式 (默认)
    - JSON结构化数据
    - HTML网页格式
    - 纯文本格式

  多语言支持:
    - 中英文双语生成
    - 技术术语标准化
    - 用户友好的表达
    - 开发者详细信息
```

## 📋 Changelog Structure - 变更日志结构

### 🎯 标准格式模板
```yaml
文档结构:
  头部信息:
    - 项目名称和描述
    - 版本管理说明
    - 最后更新时间
    - 生成工具信息

  版本条目:
    - 版本号和发布日期
    - 版本类型 (Major/Minor/Patch)
    - 变更摘要
    - 详细变更列表

  分类组织:
    - 🚀 新功能 (Added)
    - 🔧 功能改进 (Changed)
    - 🗑️ 废弃功能 (Deprecated)
    - 🔥 移除功能 (Removed)
    - 🐛 问题修复 (Fixed)
    - 🔒 安全更新 (Security)
```

### 📄 生成模板示例
```markdown
# 📋 变更日志

本项目的所有重要变更都将记录在此文件中。

格式基于 [Keep a Changelog](https://keepachangelog.com/zh-CN/1.0.0/)，
版本号遵循 [语义化版本](https://semver.org/lang/zh-CN/)。

## [未发布]

### 🚀 新增
- 新功能描述

### 🔧 变更
- 功能改进描述

### 🐛 修复
- 问题修复描述

### 🚀 新增
- ✨ 添加AI驱动的快速提交工作流
- 🧠 集成超级大脑系统智能推荐
- 🔧 实现MCP工具自动编排

### 🔧 变更
- ♻️ 重构提交信息生成逻辑
- ⚡️ 优化文件暂存性能
- 🎨 改进用户界面体验

### 🐛 修复
- 🐛 修复大文件处理超时问题
- 🔧 解决并发提交冲突
- 📝 修正文档格式错误

### 🔒 安全
- 🔒 加强敏感信息检测
- 🛡️ 改进权限验证机制
```

## 🔄 AI Workflow Process - AI工作流程

### Phase 1: 数据收集阶段
```yaml
Step 1 - Git历史分析:
  - 扫描指定范围的提交历史
  - 解析提交信息和元数据
  - 识别合并请求和标签
  - 收集作者和时间信息

Step 2 - 变更分类:
  - 基于约定式提交格式分类
  - 识别特殊类型提交
  - 分析变更文件和内容
  - 评估变更重要性

Step 3 - 版本识别:
  - 检测版本标签和分支
  - 分析版本号语义
  - 确定版本发布时间
  - 识别预发布版本
```

### Phase 2: 内容生成阶段
```yaml
Step 4 - 智能摘要:
  - 生成版本亮点摘要
  - 提取关键功能描述
  - 创建用户友好说明
  - 添加技术细节

Step 5 - 格式化输出:
  - 应用标准模板格式
  - 生成多种输出格式
  - 添加链接和引用
  - 优化可读性

Step 6 - 质量检查:
  - 验证内容完整性
  - 检查格式正确性
  - 确保链接有效性
  - 校对语言表达
```

### Phase 3: 集成发布阶段
```yaml
Step 7 - 文件更新:
  - 更新CHANGELOG.md文件
  - 生成版本特定文档
  - 创建发布说明
  - 更新项目文档

Step 8 - 版本管理:
  - 创建版本标签
  - 更新版本文件
  - 生成发布包
  - 触发发布流程
```

## 🧠 Super Brain Integration - 超级大脑集成

### 智能推荐引擎
```yaml
发布时机推荐:
  - 基于变更累积分析推荐发布时机
  - 考虑项目阶段和里程碑
  - 评估变更影响和风险
  - 建议版本号增量策略

内容优化建议:
  - 推荐重要变更突出显示
  - 建议用户关注点强调
  - 优化技术描述表达
  - 提供多版本对比建议

学习和改进:
  - 学习用户编辑偏好
  - 优化自动生成质量
  - 积累项目特定模式
  - 改进分类准确性
```

### 项目管理集成
```yaml
阶段感知生成:
  开发阶段:
    - 重点关注功能开发进展
    - 强调新特性和改进
    - 详细记录开发里程碑

  测试阶段:
    - 突出质量改进和修复
    - 记录性能优化成果
    - 强调稳定性提升

  发布阶段:
    - 生成用户友好的发布说明
    - 突出重要功能和改进
    - 提供升级指导信息

  维护阶段:
    - 重点记录问题修复
    - 强调安全更新
    - 记录兼容性改进
```

## 🎯 Advanced Features - 高级功能

### 📊 变更分析和统计
```yaml
统计分析:
  提交统计:
    - 按类型统计提交数量
    - 分析提交频率趋势
    - 计算代码变更量
    - 评估开发活跃度

  贡献者分析:
    - 统计贡献者活跃度
    - 分析贡献分布
    - 识别关键贡献者
    - 生成贡献者致谢

  质量指标:
    - 计算修复/功能比例
    - 分析变更稳定性
    - 评估发布质量
    - 跟踪技术债务
```

### 🔗 外部集成
```yaml
CI/CD集成:
  - 自动触发变更日志生成
  - 集成到发布流水线
  - 支持多环境部署
  - 自动化发布通知

问题跟踪集成:
  - 关联GitHub Issues
  - 链接Jira票据
  - 引用Pull Requests
  - 生成关闭问题列表

文档系统集成:
  - 更新项目文档
  - 生成API变更说明
  - 创建迁移指南
  - 维护版本兼容性文档
```

## 📋 Configuration Options - 配置选项

### 🎛️ 生成配置
```yaml
内容配置:
  包含类型:
    - feat: true    # 包含新功能
    - fix: true     # 包含问题修复
    - docs: false   # 排除文档变更
    - style: false  # 排除样式变更
    - refactor: true # 包含重构
    - perf: true    # 包含性能改进
    - test: false   # 排除测试变更
    - chore: false  # 排除工具变更

  详细程度:
    - minimal: 仅包含重要变更
    - standard: 标准详细程度
    - detailed: 包含所有变更
    - comprehensive: 最详细模式

  输出格式:
    - format: markdown  # 默认格式
    - template: standard # 使用模板
    - language: auto    # 自动语言检测
    - encoding: utf-8   # 文件编码
```

### 🔧 版本配置
```yaml
版本管理:
  版本格式:
    - pattern: "v{major}.{minor}.{patch}"
    - prerelease: ["alpha", "beta", "rc"]
    - build_metadata: true

  发布配置:
    - auto_tag: true        # 自动创建标签
    - update_version: true  # 更新版本文件
    - create_release: false # 创建GitHub发布
    - notify_team: true     # 通知团队

  历史范围:
    - max_versions: 50      # 最大版本数
    - date_range: "1y"      # 时间范围
    - include_prereleases: false # 包含预发布
```

## 📊 Quality Assurance - 质量保证

### ✅ 内容验证
```yaml
自动检查:
  格式验证:
    - Markdown语法正确性
    - 链接有效性检查
    - 版本号格式验证
    - 日期格式标准化

  内容完整性:
    - 必要章节存在性
    - 版本信息完整性
    - 变更描述充分性
    - 分类准确性验证

  质量评估:
    - 可读性评分
    - 信息密度分析
    - 用户友好度评估
    - 技术准确性检查
```

### 🔧 自动修复
```yaml
智能修复:
  格式修复:
    - 自动修正Markdown格式
    - 标准化日期格式
    - 统一版本号格式
    - 修复链接错误

  内容优化:
    - 改进描述表达
    - 统一术语使用
    - 优化分类归属
    - 增强可读性
```

## 📋 Usage Examples - 使用示例

### 基础变更日志生成
```bash
# 生成完整变更日志
/changelog

# 输出示例:
# 📋 变更日志已生成
# 
# 📊 统计信息:
# - 分析提交: 156个
# - 新功能: 23个
# - 问题修复: 31个
# - 性能改进: 8个
# - 文档更新: 12个
# 
# 📄 文件已更新: CHANGELOG.md
# 🔗 预览链接: ./CHANGELOG.md#v242
```

### 版本范围生成
```bash
# 生成指定版本以来的变更
/changelog --since v2.4.0

# 自动化生成并更新
/changelog --auto --format markdown

# 预览模式
/changelog --preview --since v2.4.0
```

### 发布版本生成
```bash
# 生成发布版本变更日志
/changelog --release --version v2.5.0

# 输出示例:
# 🚀 发布版本 v2.5.0 变更日志
# 
# ## 🌟 版本亮点
# - 全新AI驱动的提交工作流
# - 智能变更日志自动生成
# - 增强的代码质量检查
# 
# ## 📋 详细变更
# [详细的分类变更列表]
# 
# ## 🔄 升级指南
# [升级步骤和注意事项]
```

## 🔗 Integration Points - 集成点

### 与现有规则集成
```yaml
commit集成:
  - 自动从快速提交中提取变更信息
  - 集成智能提交信息分析
  - 支持实时变更日志更新
  - 协同版本管理流程

super-brain-system集成:
  - 利用智能推荐引擎
  - 集成项目阶段感知
  - 支持学习和优化
  - 协同决策支持

mcp-intelligent-strategy集成:
  - 自动选择合适的工具
  - 集成外部服务API
  - 支持并行处理
  - 优化执行效率
```

### 外部工具集成
```yaml
版本控制系统:
  - Git标签和分支管理
  - GitHub/GitLab集成
  - 自动化发布流程
  - 问题跟踪关联

文档系统:
  - 自动更新项目文档
  - 生成API变更文档
  - 创建迁移指南
  - 维护版本兼容性

通知系统:
  - 团队通知集成
  - 邮件发送支持
  - Slack/Teams集成
  - 自定义Webhook
```

## ⚡ Performance Optimization - 性能优化

### 智能缓存机制
```yaml
缓存策略:
  - Git历史分析结果缓存
  - 提交分类结果缓存
  - 生成内容模板缓存
  - 外部API调用缓存

优化技术:
  - 增量分析算法
  - 并行处理管道
  - 智能预加载
  - 资源池管理
```

### 执行效率目标
```yaml
性能指标:
  - 历史分析: <3秒 (100个提交) [优化]
  - 内容生成: <2秒 [优化]
  - 文件更新: <0.5秒 [优化]
  - 总体流程: <8秒 [优化目标]

优化措施:
  - 异步处理非关键任务
  - 智能跳过重复分析
  - 缓存重复计算结果
  - 优化文件I/O操作
  - 增量Git历史分析 [新增]
  - 并行内容生成处理 [新增]
  - 智能缓存命中优化 [新增]
```

## 🚨 Error Handling & Safety - 错误处理和安全保障

### 统一错误处理机制
```yaml
错误分类:
  Level 1 - 致命错误:
    - Git仓库历史损坏
    - 文件系统访问权限不足
    - 网络连接完全中断
    - 关键MCP工具完全不可用

  Level 2 - 严重错误:
    - Git历史分析失败
    - AI内容生成引擎超时
    - 版本标签解析错误
    - 超级大脑系统连接失败

  Level 3 - 一般错误:
    - 部分提交信息解析失败
    - 变更日志格式化错误
    - 非关键MCP工具故障
    - 性能指标未达预期

  Level 4 - 警告信息:
    - 提交信息格式不规范
    - 版本号命名不一致
    - 缓存命中率低
    - 内容质量建议
```

### 错误恢复策略
```yaml
自动恢复:
  - Git操作重试机制 (3次重试)
  - MCP工具故障转移
  - 缓存数据恢复
  - 备用内容生成模型切换

人工干预:
  - 致命错误立即通知用户
  - 提供详细错误信息和解决建议
  - 支持手动数据修复
  - 集成feedback-enhanced反馈机制

日志记录:
  - 完整的Git操作日志
  - AI分析过程记录
  - 用户操作上下文
  - 恢复操作详情
```

### 安全保障机制
```yaml
数据安全:
  - 敏感信息自动过滤
  - 变更日志内容安全扫描
  - 备份重要历史数据
  - 访问权限验证

操作安全:
  - 危险操作确认机制
  - 自动备份变更日志
  - 操作审计追踪
  - 异常模式检测
```

### 与commit协调
```yaml
错误处理协调:
  - 共享统一的错误分类体系
  - 协调的恢复策略
  - 统一的安全保障措施
  - 集成的日志记录系统

工作流协同:
  - commit错误时暂停变更日志生成
  - 变更日志错误时通知commit
  - 共享错误状态和恢复进度
  - 协调的用户通知机制
```

---

**🎯 规则优先级**: 620 (与commit协同工作)  
**🔄 更新频率**: 基于版本发布和用户反馈持续优化  
**📊 成功指标**: 变更日志生成效率提升70%+, 内容质量评分>4.6/5.0  
**🧠 AI模型**: 集成自然语言处理和语义分析引擎