---
type: "intelligent_workflow_rule"
description: "AI-powered fast commit workflow with intelligent message generation - AI驱动的快速提交工作流"
globs: ["**/*"]
priority: 650
alwaysApply: true
integrations: ["super-brain-system", "mcp-intelligent-strategy", "intelligent-project-management"]
---

# ⚡ Commit Fast Workflow - 快速提交工作流

AI驱动的智能快速提交工作流，自动生成高质量提交信息，集成MCP工具自动化和超级大脑系统。

## 🧠 AI Intelligence Core - AI智能核心

### 智能激活条件
```yaml
自动激活场景:
  - 检测到多个文件变更需要快速提交
  - 用户输入 "/commit-fast" 命令
  - 超级大脑系统推荐快速提交流程
  - 项目处于开发阶段且需要频繁提交

智能分析维度:
  - 变更文件类型和数量 (30%)
  - 代码变更复杂度 (25%)
  - 项目当前阶段 (20%)
  - 历史提交模式 (15%)
  - 时间紧迫性 (10%)
```

## 🚀 Commands - 智能命令

- `/commit-fast` - AI智能快速提交（推荐）
- `/commit-fast --auto` - 完全自动化提交（无人工确认）
- `/commit-fast --analyze` - 深度分析模式（详细变更分析）
- `/commit-fast --template <type>` - 使用指定模板类型
- `/commit-fast --smart-stage` - 智能暂存相关文件

## ✨ AI-Powered Features - AI驱动功能

### 🤖 智能提交信息生成
```yaml
AI分析引擎:
  文件变更分析:
    - 自动识别变更类型（feat/fix/docs/refactor等）
    - 分析变更影响范围和重要性
    - 检测代码模式和最佳实践
    - 识别潜在的安全和性能影响

  智能消息生成:
    - 基于变更内容自动生成描述性标题
    - 智能选择最合适的emoji和类型
    - 自动添加作用域（scope）信息
    - 生成详细的变更说明（可选）

  上下文感知:
    - 考虑项目类型和技术栈
    - 分析历史提交模式
    - 集成项目管理阶段信息
    - 参考团队提交规范
```

### 🔧 MCP工具自动编排
```yaml
工具链集成:
  预提交自动化:
    - 智能选择相关的代码检查工具
    - 自动运行适当的测试套件
    - 执行代码格式化和清理
    - 生成或更新相关文档

  质量保证:
    - 自动安全扫描（如适用）
    - 性能影响评估
    - 依赖关系检查
    - 兼容性验证

  智能优化:
    - 根据项目类型选择工具
    - 基于变更范围调整检查级别
    - 并行执行提升效率
    - 智能缓存和增量检查
```

## 📋 Intelligent Commit Types - 智能提交类型

### AI自动识别的提交类型
```yaml
功能开发:
  - ✨ feat: 新功能添加
  - 🎉 init: 项目初始化
  - 🚀 deploy: 部署相关
  - 💫 enhancement: 功能增强

问题修复:
  - 🐛 fix: 常规Bug修复
  - 🚑 hotfix: 紧急修复
  - 🩹 patch: 小补丁
  - 🔧 config: 配置修复

代码质量:
  - ♻️ refactor: 代码重构
  - 🎨 style: 代码格式化
  - ⚡️ perf: 性能优化
  - 🧹 cleanup: 代码清理

文档和测试:
  - 📝 docs: 文档更新
  - ✅ test: 测试相关
  - 📚 tutorial: 教程更新
  - 💡 example: 示例代码

工具和配置:
  - 🧑‍💻 chore: 工具配置
  - 📦 deps: 依赖更新
  - 🔨 build: 构建相关
  - 🔧 tools: 工具更新
```

## 🔄 AI Workflow Process - AI工作流程

### Phase 1: 智能分析阶段
```yaml
Step 1 - 环境检测:
  - 检查Git仓库状态
  - 分析工作目录变更
  - 识别项目类型和技术栈
  - 加载项目配置和规范

Step 2 - 变更分析:
  - 扫描所有修改文件
  - 分析代码变更模式
  - 评估变更复杂度和影响
  - 识别相关性和依赖关系

Step 3 - 智能分类:
  - 自动确定主要变更类型
  - 识别次要变更类型
  - 建议是否拆分提交
  - 生成变更优先级排序
```

### Phase 2: 智能暂存阶段
```yaml
Step 4 - 智能暂存:
  - 自动暂存相关文件
  - 排除临时和配置文件
  - 智能处理冲突文件
  - 验证暂存内容完整性

Step 5 - 预提交检查:
  - 运行智能选择的检查工具
  - 执行自动化测试
  - 进行代码质量评估
  - 生成检查报告
```

### Phase 3: 智能提交阶段
```yaml
Step 6 - 消息生成:
  - AI生成提交标题
  - 创建详细变更描述
  - 添加相关标签和引用
  - 格式化最终提交信息

Step 7 - 提交执行:
  - 执行Git提交操作
  - 记录提交元数据
  - 更新项目状态
  - 触发后续自动化流程
```

## 🧠 Super Brain Integration - 超级大脑集成

### 智能推荐引擎
```yaml
提交策略推荐:
  - 基于项目阶段推荐提交频率
  - 建议最佳提交时机
  - 推荐相关的后续操作
  - 提供历史模式分析

学习和优化:
  - 记录用户提交偏好
  - 学习项目特定模式
  - 优化AI模型准确性
  - 积累最佳实践知识
```

### 项目管理集成
```yaml
阶段感知提交:
  需求分析阶段:
    - 重点关注文档和规范变更
    - 强调需求追踪和引用
    - 建议详细的变更说明

  开发实现阶段:
    - 优化代码变更识别
    - 强化功能完整性检查
    - 集成自动化测试

  测试优化阶段:
    - 重点关注测试覆盖率
    - 强化质量检查
    - 优化性能监控

  部署运维阶段:
    - 强化安全检查
    - 重点关注配置变更
    - 优化部署自动化
```

## 🎯 Intelligent Templates - 智能模板

### AI生成的提交模板
```yaml
功能开发模板:
  标题: "✨ feat({scope}): {ai_generated_title}"
  正文: |
    {ai_analysis_summary}
    
    主要变更:
    {change_list}
    
    影响范围: {impact_scope}
    测试状态: {test_status}

Bug修复模板:
  标题: "🐛 fix({scope}): {ai_generated_title}"
  正文: |
    问题描述: {issue_description}
    根本原因: {root_cause}
    解决方案: {solution_summary}
    
    修复验证: {verification_steps}
    影响评估: {impact_assessment}

重构模板:
  标题: "♻️ refactor({scope}): {ai_generated_title}"
  正文: |
    重构目标: {refactor_goal}
    主要改进: {improvements}
    
    性能影响: {performance_impact}
    兼容性: {compatibility_status}
```

## ⚡ Performance Optimization - 性能优化

### 智能缓存机制
```yaml
缓存策略:
  - 文件变更分析结果缓存
  - AI模型推理结果缓存
  - 工具执行结果缓存
  - 项目配置信息缓存

优化技术:
  - 增量分析算法
  - 并行处理管道
  - 智能预加载
  - 资源池管理
```

### 执行效率目标
```yaml
性能指标:
  - 分析阶段: <3秒
  - 暂存阶段: <2秒
  - 提交阶段: <1秒
  - 总体流程: <8秒

优化措施:
  - 异步处理非关键任务
  - 智能跳过不必要检查
  - 缓存重复计算结果
  - 优化文件I/O操作
```

## 🔒 Security & Safety - 安全保障

### 智能安全检查
```yaml
自动安全扫描:
  - 敏感信息检测
  - 安全漏洞扫描
  - 依赖安全检查
  - 配置安全验证

安全策略:
  - 阻止敏感信息提交
  - 警告潜在安全风险
  - 建议安全最佳实践
  - 记录安全审计日志
```

## 📊 Analytics & Reporting - 分析报告

### 智能分析报告
```yaml
提交质量分析:
  - 提交信息质量评分
  - 代码变更质量评估
  - 最佳实践遵循度
  - 团队协作效率

趋势分析:
  - 提交频率和模式
  - 代码质量趋势
  - 开发效率指标
  - 问题修复效率
```

## 🔧 Configuration - 配置选项

### AI行为配置
```yaml
智能级别设置:
  conservative: 保守模式（更多人工确认）
  balanced: 平衡模式（推荐设置）
  aggressive: 激进模式（最大自动化）

自定义配置:
  - AI模型选择和参数
  - 工具链配置
  - 模板自定义
  - 集成服务配置
```

## 📋 Usage Examples - 使用示例

### 基础快速提交
```bash
# AI自动分析并生成提交
/commit-fast

# 输出示例:
# ✨ feat(auth): 实现JWT认证中间件和用户权限管理
# 
# 主要变更:
# - 添加JWT token生成和验证逻辑
# - 实现用户权限检查中间件
# - 更新用户模型支持角色管理
# 
# 影响范围: 认证系统, API路由保护
# 测试状态: 单元测试已通过, 集成测试待执行
```

### 完全自动化提交
```bash
# 无需人工确认的自动提交
/commit-fast --auto

# 系统自动执行:
# 1. 分析变更 -> 2. 智能暂存 -> 3. 生成消息 -> 4. 执行提交
```

### 深度分析模式
```bash
# 详细分析变更内容
/commit-fast --analyze

# 提供详细的变更分析报告和建议
```

## 🚨 Error Handling & Safety - 错误处理和安全保障

### 统一错误处理机制
```yaml
错误分类:
  Level 1 - 致命错误:
    - Git仓库不存在或损坏
    - 文件系统权限不足
    - 网络连接完全中断
    - MCP工具完全不可用

  Level 2 - 严重错误:
    - 提交冲突无法自动解决
    - AI分析引擎响应超时
    - 关键MCP工具故障
    - 超级大脑系统连接失败

  Level 3 - 一般错误:
    - 部分文件暂存失败
    - 提交信息生成质量低
    - 非关键MCP工具故障
    - 性能指标未达预期

  Level 4 - 警告信息:
    - 文件格式不规范
    - 提交频率异常
    - 缓存命中率低
    - 用户操作建议
```

### 错误恢复策略
```yaml
自动恢复:
  - 网络重连机制 (3次重试)
  - MCP工具故障转移
  - 缓存数据恢复
  - 备用AI模型切换

人工干预:
  - 致命错误立即通知用户
  - 提供详细错误信息和解决建议
  - 支持手动回滚操作
  - 集成feedback-enhanced反馈机制

日志记录:
  - 完整的错误堆栈信息
  - 用户操作上下文
  - 系统状态快照
  - 恢复操作记录
```

### 安全保障机制
```yaml
数据安全:
  - 敏感信息自动检测和过滤
  - 提交前安全扫描
  - 备份关键数据
  - 权限验证机制

操作安全:
  - 危险操作二次确认
  - 自动回滚点创建
  - 操作审计日志
  - 异常行为检测
```

## 🔗 Integration Points - 集成点

### 与现有规则集成
```yaml
兼容性保证:
  - 完全兼容现有 commit.mdc
  - 扩展而非替换现有功能
  - 保持向后兼容性
  - 支持渐进式迁移

协同工作:
  - 与超级大脑系统协同
  - 集成MCP工具编排
  - 支持项目管理阶段
  - 连接智能推荐引擎

错误处理协调:
  - 与changelog-management共享错误处理机制
  - 统一的错误分类和恢复策略
  - 协调的安全保障措施
  - 集成的日志记录系统
```

---

**🎯 规则优先级**: 650 (高于标准commit.mdc的600)  
**🔄 更新频率**: 基于AI学习持续优化  
**📊 成功指标**: 提交效率提升50%+, 消息质量评分>4.5/5.0  
**🧠 AI模型**: 集成超级大脑系统智能决策引擎