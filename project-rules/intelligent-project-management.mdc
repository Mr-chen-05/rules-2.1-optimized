---
type: "project_rule"
description: "智能项目管理系统 - 整合阶段管理、工作流编排、智能推荐和记忆系统"
globs: ["**/*"]
priority: 950
---

# 🧠 智能项目管理系统

> **统一管理**: 整合严格阶段管理、完整工作流、智能推荐机制、记忆系统和超级大脑系统

## 🎯 系统概述

本系统提供智能化的项目管理能力，结合现代AI代理技术和传统项目管理最佳实践，确保项目从需求分析到部署运维的全生命周期管理。

## 📋 五阶段项目管理 (整合完整工作流)

### 阶段1: 需求分析 (Requirements Analysis)
```yaml
主要目标:
  - 明确项目需求和目标
  - 确定技术方案和架构方向
  - 制定项目计划和时间线
  - 识别风险和约束条件

核心任务:
  需求收集:
    - 用户访谈和需求调研
    - 功能需求和非功能需求分析
    - 业务流程梳理和优化
    - 用户体验和界面需求
  
  技术调研:
    - 技术栈选型和评估
    - 架构模式选择和分析
    - 第三方服务和工具评估
    - 性能和安全要求分析
  
  项目规划:
    - 工作分解结构(WBS)制定
    - 时间估算和里程碑设定
    - 资源需求和团队配置
    - 风险识别和应对策略

约束条件:
  - 禁止代码生成，专注需求澄清
  - 禁止技术实现，专注方案设计

交付产出:
  - 需求规格说明书
  - 技术方案设计文档
  - 项目计划和时间线
  - 风险评估和应对计划
```

### 阶段2: 架构设计 (Architecture Design)
```yaml
主要目标:
  - 设计系统架构和技术框架
  - 建立开发环境和工具链
  - 制定开发规范和流程
  - 创建项目基础结构

核心任务:
  架构设计:
    - 系统架构图和组件设计
    - 数据库设计和数据模型
    - API设计和接口规范
    - 安全架构和权限设计
  
  环境搭建:
    - 开发环境配置和标准化
    - 版本控制系统设置
    - CI/CD流水线基础配置
    - 开发工具和插件配置
  
  框架建立:
    - 项目目录结构创建
    - 基础代码框架搭建
    - 依赖管理和包配置
    - 基础组件和工具类

约束条件:
  - 禁止业务逻辑实现
  - 禁止完整功能开发
  - 专注架构和框架搭建

交付产出:
  - 系统架构设计文档
  - 数据库设计文档
  - API接口设计文档
  - 开发环境配置指南
```

### 阶段3: 开发实现 (Development Implementation)
```yaml
主要目标:
  - 实现核心功能和业务逻辑
  - 开发用户界面和交互
  - 集成第三方服务和API
  - 编写单元测试和文档

核心任务:
  功能开发:
    - 核心业务逻辑实现
    - 用户界面开发
    - 数据处理和存储
    - 第三方集成和API调用
  
  质量保证:
    - 单元测试编写
    - 代码审查和重构
    - 性能监控和日志
    - 错误处理和异常管理

约束条件:
  - 禁止架构重大调整
  - 禁止需求范围扩展
  - 专注功能实现和质量

交付产出:
  - 功能完整的应用代码
  - 单元测试和测试报告
  - API文档和使用指南
  - 代码质量分析报告
```

### 阶段4: 测试优化 (Testing & Optimization)
```yaml
主要目标:
  - 全面测试和质量验证
  - 性能优化和用户体验改进
  - Bug修复和稳定性提升
  - 准备生产环境部署

核心任务:
  测试验证:
    - 集成测试和系统测试
    - 用户验收测试(UAT)
    - 性能测试和压力测试
    - 安全测试和漏洞扫描
  
  优化改进:
    - 性能瓶颈识别和优化
    - 用户体验改进
    - 代码优化和重构
    - 资源使用优化

约束条件:
  - 禁止新功能开发
  - 禁止架构重大变更
  - 专注测试和优化

交付产出:
  - 完整测试报告
  - 性能优化报告
  - Bug修复记录
  - 生产就绪确认
```

### 阶段5: 部署运维 (Deployment & Operations)
```yaml
主要目标:
  - 生产环境部署和配置
  - 监控和运维体系建立
  - 用户培训和文档交付
  - 项目总结和经验沉淀

核心任务:
  部署配置:
    - 生产环境搭建
    - 应用部署和配置
    - 数据库迁移和初始化
    - 域名和SSL证书配置
  
  运维监控:
    - 监控系统配置
    - 日志收集和分析
    - 备份和恢复策略
    - 安全防护和更新

约束条件:
  - 禁止代码功能修改
  - 禁止架构调整
  - 专注部署和运维

交付产出:
  - 部署脚本和配置文件
  - 运维手册和监控配置
  - 用户使用手册
  - 项目总结和文档归档
```

### 阶段切换机制
```yaml
切换方式:
  命令格式: "/switch [阶段号]"
  自然语言: "切换到XX阶段"、"进入XX阶段"
  智能推荐: "/switch 0" 启动推荐模式
  
辅助命令:
  "/status" - 查看当前阶段和规则
  "/recommend" - 获取阶段推荐
  "/memory" - 查看项目记忆
```

## 🤖 智能推荐机制 (集成全局推荐引擎)

### 推荐引擎集成
```yaml
架构设计:
  全局推荐引擎: intelligent-recommendation-engine.mdc
  项目管理集成: 调用全局推荐引擎API
  避免重复实现: 统一推荐算法和逻辑

集成方式:
  1. 项目上下文传递给全局推荐引擎
  2. 全局推荐引擎分析并返回推荐结果
  3. 项目管理系统应用推荐结果
  4. 记录推荐历史和用户反馈

推荐类型:
  阶段推荐: 基于用户输入推荐最适合的项目阶段
  工具推荐: 基于当前阶段推荐最优MCP工具组合
  流程推荐: 基于项目类型推荐最佳工作流程
  优化推荐: 基于项目状态推荐改进措施
```

### 推荐触发机制
```yaml
自动触发:
  - 用户输入包含阶段切换意图时
  - 当前阶段完成度达到80%时
  - 检测到项目进展异常时
  - 用户请求帮助或指导时

手动触发:
  - 用户执行 "/recommend" 命令
  - 用户执行 "/switch 0" 命令
  - 用户询问 "下一步做什么"
  - 用户表达困惑或不确定时

推荐结果应用:
  - 显示推荐的阶段和理由
  - 提供阶段切换选项
  - 记录用户选择和反馈
  - 更新项目状态和记忆
```

## 💾 项目记忆系统

### 记忆存储结构
```json
{
  "project_id": "项目唯一标识",
  "project_name": "项目名称",
  "current_phase": "当前阶段",
  "created_time": "创建时间",
  "last_updated": "最后更新时间",
  "phases": {
    "phase_1_requirements": {
      "status": "completed|in_progress|pending",
      "start_time": "开始时间",
      "end_time": "结束时间",
      "requirements": "需求描述",
      "technical_decisions": ["技术决策列表"],
      "deliverables": ["交付物列表"],
      "user_confirmations": ["用户确认记录"]
    },
    "phase_2_architecture": {
      "status": "completed|in_progress|pending",
      "technical_stack": "技术栈选择",
      "architecture_design": "架构设计方案",
      "system_components": ["系统组件列表"],
      "design_patterns": ["设计模式列表"]
    },
    "phase_3_development": {
      "status": "completed|in_progress|pending",
      "implementation_plan": "实施计划",
      "code_structure": "代码结构设计",
      "development_milestones": ["开发里程碑"],
      "completed_features": ["已完成功能"]
    },
    "phase_4_testing": {
      "status": "completed|in_progress|pending",
      "testing_strategy": "测试策略",
      "quality_standards": "质量标准",
      "performance_metrics": "性能指标",
      "bug_reports": ["Bug报告列表"]
    },
    "phase_5_deployment": {
      "status": "completed|in_progress|pending",
      "deployment_strategy": "部署策略",
      "environment_config": "环境配置",
      "monitoring_setup": "监控配置",
      "maintenance_plan": "维护计划"
    }
  },
  "global_notes": ["全局备注"],
  "lessons_learned": ["经验教训"]
}
```

### 自动记录触发条件
```yaml
记录触发:
  阶段切换时: 自动保存当前阶段状态
  重要决策时: 技术选型、架构设计等
  里程碑达成时: 功能完成、测试通过等
  问题解决时: Bug修复、性能优化等
  用户确认时: 需求确认、方案批准等
```

## 🛠️ MCP工具策略集成

### 工具策略统一
```yaml
MCP工具策略:
  统一入口: 使用 mcp-intelligent-strategy.mdc 中定义的策略
  
  注意: 项目管理系统不重复定义MCP工具策略
        所有MCP工具使用策略已统一到 mcp-intelligent-strategy.mdc
        
  集成方式:
    - 项目管理系统调用MCP工具策略
    - 根据项目阶段自动选择最优工具组合
    - 智能编排和并行执行优化
    - 实时性能监控和动态调整
```

## 📊 智能质量保证体系

### 质量标准
```yaml
智能代码质量:
  基础指标:
    - 代码覆盖率 ≥ 85%
    - 代码复杂度 ≤ 8
    - 代码重复率 ≤ 3%
    - 静态分析无严重问题
  
  智能增强:
    - AI代码审查和质量评分
    - 自动重构建议和优化方案
    - 代码模式识别和最佳实践推荐
    - 性能瓶颈预测和优化建议

智能性能标准:
  基础指标:
    - 页面加载时间 ≤ 2秒
    - API响应时间 ≤ 300ms
    - 并发用户数 ≥ 1500
    - 系统可用性 ≥ 99.95%
  
  智能增强:
    - 性能趋势预测和优化
    - 自适应负载均衡
    - 智能缓存策略优化
    - 资源使用智能监控

需求理解质量:
  新增指标:
    - 需求理解准确率 ≥ 92%
    - 需求澄清效率提升 ≥ 50%
    - 需求变更适应性 ≥ 85%
    - 用户满意度 ≥ 4.7/5.0
```

## 🔄 阶段间协调机制

### 阶段切换条件
```yaml
切换检查点:
  阶段1→阶段2:
    - 需求文档已确认
    - 技术方案已批准
    - 项目计划已制定
    - 团队资源已到位
  
  阶段2→阶段3:
    - 架构设计已完成
    - 开发环境已配置
    - 基础框架已搭建
    - 开发规范已制定
  
  阶段3→阶段4:
    - 核心功能已实现
    - 基本测试已通过
    - 代码质量已达标
    - 集成测试已完成
  
  阶段4→阶段5:
    - 所有测试已通过
    - 性能已达到要求
    - Bug已修复完成
    - 用户验收已通过
```

### 回退机制
```yaml
回退条件:
  - 发现重大设计缺陷
  - 技术方案不可行
  - 需求发生重大变更
  - 质量标准未达到

回退流程:
  1. 问题识别和评估
  2. 回退决策和批准
  3. 状态保存和备份
  4. 阶段回退和重新开始
  5. 经验总结和改进
```

## 🚀 超级大脑系统集成

### 系统激活
```yaml
激活方式:
  统一入口: 使用 super-brain-system.mdc 中定义的激活机制
  主要触发词: "启动超级大脑系统"
  
  注意: 所有系统激活逻辑已统一到 super-brain-system.mdc
        本文件专注于项目管理流程和阶段控制
```

### 项目管理功能
```yaml
核心功能:
  1. 五阶段生命周期管理:
     - 严格的阶段控制和验证
     - 阶段间的依赖关系管理
     - 交付物质量保证
  
  2. 工作流编排:
     - 任务分解和优先级排序
     - 依赖关系分析和管理
     - 并行任务协调
  
  3. 质量控制:
     - 阶段门禁检查
     - 交付物验证
     - 风险识别和缓解
  
  4. 进度跟踪:
     - 实时进度监控
     - 里程碑管理
     - 绩效分析和报告
```

## 🔄 完整工作流集成

### 前后端协同工作流
```yaml
协同模式:
  并行开发:
    - 前端: UI/UX设计和组件开发
    - 后端: API设计和业务逻辑
    - 同步点: 接口定义、数据模型
  
  集成测试:
    - 前端: 组件测试、E2E测试
    - 后端: 单元测试、集成测试
    - 联调: API对接、数据流测试
  
  部署协调:
    - 前端: 静态资源部署
    - 后端: 服务部署和配置
    - 监控: 全栈性能监控
```

### MCP工具智能编排
```yaml
工具编排策略:
  阶段1_需求分析:
    主要工具: ["mcp-feedback-enhanced", "memory"]
    目标: 需求收集和分析
  
  阶段2_架构设计:
    主要工具: ["codebase-retrieval", "server-filesystem"]
    目标: 架构设计和项目初始化
  
  阶段3_开发实现:
    主要工具: ["server-github", "codebase-retrieval", "server-filesystem"]
    目标: 代码开发和版本管理
  
  阶段4_测试优化:
    主要工具: ["server-filesystem", "codebase-retrieval"]
    目标: 测试执行和性能优化
  
  阶段5_部署运维:
    主要工具: ["server-github", "server-filesystem"]
    目标: 部署配置和运维管理
```

## 📊 使用示例

### 项目管理流程
```
# 系统激活后的项目管理流程示例

阶段1 - 需求分析:
用户: "我要开发一个电商网站"
AI: "📋 进入需求分析阶段
     🎯 当前任务: 需求收集和分析
     
     需要明确的关键信息：
     1. 目标用户群体和使用场景
     2. 核心功能需求列表
     3. 非功能性需求（性能、安全等）
     4. 技术约束和偏好
     5. 项目时间线和预算"
```

### 阶段切换管理
```
用户: "需求已经明确了，开始架构设计"
AI: "🔄 阶段切换检查
     ✅ 验证阶段1交付物完整性
     📝 保存需求分析成果到项目记忆
     🔄 切换到阶段2-架构设计
     
     🏗️ 架构设计阶段任务:
     1. 技术栈选择和评估
     2. 系统架构设计
     3. 数据库设计和建模
     4. 项目结构初始化"
```

### 智能推荐
```
用户: "我想开始写代码了"
AI: "🤖 智能分析中...
     📊 关键词匹配: '写代码' → 阶段3-开发实现
     ⚠️  当前阶段: 阶段2-架构设计
     
     💡 建议: 架构设计尚未完成，建议先完成：
     - 数据库表结构设计
     - API接口定义
     - 前端组件规划
     
     确认切换到开发阶段吗？(y/n)"
```

## 🎯 集成优势

1. **结构化管理**: 严格的阶段约束确保项目有序进行
2. **智能辅助**: AI推荐和自动化减少人工决策负担
3. **记忆延续**: 完整的项目记忆确保信息不丢失
4. **工具协同**: MCP工具与项目阶段深度集成
5. **经验积累**: 持续学习和优化提升项目成功率

---

**🎯 使用提示**: 通过 `/switch 0` 启动智能推荐，让AI帮助您选择最适合的项目阶段！