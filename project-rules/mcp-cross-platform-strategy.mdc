---
type: "project_rule"
description: "跨AI工具平台MCP配置管理策略 - 支持Trae、Cursor、Claude等多种AI工具的MCP配置检测和同步"
globs: ["**/*"]
priority: 965
alwaysApply: true
---

# 🌐 跨AI工具平台MCP配置管理策略

> **统一管理**: 让AI在不同工具（Trae、Cursor、Claude等）下都能读取和管理MCP配置

## 🎯 支持的AI工具平台

### 配置文件路径映射
```yaml
AI工具配置路径:
  Trae:
    配置文件: "%USERPROFILE%\AppData\Roaming\Trae\User\mcp.json"
    格式: JSON (mcpServers对象)
    特点: 支持disabled字段、timeout配置、环境变量
  
  Trae CN:
    配置文件: "%USERPROFILE%\AppData\Roaming\Trae CN\User\mcp.json"
    格式: JSON (mcpServers对象)
    特点: 中文版Trae，配置格式相同
  
  Cursor:
    配置文件: "%USERPROFILE%\AppData\Roaming\Cursor\User\globalStorage\cursor.mcp\mcp_settings.json"
    格式: JSON (mcpServers对象)
    特点: 全局存储，支持工作区级配置
  
  Claude Desktop:
    配置文件: "%USERPROFILE%\.claude\mcp_settings.json"
    格式: JSON (mcpServers对象)
    特点: 用户主目录配置，标准MCP格式
  
  Claude Code:
    配置文件: "%USERPROFILE%\.claude\mcp_settings.json"
    格式: JSON (mcpServers对象)
    特点: 与Claude Desktop共享配置
```

## 🔍 智能检测机制

### 多平台环境扫描
```yaml
检测策略:
  自动发现:
    - 扫描所有已知AI工具的配置目录
    - 检测已安装的AI工具版本
    - 分析现有MCP服务器配置
    - 识别配置差异和冲突
  
  配置分析:
    - 解析不同格式的配置文件
    - 统计已配置的MCP服务器
    - 检测服务器状态和可用性
    - 分析配置完整性和优化空间
  
  兼容性检查:
    - 验证MCP服务器版本兼容性
    - 检查环境变量和依赖
    - 测试服务器连接状态
    - 评估性能和稳定性
```

### 配置状态报告
```yaml
报告内容:
  平台覆盖:
    - 已安装的AI工具列表
    - 各平台MCP配置状态
    - 服务器数量和类型统计
    - 配置同步状态分析
  
  服务器清单:
    - 文件系统服务器 (filesystem)
    - 代码检索服务器 (codebase-retrieval)
    - 记忆系统服务器 (memory)
    - GitHub集成服务器 (github)
    - 数据库服务器 (mysql, redis)
    - 自动化服务器 (playwright, testsprite)
    - 增强功能服务器 (feedback-enhanced, context7)
  
  优化建议:
    - 缺失的关键服务器
    - 配置优化建议
    - 性能提升方案
    - 安全性改进建议
```

## 🔄 配置同步策略

### 智能同步机制
```yaml
同步策略:
  主配置选择:
    - 自动识别最完整的配置作为主配置
    - 优先级: Trae > Cursor > Claude
    - 考虑服务器数量和配置完整性
    - 保留用户自定义配置
  
  增量同步:
    - 只同步缺失的服务器配置
    - 保留各平台特定设置
    - 智能合并冲突配置
    - 备份原始配置文件
  
  配置验证:
    - 同步后验证配置正确性
    - 测试服务器连接状态
    - 检查环境变量和路径
    - 确保功能正常工作
```

### 配置模板生成
```yaml
模板策略:
  基础配置:
    - 核心MCP服务器 (filesystem, memory, github)
    - 标准超时和环境设置
    - 通用路径和参数配置
    - 安全的默认设置
  
  平台适配:
    - Trae特定配置 (disabled字段、timeout)
    - Cursor工作区配置
    - Claude标准配置
    - 环境变量适配
  
  个性化定制:
    - 基于项目类型的服务器选择
    - 用户偏好的参数设置
    - 性能优化的配置调整
    - 安全和权限的合理配置
```

## 🛠️ 跨平台命令系统

### 统一管理命令
```yaml
检测命令:
  - "检查所有AI工具MCP状态" - 全平台环境检测
  - "扫描MCP配置" - 多平台配置分析
  - "MCP平台报告" - 详细状态报告
  - "检测MCP差异" - 配置差异分析

同步命令:
  - "同步MCP配置" - 智能配置同步
  - "统一MCP设置" - 跨平台配置统一
  - "备份MCP配置" - 配置文件备份
  - "恢复MCP配置" - 配置文件恢复

优化命令:
  - "优化所有MCP配置" - 全平台性能优化
  - "修复MCP问题" - 自动问题修复
  - "更新MCP服务器" - 批量更新服务器
  - "清理MCP配置" - 清理无效配置
```

### 智能推荐系统
```yaml
推荐逻辑:
  缺失检测:
    - 识别各平台缺失的关键服务器
    - 分析功能缺口和改进机会
    - 推荐最适合的服务器组合
    - 提供一键配置选项
  
  性能优化:
    - 分析服务器响应时间
    - 优化超时和缓存设置
    - 调整并发和资源配置
    - 提供性能调优建议
  
  安全增强:
    - 检查敏感信息泄露风险
    - 优化环境变量配置
    - 加强访问权限控制
    - 提供安全配置建议
```

## 📊 实际配置示例

### Trae配置示例
```json
{
  "mcpServers": {
    "filesystem": {
      "disabled": false,
      "timeout": 60,
      "type": "stdio",
      "command": "npx",
      "args": ["@modelcontextprotocol/server-filesystem", "E:/AgentRules"],
      "cwd": "D:/ALLMCP",
      "env": {}
    },
    "memory": {
      "timeout": 60,
      "type": "stdio",
      "command": "npx",
      "args": ["@modelcontextprotocol/server-memory"],
      "cwd": "D:/ALLMCP",
      "env": {}
    },
    "github": {
      "timeout": 60,
      "type": "stdio",
      "command": "npx",
      "args": ["@modelcontextprotocol/server-github"],
      "cwd": "D:/ALLMCP",
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "your_token_here"
      }
    }
  }
}
```

### Cursor配置示例
```json
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-filesystem", "E:/AgentRules"],
      "env": {}
    },
    "memory": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-memory"],
      "env": {}
    },
    "github": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "your_token_here"
      }
    }
  }
}
```

## 🔧 自动化脚本

### 配置同步脚本
```powershell
# PowerShell脚本示例
function Sync-MCPConfigs {
    param(
        [string]$SourcePlatform = "auto",
        [string[]]$TargetPlatforms = @("all")
    )
    
    # 检测所有AI工具配置
    $configs = @{
        "Trae" = "$env:USERPROFILE\AppData\Roaming\Trae\User\mcp.json"
        "TraeCN" = "$env:USERPROFILE\AppData\Roaming\Trae CN\User\mcp.json"
        "Cursor" = "$env:USERPROFILE\AppData\Roaming\Cursor\User\globalStorage\cursor.mcp\mcp_settings.json"
        "Claude" = "$env:USERPROFILE\.claude\mcp_settings.json"
    }
    
    # 自动选择最完整的配置作为源
    if ($SourcePlatform -eq "auto") {
        $SourcePlatform = Get-BestMCPConfig -Configs $configs
    }
    
    # 同步到目标平台
    foreach ($target in $TargetPlatforms) {
        if ($target -eq "all") {
            $TargetPlatforms = $configs.Keys | Where-Object { $_ -ne $SourcePlatform }
        }
        Sync-MCPConfig -Source $configs[$SourcePlatform] -Target $configs[$target]
    }
}
```

## 📈 效果评估

### 关键指标
```yaml
覆盖率指标:
  - 平台覆盖率: 检测到的AI工具数量/已安装AI工具数量
  - 配置完整性: 已配置服务器数量/推荐服务器数量
  - 同步成功率: 成功同步的配置数量/总配置数量
  - 功能可用性: 正常工作的服务器数量/总服务器数量

性能指标:
  - 检测速度: <5秒完成全平台扫描
  - 同步效率: <30秒完成配置同步
  - 配置准确率: >95%配置正确性
  - 用户满意度: >4.5/5.0使用体验
```

## 🎯 使用场景

### 典型工作流
```yaml
场景1 - 新环境配置:
  1. "检查所有AI工具MCP状态" - 全面环境检测
  2. "推荐MCP配置" - 获取个性化推荐
  3. "一键配置所有平台" - 自动配置所有AI工具
  4. "验证MCP功能" - 测试配置正确性

场景2 - 配置同步:
  1. "扫描MCP配置差异" - 检测配置不一致
  2. "同步MCP配置" - 智能配置同步
  3. "验证同步结果" - 确认同步成功
  4. "优化性能设置" - 调优配置参数

场景3 - 问题排查:
  1. "MCP健康检查" - 全面状态检查
  2. "诊断MCP问题" - 自动问题诊断
  3. "修复配置错误" - 自动修复问题
  4. "生成诊断报告" - 详细问题报告
```

---

**🎯 激活提示**: 该策略会自动检测所有已安装的AI工具，并提供跨平台的MCP配置管理功能。用户可以使用统一的命令在不同AI工具间同步和管理MCP配置。