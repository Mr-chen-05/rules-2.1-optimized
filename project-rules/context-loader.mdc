---
type: "always_apply"
description: "AI-powered intelligent project context loader with deep analysis - AI驱动的智能项目上下文加载器"
globs: ["**/*"]
priority: 681
alwaysApply: true
integrations: ["super-brain-system", "mcp-intelligent-strategy", "intelligent-project-management", "commit", "changelog-management", "code-quality-check", "root-cause-analysis", "systematic-debugging"]

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "Add version management system"
      - "Standardize rule file structure"
---

# 🧠 Context Loader - 智能项目上下文加载器

AI驱动的智能项目上下文分析和加载系统，超越传统上下文加载，提供深度项目理解和智能配置推荐。

## 🧠 AI Intelligence Core - AI智能核心

### 智能激活条件
```yaml
自动激活场景:
  - 检测到新项目或项目结构变化
  - 用户执行 "/load-context" 命令
  - 超级大脑系统推荐上下文分析
  - AI助手首次接触项目时
  - 项目配置发生重大变更

智能分析维度:
  - 项目类型和技术栈识别 (35%)
  - 代码结构和架构模式 (25%)
  - 开发工具和配置分析 (20%)
  - 团队协作模式识别 (15%)
  - 项目成熟度评估 (5%)
```

## 🚀 Commands - 智能命令

- `/load-context` - AI智能项目上下文加载（推荐）
- `/load-context --deep` - 深度分析模式（详细项目分析）
- `/load-context --quick` - 快速分析模式（基础信息）
- `/load-context --tech-stack` - 技术栈专项分析
- `/load-context --team` - 团队协作模式分析
- `/load-context --config` - 配置和工具分析

## ✨ AI-Powered Features - AI驱动功能

### 🤖 智能项目识别引擎
```yaml
项目类型识别:
  前端项目:
    - React/Next.js项目 (package.json + React依赖)
    - Vue.js项目 (vue.config.js + Vue依赖)
    - Angular项目 (angular.json + Angular CLI)
    - 静态网站 (HTML/CSS/JS结构)
    - 移动端应用 (React Native/Flutter)

  后端项目:
    - Node.js项目 (package.json + Express/Koa)
    - Python项目 (requirements.txt + Django/Flask)
    - Java项目 (pom.xml/build.gradle + Spring)
    - .NET项目 (.csproj + ASP.NET)
    - Go项目 (go.mod + Gin/Echo)

  全栈项目:
    - Monorepo结构识别
    - 微服务架构检测
    - JAMstack项目识别
    - 容器化项目分析

  特殊项目:
    - 开源库项目
    - 文档项目
    - 配置项目
    - 脚本工具项目

技术栈深度分析:
  - 主要框架和库识别
  - 开发工具链分析
  - 构建和部署配置
  - 测试框架和策略
  - 数据库和存储方案
```

### 🔧 智能配置推荐引擎
```yaml
配置分析:
  开发环境:
    - IDE配置文件分析
    - 编辑器设置检测
    - 插件和扩展识别
    - 调试配置分析

  构建工具:
    - Webpack/Vite/Rollup配置
    - Babel/TypeScript配置
    - ESLint/Prettier设置
    - 测试框架配置

  部署配置:
    - Docker/Kubernetes配置
    - CI/CD流水线设置
    - 云服务配置
    - 环境变量管理

智能推荐:
  - 缺失配置自动识别
  - 最佳实践配置建议
  - 性能优化配置推荐
  - 安全配置增强建议
```

### 📊 项目健康度评估
```yaml
健康度指标:
  代码质量:
    - 代码覆盖率分析
    - 技术债务评估
    - 代码复杂度统计
    - 安全漏洞扫描

  项目管理:
    - 文档完整性检查
    - 版本管理规范性
    - 依赖管理健康度
    - 测试策略完整性

  团队协作:
    - 代码审查流程
    - 提交规范性
    - 分支管理策略
    - 问题跟踪效率

评分体系:
  - A级 (90-100分): 优秀项目
  - B级 (80-89分): 良好项目
  - C级 (70-79分): 一般项目
  - D级 (60-69分): 需改进项目
  - F级 (<60分): 问题项目
```

## 🔄 AI Workflow Process - AI工作流程

### Phase 1: 项目扫描阶段
```yaml
Step 1 - 文件系统分析:
  - 扫描项目目录结构
  - 识别关键配置文件
  - 分析文件类型分布
  - 检测隐藏文件和配置

Step 2 - 技术栈识别:
  - 分析package.json/requirements.txt等
  - 识别框架和库依赖
  - 检测开发工具配置
  - 分析构建和部署脚本

Step 3 - 代码结构分析:
  - 分析代码组织模式
  - 识别架构设计模式
  - 检测模块化程度
  - 评估代码质量指标
```

### Phase 2: 深度理解阶段
```yaml
Step 4 - 业务逻辑分析:
  - 识别核心业务功能
  - 分析数据流和状态管理
  - 检测API设计模式
  - 理解用户交互流程

Step 5 - 团队协作分析:
  - 分析Git提交历史
  - 识别团队协作模式
  - 检测代码审查流程
  - 评估项目管理成熟度

Step 6 - 环境和工具分析:
  - 分析开发环境配置
  - 检测CI/CD流水线
  - 识别监控和日志配置
  - 评估部署策略
```

### Phase 3: 智能推荐阶段
```yaml
Step 7 - 配置推荐生成:
  - 生成缺失配置建议
  - 推荐最佳实践配置
  - 提供性能优化建议
  - 建议安全加固措施

Step 8 - 工作流优化:
  - 推荐适合的开发工作流
  - 建议规则配置优化
  - 提供工具集成建议
  - 生成项目改进计划
```

## 🧠 Super Brain Integration - 超级大脑集成

### 智能推荐引擎
```yaml
项目类型推荐:
  - 基于项目特征推荐最适合的规则配置
  - 根据团队规模推荐协作工具
  - 基于项目复杂度推荐管理策略
  - 根据技术栈推荐最佳实践

学习和优化:
  - 学习项目特定的配置模式
  - 积累成功项目的配置经验
  - 优化推荐算法准确性
  - 建立项目配置知识库

项目管理集成:
  - 自动识别项目当前阶段
  - 推荐阶段特定的配置
  - 集成到五阶段管理流程
  - 提供项目发展路径建议
```

### 与其他规则协同
```yaml
commit工作流协同（支持 /commit-fast 别名）:
  - 为提交工作流提供项目上下文
  - 优化提交信息生成
  - 配置项目特定的提交规范
  - 集成到统一提交工作流（含快速模式）

code-quality-check协同:
  - 为质量检查提供项目配置
  - 推荐项目特定的质量标准
  - 配置语言特定的检查规则
  - 优化质量检查性能

systematic-debugging协同:
  - 为调试提供项目环境信息
  - 推荐项目特定的调试工具
  - 配置调试环境和参数
  - 优化调试流程效率
```

## 📋 Context Analysis Categories - 上下文分析分类

### 🎯 项目基础信息
```yaml
基本属性:
  - 项目名称和描述
  - 版本信息和历史
  - 许可证和开源状态
  - 主要贡献者信息

技术信息:
  - 主要编程语言
  - 框架和库依赖
  - 开发工具链
  - 构建和部署配置

结构信息:
  - 目录组织模式
  - 模块化程度
  - 代码行数统计
  - 文件类型分布
```

### 🔍 深度分析信息
```yaml
架构模式:
  - MVC/MVP/MVVM识别
  - 微服务/单体架构
  - 前后端分离程度
  - 数据库设计模式

开发流程:
  - Git工作流模式
  - 分支管理策略
  - 代码审查流程
  - 发布管理流程

质量保证:
  - 测试策略和覆盖率
  - 代码质量工具配置
  - 静态分析工具使用
  - 安全扫描配置

团队协作:
  - 团队规模和角色
  - 协作工具使用
  - 文档维护状况
  - 知识分享机制
```

## 🎯 Intelligent Recommendations - 智能推荐

### 配置优化建议
```yaml
开发环境优化:
  - IDE配置优化建议
  - 插件和扩展推荐
  - 调试配置优化
  - 开发工具升级建议

构建优化:
  - 构建性能优化
  - 依赖管理优化
  - 打包配置改进
  - 缓存策略优化

部署优化:
  - 部署流程简化
  - 环境配置标准化
  - 监控和日志配置
  - 安全配置加强
```

### 工作流推荐
```yaml
开发工作流:
  - 基于项目类型推荐最适合的开发流程
  - 根据团队规模推荐协作模式
  - 基于项目复杂度推荐管理策略

质量保证流程:
  - 推荐适合的测试策略
  - 建议代码审查流程
  - 配置质量门禁标准
  - 设置持续集成流程

发布管理:
  - 推荐版本管理策略
  - 建议发布流程优化
  - 配置自动化部署
  - 设置监控和回滚
```

## 📊 Context Loading Templates - 上下文加载模板

### 🎨 前端项目模板
```yaml
React项目上下文:
  技术栈识别:
    - React版本和特性使用
    - 状态管理方案 (Redux/Zustand/Context)
    - 路由方案 (React Router/Next.js)
    - UI库和组件系统
    - 构建工具 (Webpack/Vite/Create React App)

  配置推荐:
    - ESLint/Prettier配置优化
    - TypeScript配置建议
    - 测试框架配置 (Jest/Testing Library)
    - 性能优化配置
    - 部署配置建议

  工作流推荐:
    - 组件开发工作流
    - 状态管理最佳实践
    - 性能优化策略
    - 测试策略建议
```

### 🔧 后端项目模板
```yaml
Node.js项目上下文:
  技术栈识别:
    - Node.js版本和特性
    - Web框架 (Express/Koa/Fastify)
    - 数据库方案 (MongoDB/PostgreSQL/MySQL)
    - ORM/ODM (Mongoose/Prisma/TypeORM)
    - 认证和授权方案

  配置推荐:
    - 环境变量管理
    - 数据库连接配置
    - 日志和监控配置
    - 安全配置加强
    - 性能优化设置

  工作流推荐:
    - API开发工作流
    - 数据库迁移策略
    - 测试策略 (单元/集成/E2E)
    - 部署和运维策略
```

### 🌐 全栈项目模板
```yaml
全栈项目上下文:
  架构识别:
    - 前后端分离程度
    - API设计模式 (REST/GraphQL)
    - 数据流架构
    - 微服务vs单体架构

  配置推荐:
    - 跨域配置优化
    - API版本管理
    - 数据同步策略
    - 缓存策略配置

  工作流推荐:
    - 全栈开发工作流
    - 前后端协作模式
    - 数据一致性保证
    - 端到端测试策略
```

## 🔗 Integration Points - 集成点

### 与Phase 2规则深度集成
```yaml
commit工作流集成（支持 /commit-fast 别名）:
  - 为提交工作流提供项目上下文信息
  - 基于项目类型优化提交信息生成
  - 配置项目特定的提交规范和模板
  - 集成到智能提交决策过程

code-quality-check集成:
  - 为质量检查提供项目配置上下文
  - 推荐项目特定的质量标准和规则
  - 配置语言和框架特定的检查工具
  - 优化质量检查的准确性和效率

root-cause-analysis集成:
  - 为根因分析提供项目背景信息
  - 基于项目历史提供问题模式分析
  - 推荐项目特定的解决方案
  - 集成到问题分析决策过程

systematic-debugging集成:
  - 为调试提供项目环境和配置信息
  - 推荐项目特定的调试工具和策略
  - 配置调试环境和参数
  - 优化调试流程的针对性

changelog-management集成:
  - 为变更日志提供项目上下文
  - 基于项目类型优化日志格式
  - 推荐版本管理策略
  - 集成到发布管理流程
```

### 与智能系统集成
```yaml
super-brain-system集成:
  - 将项目上下文信息输入超级大脑
  - 基于项目特征提供智能推荐
  - 学习项目特定的配置模式
  - 优化项目管理策略

intelligent-project-management集成:
  - 自动识别项目当前阶段
  - 推荐阶段特定的配置和工具
  - 集成到五阶段管理流程
  - 提供项目发展路径建议

mcp-intelligent-strategy集成:
  - 基于项目需求推荐MCP工具
  - 配置项目特定的工具编排
  - 优化工具选择和使用策略
  - 集成到MCP工具管理流程
```

## ⚡ Performance Optimization - 性能优化

### 智能缓存机制
```yaml
缓存策略:
  - 项目分析结果缓存
  - 配置推荐结果缓存
  - 技术栈识别缓存
  - 文件系统扫描缓存

优化技术:
  - 增量分析算法
  - 并行文件处理
  - 智能跳过未变更部分
  - 资源使用优化
```

### 执行效率目标
```yaml
性能指标:
  - 小型项目分析: <5秒
  - 中型项目分析: <15秒
  - 大型项目分析: <45秒
  - 配置推荐生成: <3秒

优化措施:
  - 异步并行处理
  - 智能文件过滤
  - 缓存命中优化
  - 内存使用控制
```

## 🚨 Error Handling & Safety - 错误处理和安全保障

### 统一错误处理机制
```yaml
错误分类:
  Level 1 - 致命错误:
    - 项目目录不存在或无权限
    - 关键配置文件损坏
    - 文件系统严重错误
    - 内存不足无法分析

  Level 2 - 严重错误:
    - 部分配置文件解析失败
    - 技术栈识别错误
    - AI分析引擎超时
    - 网络连接问题

  Level 3 - 一般错误:
    - 单个文件分析失败
    - 配置推荐生成错误
    - 缓存数据不一致
    - 工具版本不兼容

  Level 4 - 警告信息:
    - 配置文件格式不规范
    - 依赖版本过时
    - 最佳实践偏离
    - 性能优化建议
```

### 安全保障机制
```yaml
数据安全:
  - 敏感配置信息保护
  - 项目数据加密存储
  - 访问权限验证
  - 隐私信息过滤

操作安全:
  - 只读模式分析 (不修改项目文件)
  - 安全的配置推荐
  - 权限验证检查
  - 操作审计日志

与其他规则协调:
  - 与所有规则共享错误处理机制
  - 统一的安全保障措施
  - 协调的日志记录系统
  - 集成的恢复策略
```

## 📋 Usage Examples - 使用示例

### 基础项目上下文加载
```bash
# AI智能项目上下文加载
/load-context

# 输出示例:
# 🧠 项目上下文分析完成
# 
# 📊 项目信息:
# - 项目类型: React + Node.js 全栈项目
# - 技术栈: React 18 + TypeScript + Express + MongoDB
# - 项目规模: 中型项目 (156个文件, 15.2K行代码)
# - 健康度评分: B级 (82分)
# 
# 🔧 配置建议:
# - 建议添加 ESLint配置优化
# - 推荐集成 Prettier代码格式化
# - 建议完善 Jest测试配置
# - 推荐添加 Docker容器化配置
# 
# 🎯 工作流推荐:
# - 推荐使用 commit 智能提交工作流（支持 /commit-fast 别名）
# - 建议启用 code-quality-check 质量检查
# - 推荐配置 changelog-management 变更管理
```

### 深度分析模式
```bash
# 深度项目分析
/load-context --deep

# 输出示例:
# 🔍 深度项目分析完成
# 
# 📊 详细技术栈:
# Frontend: React 18.2.0 + TypeScript 5.0 + Vite 4.3
# Backend: Node.js 18.16 + Express 4.18 + MongoDB 6.0
# DevTools: ESLint + Prettier + Jest + Docker
# 
# 🏗️ 架构分析:
# - 架构模式: 前后端分离 + RESTful API
# - 状态管理: Redux Toolkit + RTK Query
# - 数据库设计: MongoDB文档型 + Mongoose ODM
# - 部署策略: Docker容器化 + Nginx反向代理
# 
# 📈 健康度详情:
# - 代码质量: 85分 (良好)
# - 测试覆盖: 72分 (一般)
# - 文档完整: 78分 (良好)
# - 安全配置: 90分 (优秀)
```

### 技术栈专项分析
```bash
# 技术栈专项分析
/load-context --tech-stack

# 输出示例:
# 🔧 技术栈专项分析
# 
# 📦 依赖分析:
# - 生产依赖: 23个 (最新版本: 87%)
# - 开发依赖: 31个 (最新版本: 92%)
# - 安全漏洞: 0个 (优秀)
# - 过时依赖: 3个 (需要更新)
# 
# 🛠️ 工具链分析:
# - 构建工具: Vite (推荐保持)
# - 代码检查: ESLint (建议升级规则)
# - 测试框架: Jest (建议添加E2E测试)
# - 部署工具: Docker (建议优化镜像)
```

---

**🎯 规则优先级**: 680 (最高优先级，为其他规则提供上下文)  
**🔄 更新频率**: 基于项目变更和配置更新持续优化  
**📊 成功指标**: 项目识别准确率>95%, 配置推荐采用率>80%, 分析时间<45秒  
**🧠 AI模型**: 集成项目分析和配置推荐引擎