---
type: "project_rule"
description: "高级工作流编排规则 - 企业级复杂工作流编排和性能优化 (配合intelligent-project-management.mdc使用)"
globs: ["**/*"]
priority: 880
---

# 🤖 高级工作流编排规则

## 🎯 核心理念

> **注意**: 本规则专注于企业级复杂工作流编排，基础项目管理请使用 `intelligent-project-management.mdc`

基于2025年AI代理发展趋势，实现企业级复杂工作流的自主编排和性能优化。

### 🧠 智能代理核心能力
```yaml
自主能力矩阵:
  推理能力:
    - 上下文理解和分析
    - 问题分解和抽象
    - 解决方案生成和评估
    - 决策制定和风险评估
  
  规划能力:
    - 任务分解和优先级排序
    - 资源分配和时间规划
    - 依赖关系分析和管理
    - 里程碑设定和进度跟踪
  
  执行能力:
    - 工具链自动编排
    - 并行任务协调
    - 异常处理和恢复
    - 质量控制和验证
  
  学习能力:
    - 经验积累和模式识别
    - 策略优化和调整
    - 反馈分析和改进
    - 知识图谱构建
```

## 🚀 高级工作流架构

> **基础项目启动**: 请使用 `intelligent-project-management.mdc` 中的 "启动超级大脑系统" 命令

### 📋 企业级工作流增强
```yaml
适用场景:
  - 大型团队协作 (10+ 人员)
  - 复杂微服务架构
  - 多项目并行管理
  - 企业级CI/CD流程
  - 跨部门协作项目
```

### 🎯 智能任务分解引擎
```yaml
任务分解策略:
  自动分析维度:
    - 技术复杂度评估
    - 业务价值分析
    - 风险等级评定
    - 资源需求估算
    - 时间周期预测
  
  智能分解算法:
    - 基于历史项目数据的模式识别
    - 技术栈特性分析
    - 团队能力匹配
    - 依赖关系优化
    - 并行度最大化
  
  动态调整机制:
    - 实时进度监控
    - 阻塞点自动识别
    - 资源重新分配
    - 优先级动态调整
```

### 🔄 智能执行编排
```yaml
执行编排策略:
  并行执行优化:
    - 无依赖任务并行处理
    - 资源冲突检测和避免
    - 负载均衡和调度
    - 性能瓶颈识别
  
  工具链智能选择:
    - 任务特性分析
    - 工具能力匹配
    - 性能效率评估
    - 故障恢复能力
  
  质量控制集成:
    - 实时代码质量检查
    - 自动化测试触发
    - 安全扫描集成
    - 性能基准验证
```

## 🎨 智能开发模式

### 🏗️ 架构设计智能助手
```yaml
架构智能分析:
  需求理解:
    - 业务需求自动解析
    - 非功能性需求识别
    - 约束条件分析
    - 扩展性需求预测
  
  架构推荐:
    - 基于需求的架构模式推荐
    - 技术栈最优组合建议
    - 性能优化策略
    - 安全架构设计
  
  设计验证:
    - 架构一致性检查
    - 性能影响评估
    - 可维护性分析
    - 成本效益评估
```

### 💻 智能编码助手
```yaml
编码智能支持:
  代码生成:
    - 基于规范的代码模板生成
    - 业务逻辑自动实现
    - 测试用例自动生成
    - 文档自动同步
  
  代码优化:
    - 性能瓶颈自动识别
    - 代码重构建议
    - 最佳实践应用
    - 安全漏洞检测
  
  协作支持:
    - 代码冲突预测和解决
    - 代码审查自动化
    - 知识共享和传递
    - 技能差距识别
```

### 🧪 智能测试编排
```yaml
测试智能化:
  测试策略:
    - 风险驱动的测试优先级
    - 测试覆盖率智能优化
    - 测试数据自动生成
    - 测试环境自动配置
  
  执行优化:
    - 并行测试执行
    - 失败测试快速定位
    - 回归测试智能选择
    - 性能测试自动化
  
  结果分析:
    - 测试结果智能分析
    - 质量趋势预测
    - 缺陷模式识别
    - 改进建议生成
```

## 📊 智能监控和优化

### 📈 实时性能监控
```yaml
监控维度:
  开发效率:
    - 代码提交频率和质量
    - 功能完成速度
    - 缺陷修复时间
    - 代码审查效率
  
  系统性能:
    - 构建时间优化
    - 测试执行时间
    - 部署成功率
    - 系统稳定性
  
  团队协作:
    - 沟通效率分析
    - 知识共享程度
    - 技能发展轨迹
    - 工作负载平衡
```

### 🔮 预测性分析
```yaml
预测能力:
  项目风险预测:
    - 延期风险评估
    - 质量风险预警
    - 资源不足预测
    - 技术债务累积
  
  优化机会识别:
    - 流程改进点
    - 工具升级建议
    - 技能培训需求
    - 架构演进方向
  
  决策支持:
    - 技术选型建议
    - 资源分配优化
    - 发布时机选择
    - 风险缓解策略
```

## 🎯 智能反馈和学习

### 🔄 持续学习机制
```yaml
学习系统:
  经验积累:
    - 项目成功模式识别
    - 失败案例分析
    - 最佳实践提取
    - 知识图谱更新
  
  策略优化:
    - 工作流效率分析
    - 决策准确性评估
    - 预测模型调优
    - 推荐算法改进
  
  知识共享:
    - 团队经验传承
    - 跨项目知识复用
    - 行业最佳实践集成
    - 创新模式探索
```

### 📋 智能反馈触发
```yaml
反馈触发条件:
  关键决策点:
    - 架构设计确认
    - 技术栈选择
    - 重要功能实现
    - 性能优化策略
  
  风险预警:
    - 进度偏差>20%
    - 质量指标下降
    - 团队负载过高
    - 技术债务累积
  
  优化机会:
    - 效率提升>30%的机会
    - 成本节约机会
    - 质量改进机会
    - 创新应用机会
```

## 🛠️ 工具集成和编排

### 🔧 MCP工具智能编排
```yaml
工具编排策略:
  动态工具选择:
    - 任务特性分析
    - 工具能力匹配
    - 性能效率评估
    - 可靠性考量
  
  工具链优化:
    - 工具间数据流优化
    - 并行执行协调
    - 错误处理和恢复
    - 性能监控和调优
  
  智能故障处理:
    - 工具故障自动检测
    - 备用方案自动切换
    - 故障根因分析
    - 预防性维护建议
```

### 📊 集成开发环境优化
```yaml
IDE智能增强:
  代码智能:
    - 上下文感知的代码补全
    - 智能重构建议
    - 实时代码质量反馈
    - 性能影响预测
  
  调试增强:
    - 智能断点建议
    - 异常根因分析
    - 性能瓶颈定位
    - 调试路径优化
  
  协作增强:
    - 实时协作冲突预测
    - 代码审查智能助手
    - 知识共享推荐
    - 技能发展建议
```

## 🎯 使用示例

### 🚀 快速启动
```bash
# 启动智能全栈开发工作流
/启动智能工作流 全栈Web应用 中等复杂度 5人团队

# 系统自动分析并生成:
# 1. 项目架构建议
# 2. 技术栈推荐
# 3. 开发计划
# 4. 任务分配
# 5. 质量控制策略
```

### 🎨 自定义配置
```bash
# 设置智能化级别
/设置智能化级别 高级    # 最大化自动化
/设置智能化级别 标准    # 平衡自动化和人工控制
/设置智能化级别 保守    # 最小化自动化，保持人工控制

# 设置反馈频率
/设置智能反馈 实时     # 实时反馈和建议
/设置智能反馈 关键点   # 仅在关键决策点反馈
/设置智能反馈 总结     # 阶段性总结反馈
```

---

**注意**: 此规则文件实现了基于2025年AI代理发展趋势的智能工作流编排，提供自主推理、规划和执行能力，显著提升开发效率和质量。