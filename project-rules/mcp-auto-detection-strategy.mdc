---
type: "project_rule"
description: "MCP自动检测和智能推荐策略 - 基于steipete/agent-rules最佳实践的智能MCP编排"
globs: ["**/*"]
priority: 955
alwaysApply: true
---

# 🔍 MCP自动检测和智能推荐策略

> **智能编排**: 自动检测用户MCP环境，智能推荐和配置最适合的MCP工具组合

## 🎯 核心策略

### 1. MCP环境自动检测
```yaml
检测机制:
  环境扫描:
    - 检查 ~/.claude/mcp_settings.json 配置
    - 扫描已安装的MCP服务器
    - 分析项目类型和技术栈
    - 评估开发需求和工作流
  
  智能分析:
    - 项目复杂度评估
    - 开发阶段识别
    - 团队协作需求分析
    - 性能和效率要求评估
```

### 2. 智能MCP推荐引擎
```yaml
推荐算法:
  基础工具集 (必需):
    - server-filesystem: 文件系统操作
    - codebase-retrieval: 代码语义搜索
    - server-memory: 智能记忆系统
    - mcp-feedback-enhanced: 增强反馈机制
  
  项目类型适配:
    前端项目:
      - server-github: Git操作和PR管理
      - mermaid生成: 架构图和流程图
      - 浏览器自动化: UI测试和截图
    
    后端项目:
      - server-database: 数据库操作
      - server-docker: 容器化部署
      - API测试工具: 接口测试和文档
    
    全栈项目:
      - 完整工具链组合
      - 端到端测试工具
      - 部署和监控工具
  
  高级功能 (可选):
    - Peekaboo: 视觉AI分析 (macOS 14.0+)
    - 浏览器自动化: Safari/Chrome控制
    - 截图自动化: AppleScript模式
```

### 3. MCP状态智能监控
```yaml
监控维度:
  可用性检查:
    - MCP服务器连接状态
    - 工具响应时间和性能
    - 错误率和稳定性指标
    - 资源使用情况监控
  
  使用效率分析:
    - 工具调用频率统计
    - 成功率和失败原因分析
    - 用户满意度和反馈收集
    - 性能瓶颈识别和优化
```

## 🛠️ 自动化配置策略

### MCP缺失时的智能推荐
```yaml
推荐流程:
  1. 环境检测:
     "检测到您尚未配置MCP工具。MCP (Model Context Protocol) 可以显著提升AI助手的能力。"
  
  2. 需求分析:
     "基于您的项目类型 [项目类型]，我推荐以下MCP工具组合："
  
  3. 个性化推荐:
     必需工具:
       - "🗂️ server-filesystem: 高效文件操作和管理"
       - "🔍 codebase-retrieval: 智能代码搜索和分析"
       - "🧠 server-memory: 项目记忆和上下文保持"
     
     推荐工具:
       - "📊 server-github: Git操作和协作增强"
       - "💬 mcp-feedback-enhanced: 智能反馈和交互"
  
  4. 安装指导:
     "我可以为您生成自动安装脚本，或者提供详细的手动配置指南。"
```

### 智能配置生成
```yaml
配置策略:
  自动生成:
    - 基于项目需求的mcp_settings.json
    - 个性化的工具优先级设置
    - 性能优化的参数配置
    - 安全和权限的合理设置
  
  渐进式配置:
    阶段1: 基础工具 (文件系统、代码搜索)
    阶段2: 协作工具 (GitHub、反馈系统)
    阶段3: 高级工具 (视觉AI、自动化)
    阶段4: 定制工具 (项目特定需求)
```

## 🔄 动态优化机制

### 使用模式学习
```yaml
学习维度:
  用户行为:
    - 常用工具和功能偏好
    - 工作流模式和时间分布
    - 问题类型和解决路径
    - 效率瓶颈和改进机会
  
  项目特征:
    - 技术栈和架构模式
    - 团队规模和协作方式
    - 开发阶段和里程碑
    - 质量要求和性能目标
```

### 智能推荐优化
```yaml
优化策略:
  实时调整:
    - 基于使用频率调整工具优先级
    - 根据成功率优化推荐算法
    - 动态调整配置参数
    - 预测性工具推荐
  
  个性化定制:
    - 用户偏好学习和适配
    - 项目特定的工具组合
    - 团队协作模式优化
    - 效率提升路径规划
```

## 🎯 集成超级大脑系统

### 统一管理入口
```yaml
系统集成:
  激活命令:
    - "检查MCP状态" - 全面环境检测
    - "推荐MCP工具" - 智能推荐和配置
    - "优化MCP配置" - 性能调优和升级
    - "MCP使用报告" - 效率分析和改进建议
  
  智能决策:
    - 基于项目阶段的工具推荐
    - 上下文感知的功能建议
    - 预测性问题解决方案
    - 持续学习和优化循环
```

## 📊 效果评估指标

### 关键指标
```yaml
效率指标:
  - MCP工具使用率: >85%
  - 任务完成时间: 减少40-60%
  - 错误率降低: >70%
  - 用户满意度: >4.5/5.0

质量指标:
  - 推荐准确率: >90%
  - 配置成功率: >95%
  - 工具稳定性: >99%
  - 响应时间: <2秒
```

## 🔧 实现示例

### MCP检测和推荐流程
```javascript
// 伪代码示例
async function detectAndRecommendMCP() {
  // 1. 环境检测
  const mcpStatus = await detectMCPEnvironment();
  
  // 2. 项目分析
  const projectType = await analyzeProjectType();
  
  // 3. 智能推荐
  const recommendations = await generateMCPRecommendations(projectType, mcpStatus);
  
  // 4. 用户交互
  await presentRecommendations(recommendations);
  
  // 5. 自动配置
  if (userAccepts) {
    await autoConfigureMCP(recommendations);
  }
}
```

---

**🎯 使用提示**: 该策略会自动激活，无需手动触发。AI助手会在适当时机主动检测MCP环境并提供智能推荐。