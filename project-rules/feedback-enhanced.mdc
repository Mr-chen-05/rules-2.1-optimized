---
description: "Enhanced feedback mechanism with 1-hour timeout - 增强反馈机制，1小时超时"
globs: ["**/*"]
alwaysApply: true
enforcement: mandatory
priority: 1001
---

# 🤖 Enhanced Feedback Mechanism - 增强反馈机制

专为复杂开发任务设计的智能反馈系统，支持1小时超时的深度交互。

## 🚨 强制执行机制 [CRITICAL]

**[MANDATORY_EXECUTION]** 本规则文件包含强制执行指令，所有标记为 `[MUST_EXECUTE]` 的规则必须无条件执行。

### 执行级别
- **[PRIORITY: 1000]** - 最高优先级（错误处理）
- **[PRIORITY: 999]** - 详细模式触发
- **[PRIORITY: 950]** - 重大决策确认
- **[PRIORITY: 900]** - 方案完成审查
- **[PRIORITY: 850]** - 执行完成验收

### 违规处理
- **[VIOLATION_ALERT]** - 立即报告违规行为
- **[EXECUTION_CHECKPOINT]** - 强制检查点验证
- **[COMPLIANCE_CHECK]** - 合规性自动检查
- **[AUTO_TRIGGER]** - 自动触发机制

## 🚀 Commands - 命令

- `/feedback` - 手动触发反馈
- `/feedback-config` - 配置反馈设置
- `/feedback-history` - 查看反馈历史
- `/feedback-summary` - 生成工作摘要

## ✨ Features - 功能特性

### 🕐 Extended Timeout - 扩展超时
- **1小时超时** - 充足时间进行复杂架构讨论
- **自动保存** - 防止长时间讨论中的数据丢失
- **断点续传** - 支持中断后继续讨论

### 📝 Rich Text Support - 富文本支持
- **代码片段** - 语法高亮的代码展示
- **架构图** - Mermaid图表支持
- **配置文件** - 格式化的配置展示
- **截图支持** - 图片和截图集成

### 🔄 Real-time Interaction - 实时交互
- **双向沟通** - AI与用户的实时对话
- **进度跟踪** - 任务进度实时更新
- **决策记录** - 重要决策自动记录

## 📋 Trigger Conditions - 触发条件

### 🔍 详细模式特殊规则 [MUST_EXECUTE] [AUTO_TRIGGER] [PRIORITY: 999]
```
[MANDATORY] 触发条件: 用户设置了详细模式 (/设置详细模式)
[MANDATORY] 行为变化: 每次会话开始时自动调用反馈增强界面
[MANDATORY] 目的: 确保用户对每个开发步骤都有充分的参与和确认
[MANDATORY] 实现方式: 
- [AUTO_TRIGGER] 会话开始时自动触发 interactive_feedback
- [COMPLIANCE_CHECK] 提供当前任务概览和需要确认的要点
- [COMPLIANCE_CHECK] 收集用户的详细需求和偏好设置
- [COMPLIANCE_CHECK] 建立完整的沟通和反馈机制

[VIOLATION_ALERT] 如果未执行此规则，系统必须立即报告违规并强制执行
[EXECUTION_CHECKPOINT] 每次会话开始时检查详细模式状态，如果启用则强制触发反馈

### 自动触发场景

#### 🔍 需求不明确 [MUST_EXECUTE] [AUTO_TRIGGER]
```
[MANDATORY] 触发条件: 用户描述模糊或存在歧义
[MANDATORY] 示例: "帮我做个网站" (缺少具体需求)
[MANDATORY] 反馈内容: 
- [COMPLIANCE_CHECK] 项目类型和规模
- [COMPLIANCE_CHECK] 技术栈偏好
- [COMPLIANCE_CHECK] 功能需求清单
- [COMPLIANCE_CHECK] 时间和预算约束

[EXECUTION_CHECKPOINT] 检测到模糊需求时必须立即触发反馈收集
```

#### 🎯 重大决策 [MUST_EXECUTE] [AUTO_TRIGGER] [PRIORITY: 950]
```
[MANDATORY] 触发条件: 架构选择、技术栈选型等关键决策
[MANDATORY] 示例: 微服务 vs 单体架构选择
[MANDATORY] 反馈内容:
- [COMPLIANCE_CHECK] 项目规模和团队大小
- [COMPLIANCE_CHECK] 性能和扩展性要求
- [COMPLIANCE_CHECK] 运维能力和经验
- [COMPLIANCE_CHECK] 长期维护考虑

[EXECUTION_CHECKPOINT] 重大技术决策前必须获得用户确认
```

#### ✅ 方案完成 [MUST_EXECUTE] [AUTO_TRIGGER] [PRIORITY: 900]
```
[MANDATORY] 触发条件: 技术方案设计完成，需用户确认
[MANDATORY] 示例: 数据库设计方案完成
[MANDATORY] 反馈内容:
- [COMPLIANCE_CHECK] 表结构设计审查
- [COMPLIANCE_CHECK] 索引策略确认
- [COMPLIANCE_CHECK] 性能预期评估
- [COMPLIANCE_CHECK] 扩展性考虑

[EXECUTION_CHECKPOINT] 方案完成后必须获得用户审查确认
```

#### 🎉 执行完成 [MUST_EXECUTE] [AUTO_TRIGGER] [PRIORITY: 850]
```
[MANDATORY] 触发条件: 代码实现完成，需用户验收
[MANDATORY] 示例: API接口开发完成
[MANDATORY] 反馈内容:
- [COMPLIANCE_CHECK] 功能测试结果
- [COMPLIANCE_CHECK] 性能指标达成
- [COMPLIANCE_CHECK] 安全检查通过
- [COMPLIANCE_CHECK] 文档完整性

[EXECUTION_CHECKPOINT] 代码完成后必须进行用户验收
```

#### 🚨 错误发生 [MUST_EXECUTE] [AUTO_TRIGGER] [PRIORITY: 1000]
```
[MANDATORY] 触发条件: 遇到无法自动解决的问题
[MANDATORY] 示例: 依赖冲突或环境问题
[MANDATORY] 反馈内容:
- [COMPLIANCE_CHECK] 错误详细信息
- [COMPLIANCE_CHECK] 可能的解决方案
- [COMPLIANCE_CHECK] 需要的用户操作
- [COMPLIANCE_CHECK] 替代方案建议

[EXECUTION_CHECKPOINT] 遇到错误时必须立即通知用户并寻求指导
```

## 🎯 Specialized Feedback Scenarios - 专业反馈场景

### 🏗️ 架构设计确认
```markdown
## 系统架构方案确认

### 当前方案
- **架构模式**: 微服务架构
- **技术栈**: Spring Boot + Docker + Kubernetes
- **数据库**: PostgreSQL + Redis
- **消息队列**: RabbitMQ

### 需要确认的要点
1. **服务拆分粒度** - 是否合理？
2. **数据一致性** - 如何处理分布式事务？
3. **服务通信** - REST vs gRPC选择？
4. **监控策略** - 日志和指标收集方案？

### 请提供反馈
- 团队规模和技术水平
- 预期并发量和数据量
- 运维能力和基础设施
- 项目时间线和里程碑
```

### ⚡ API设计确认
```markdown
## API接口设计完成

### 接口概览
- **用户管理**: 15个接口
- **认证授权**: 8个接口  
- **数据操作**: 23个接口
- **文件处理**: 6个接口

### 设计特点
- RESTful风格，统一响应格式
- JWT认证 + RBAC权限控制
- 请求限流和参数验证
- 完整的错误处理机制

### 需要确认
1. **接口粒度** - 是否符合业务需求？
2. **权限设计** - 角色和权限划分是否合理？
3. **性能考虑** - 是否需要缓存和优化？
4. **版本管理** - API版本策略是否合适？
```

### 🗄️ 数据库设计确认
```markdown
## 数据库表结构设计

### 核心表设计
- **users**: 用户基础信息 (12字段)
- **roles**: 角色权限管理 (8字段)
- **products**: 产品信息 (15字段)
- **orders**: 订单数据 (18字段)

### 关系设计
- 用户-角色: 多对多关系
- 产品-分类: 一对多关系
- 订单-产品: 多对多关系

### 索引策略
- 主键索引: 所有表
- 唯一索引: email, phone
- 复合索引: (user_id, created_at)
- 全文索引: product_name, description

### 需要确认
1. **数据类型** - 字段类型选择是否合适？
2. **索引设计** - 查询性能是否满足要求？
3. **扩展性** - 是否考虑了未来的数据增长？
4. **备份策略** - 数据备份和恢复方案？
```

## 🔧 Configuration - 配置

### Environment Variables - 环境变量
```bash
# 反馈超时设置 (秒)
FEEDBACK_TIMEOUT=3600

# 日志级别
FEEDBACK_LOG_LEVEL=info

# 存储路径
FEEDBACK_STORAGE_PATH=./feedback-logs

# 自动保存间隔 (秒)
FEEDBACK_AUTOSAVE_INTERVAL=300

# 最大历史记录数
FEEDBACK_MAX_HISTORY=100

# [NEW] 强制执行监控设置
ENFORCEMENT_ENABLED=true
COMPLIANCE_CHECK_INTERVAL=30
VIOLATION_ALERT_ENABLED=true
AUTO_TRIGGER_ENABLED=true
EXECUTION_CHECKPOINT_ENABLED=true

# [NEW] 详细模式自动触发
DETAILED_MODE_AUTO_TRIGGER=true
DETAILED_MODE_PRIORITY=999
```

### Advanced Settings - 高级设置
```json
{
  "feedback": {
    "timeout": 3600,
    "autoSave": true,
    "saveInterval": 300,
    "maxHistory": 100,
    "enableRichText": true,
    "enableScreenshots": true,
    "enableMermaid": true,
    "logLevel": "info"
  },
  "enforcement": {
    "enabled": true,
    "priority": 999,
    "mandatoryExecution": true,
    "autoTrigger": true,
    "complianceCheck": true,
    "violationAlert": true,
    "executionCheckpoint": true,
    "detailedModeAutoTrigger": true,
    "checkInterval": 30
  }
}
```

## 📊 Feedback Analytics - 反馈分析

### Metrics Tracking - 指标跟踪
```javascript
// 反馈会话统计
{
  "sessionId": "fb-2025-01-31-001",
  "startTime": "2025-01-31T10:00:00Z",
  "endTime": "2025-01-31T10:45:00Z",
  "duration": 2700, // 45分钟
  "messageCount": 15,
  "decisionPoints": 3,
  "issuesResolved": 2,
  "userSatisfaction": 4.5
}
```

### Quality Metrics - 质量指标
- **响应时间** - AI响应的平均时间
- **解决率** - 问题解决的成功率
- **用户满意度** - 反馈质量评分
- **会话完成率** - 完整完成的会话比例

## 🛠️ Integration Examples - 集成示例

### Frontend Integration - 前端集成
```javascript
// Vue.js组件中使用反馈
export default {
  methods: {
    async requestFeedback(context) {
      const feedback = await this.$mcp.feedback({
        type: 'architecture-review',
        context: context,
        timeout: 3600000 // 1小时
      });
      
      return feedback;
    }
  }
}
```

### Backend Integration - 后端集成
```python
# Python中使用反馈机制
from mcp_feedback import FeedbackClient

async def design_review(design_doc):
    client = FeedbackClient(timeout=3600)
    
    feedback = await client.request_feedback(
        type="database-design",
        content=design_doc,
        questions=[
            "表结构设计是否合理？",
            "索引策略是否优化？",
            "扩展性如何保证？"
        ]
    )
    
    return feedback
```

## ✅ Best Practices - 最佳实践

### For AI Assistants - AI助手
- **[MANDATORY] 强制执行** - 必须执行所有标记为 `[MUST_EXECUTE]` 的规则
- **[MANDATORY] 详细模式检查** - 会话开始时检查详细模式状态并自动触发反馈
- **[MANDATORY] 及时触发** - 在关键决策点主动请求反馈
- **[MANDATORY] 清晰描述** - 详细说明当前状态和需要确认的内容
- **[COMPLIANCE_CHECK] 结构化输出** - 使用清晰的格式和标记
- **[COMPLIANCE_CHECK] 保存记录** - 重要决策和反馈要保存记录
- **[VIOLATION_ALERT] 违规报告** - 发现规则违规时立即报告并纠正

### For Users - 用户
- **详细反馈** - 提供具体、详细的反馈信息
- **及时响应** - 在超时前及时回复
- **明确决策** - 清楚表达决策和偏好
- **记录原因** - 说明决策的原因和考虑

### For Teams - 团队
- **统一标准** - 建立团队反馈标准和流程
- **知识共享** - 分享反馈经验和最佳实践
- **持续改进** - 定期回顾和优化反馈机制
- **工具集成** - 与现有工具和流程集成

## 📋 Troubleshooting - 故障排除

### Common Issues - 常见问题

#### [CRITICAL] 规则执行失败
```
问题: 详细模式下未自动触发反馈界面
原因: 强制执行机制未生效或被忽略
解决: 
1. 检查 ENFORCEMENT_ENABLED=true
2. 验证 DETAILED_MODE_AUTO_TRIGGER=true
3. 确认优先级设置 DETAILED_MODE_PRIORITY=999
4. 重启AI助手并重新加载规则
```

#### [CRITICAL] 违规检测
```
问题: 系统未报告规则违规
原因: 违规检测机制未启用
解决:
1. 启用 VIOLATION_ALERT_ENABLED=true
2. 设置 COMPLIANCE_CHECK_INTERVAL=30
3. 检查执行检查点 EXECUTION_CHECKPOINT_ENABLED=true
```

#### 超时问题
```
问题: 反馈会话超时
原因: 网络不稳定或服务器负载高
解决: 检查网络连接，重新发起反馈
```

#### 保存失败
```
问题: 反馈内容保存失败
原因: 存储空间不足或权限问题
解决: 检查磁盘空间和文件权限
```

#### 格式错误
```
问题: 富文本格式显示异常
原因: Markdown解析错误
解决: 检查Markdown语法，使用标准格式
```
