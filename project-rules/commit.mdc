---
type: "always_apply"
description: "Unified comprehensive commit workflow (standard + fast + AI) - 统一全面提交工作流（标准 + 快速 + AI）"
globs: ["**/*"]
priority: 680
alwaysApply: true
integrations: ["super-brain-system", "code-quality-check", "changelog-management", "mcp-intelligent-strategy", "intelligent-project-management"]
---

# 📝 Commit Unified Workflow - 统一提交工作流

一个全面、统一的提交工作流：既支持标准化提交，也支持快速提交与AI智能消息生成；集成质量门与变更日志，适配不同团队规范与项目阶段。

## 🚀 Commands - 智能命令（统一）

- `/commit` - 标准提交（包含预提交检查）
- `/commit --fast` - 快速提交模式（智能暂存 + AI消息生成）
- `/commit-fast` - 快速提交别名（与 `/commit --fast` 等效）
- `/commit --no-verify` - 跳过预提交检查（紧急场景）
- `/commit --analyze` - 深度分析模式（详细变更分析与建议）
- `/commit --template <type>` - 指定模板类型（如 feat/fix/docs/refactor 等）
- `/commit --smart-stage` - 智能暂存相关文件（自动排除临时/配置文件）

说明：保留所有既有命令习惯，同时提供统一的参数化入口，便于脚本与工具集成。

## 🧠 AI Intelligence Core - AI智能核心

### 智能激活条件
```yaml
自动激活场景:
  - 检测到多个文件变更且需要快速提交
  - 用户执行 `/commit --fast` 或 `/commit-fast`
  - 超级大脑系统推荐快速提交流程
  - 项目处于需要频繁提交的阶段

智能分析维度:
  - 变更文件类型和数量 (30%)
  - 代码变更复杂度 (25%)
  - 项目当前阶段 (20%)
  - 历史提交模式 (15%)
  - 时间紧迫性 (10%)
```

## ✨ AI-Powered Features - AI驱动功能

### 🤖 智能提交信息生成
```yaml
AI分析引擎:
  文件变更分析:
    - 自动识别变更类型（feat/fix/docs/refactor等）
    - 分析变更影响范围和重要性
    - 检测代码模式和最佳实践
    - 识别潜在的安全和性能影响

  智能消息生成:
    - 基于变更内容自动生成描述性标题
    - 智能选择最合适的emoji和类型
    - 自动添加作用域（scope）信息
    - 生成详细的变更说明（可选）

  上下文感知:
    - 考虑项目类型和技术栈
    - 分析历史提交模式
    - 集成项目管理阶段信息
    - 参考团队提交规范
```

### 🔧 MCP工具自动编排（可选）
```yaml
预提交自动化:
  - 智能选择相关的代码检查工具
  - 自动运行适当的测试套件
  - 执行代码格式化和清理
  - 生成或更新相关文档

质量保证:
  - 自动安全扫描（如适用）
  - 性能影响评估
  - 依赖关系检查
  - 版本兼容性验证

智能优化:
  - 根据项目类型选择工具
  - 基于变更范围调整检查级别
  - 并行执行提升效率
  - 智能缓存和增量检查
```

## ✨ Features - 功能特性

- 默认运行预提交检查（lint、build、生成文档）
- 如果没有暂存文件，自动暂存文件
- 使用约定式提交格式和描述性表情符号
- 建议为不同关注点拆分提交

补充：在快速模式下，会根据变更自动选择最合适的提交类型与模板，并支持自动生成详细说明。

## 📋 Commit Types - 提交类型（统一）

| 类型 | 表情符号 | 描述 | 示例 |
|------|----------|------|------|
| **feat** | ✨ | 新功能 | `✨ feat: 添加用户认证功能` |
| **fix** | 🐛 | Bug修复 | `🐛 fix: 修复登录页面验证错误` |
| **docs** | 📝 | 文档变更 | `📝 docs: 更新API文档` |
| **refactor** | ♻️ | 重构代码 | `♻️ refactor: 重构用户服务层` |
| **style** | 🎨 | 代码格式 | `🎨 style: 格式化代码，添加缺失分号` |
| **perf** | ⚡️ | 性能改进 | `⚡️ perf: 优化数据库查询性能` |
| **test** | ✅ | 测试相关 | `✅ test: 添加用户注册单元测试` |
| **chore** | 🧑‍💻 | 工具配置 | `🧑‍💻 chore: 更新构建配置` |
| **wip** | 🚧 | 进行中的工作 | `🚧 wip: 用户权限功能开发中` |
| **remove** | 🔥 | 删除代码 | `🔥 remove: 删除废弃的API接口` |
| **hotfix** | 🚑 | 紧急修复 | `🚑 hotfix: 修复生产环境登录问题` |
| **security** | 🔒 | 安全改进 | `🔒 security: 加强密码加密机制` |

### 扩展类型（AI自动识别）
```yaml
功能开发:
  - ✨ feat: 新功能添加
  - 🎉 init: 项目初始化
  - 🚀 deploy: 部署相关
  - 💫 enhancement: 功能增强

问题修复:
  - 🐛 fix: 常规Bug修复
  - 🚑 hotfix: 紧急修复
  - 🩹 patch: 小补丁
  - 🔧 config: 配置修复

代码质量:
  - ♻️ refactor: 代码重构
  - 🎨 style: 代码格式化
  - ⚡️ perf: 性能优化
  - 🧹 cleanup: 代码清理

文档和测试:
  - 📝 docs: 文档更新
  - ✅ test: 测试相关
  - 📚 tutorial: 教程更新
  - 💡 example: 示例代码

工具和配置:
  - 🧑‍💻 chore: 工具配置
  - 📦 deps: 依赖更新
  - 🔨 build: 构建相关
  - 🔧 tools: 工具更新
```

## 📋 Process - 提交流程

### 1. 检查暂存变更
```bash
git status
```

### 2. 如果没有暂存变更，审查并暂存适当的文件
```bash
git add <files>
# 或者暂存所有变更
git add .
```

### 3. 运行预提交检查（除非使用 --no-verify）
- 代码检查 (lint)
- 构建验证
- 测试运行
- 文档生成

### 4. 分析变更以确定提交类型
- 查看修改的文件和内容
- 确定主要变更类型
- 考虑是否需要拆分为多个提交

### 5. 生成描述性提交消息
- 使用格式：`emoji type(scope): description`
- 包含作用域（如适用）：`type(scope): description`
- 为复杂变更添加正文，解释原因
- 引用相关问题/PR

### 6. 执行提交（标准）
```bash
git commit -m "✨ feat(auth): 添加JWT认证中间件

- 实现JWT token生成和验证
- 添加认证中间件到路由保护
- 更新用户模型包含token字段

Closes #123"
```

### 7. 快速提交（可选）
当使用 `/commit --fast` 或 `/commit-fast` 时：
```yaml
流程简化:
  - 自动暂存相关变更（智能排除临时/配置文件）
  - 运行最小必要的预提交检查（可配置）
  - AI生成提交标题与说明（可交互确认或全自动）
  - 直接执行提交并记录元数据
```

## ✅ Best Practices - 最佳实践

### 提交原则
- **原子性** - 保持提交专注和原子化
- **命令式语气** - 使用"添加功能"而不是"已添加功能"
- **解释原因** - 说明为什么，而不仅仅是什么
- **引用问题** - 在相关时引用问题/PR
- **拆分变更** - 将不相关的变更拆分为单独的提交

### 超级大脑集成（建议）
```yaml
智能推荐:
  - 基于项目阶段推荐提交频率与时机
  - 推荐相关后续操作（测试/文档/变更日志）
学习优化:
  - 记录提交偏好与历史模式
  - 优化AI消息生成准确性
```

### 消息格式
```
<emoji> <type>(<scope>): <description>

<body>

<footer>
```

### 示例提交消息

**简单功能添加：**
```
✨ feat: 添加用户头像上传功能
```

**带作用域的修复：**
```
🐛 fix(api): 修复用户查询接口分页错误
```

**复杂变更带正文：**
```
♻️ refactor(database): 重构用户数据访问层

- 将原始SQL查询迁移到ORM
- 添加数据库连接池配置
- 优化查询性能和内存使用

性能提升约30%，代码可维护性显著改善

Closes #456
```

## 🔧 Pre-commit Checks - 预提交检查

### 自动运行的检查
1. **代码检查** - ESLint, Prettier, 等
2. **类型检查** - TypeScript, mypy, 等
3. **测试运行** - 单元测试和集成测试
4. **构建验证** - 确保代码可以成功构建
5. **文档生成** - 自动更新API文档

提示：在快速模式下，可以降级或跳过部分检查（与 `--no-verify` 区分，仍建议保留核心检查）。

### 跳过检查
```bash
# 紧急情况下跳过预提交检查
git commit --no-verify -m "🚑 hotfix: 紧急修复生产问题"
```

## 📋 Checklist - 检查清单

### 提交前
- [ ] 变更已审查和测试
- [ ] 提交消息清晰描述性
- [ ] 使用正确的提交类型和表情符号
- [ ] 包含相关的作用域
- [ ] 引用相关问题/PR

### 提交后
- [ ] 推送到远程仓库
- [ ] 检查CI/CD流水线状态
- [ ] 更新相关文档
- [ ] 通知团队成员（如需要）

## 🧠 Super Brain Integration - 超级大脑集成

与超级大脑系统协同：
- 感知阶段与上下文，优化提交策略与消息生成
- 自动记录与学习，提升未来建议与准确性
- 与智能项目管理、质量检查、变更日志联动

## 🎯 Integration - 集成

### Git Hooks
```bash
# 安装预提交钩子
npm install --save-dev husky lint-staged

# 配置 package.json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,ts,vue}": ["eslint --fix", "git add"],
    "*.{css,scss}": ["stylelint --fix", "git add"]
  }
}
```

### 与CI/CD集成
- 自动触发构建和测试
- 代码质量检查
- 自动部署到测试环境
- 生成变更日志
