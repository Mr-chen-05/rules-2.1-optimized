---
type: "intelligent_workflow_rule"
description: "AI-powered root cause analysis with Five Whys methodology - AI驱动的根因分析方法"
globs: ["**/*"]
priority: 630
alwaysApply: true
integrations: ["super-brain-system", "mcp-intelligent-strategy", "intelligent-project-management", "commit-fast", "changelog-management", "code-quality-check"]
---

# 🔍 Root Cause Analysis - 智能根因分析

AI驱动的根因分析系统，集成五个为什么方法论、智能问题分类和解决方案推荐引擎。

## 🧠 AI Intelligence Core - AI智能核心

### 智能激活条件
```yaml
自动激活场景:
  - 检测到重复性问题或Bug
  - 用户执行 "/root-cause" 命令
  - code-quality-check发现严重问题
  - 系统故障或异常发生
  - 超级大脑系统推荐根因分析

智能分析维度:
  - 问题复杂度和影响范围 (30%)
  - 历史问题模式匹配 (25%)
  - 系统关联性分析 (20%)
  - 解决方案可行性 (15%)
  - 预防措施有效性 (10%)
```

## 🚀 Commands - 智能命令

- `/root-cause` - AI智能根因分析（推荐）
- `/root-cause --issue <description>` - 分析指定问题
- `/root-cause --five-whys` - 使用五个为什么方法
- `/root-cause --pattern` - 模式识别分析
- `/root-cause --solution` - 生成解决方案建议
- `/root-cause --prevent` - 生成预防措施

## ✨ AI-Powered Features - AI驱动功能

### 🤖 智能问题分析引擎
```yaml
问题识别:
  技术问题:
    - 代码Bug和逻辑错误
    - 性能瓶颈和资源问题
    - 安全漏洞和风险
    - 架构设计缺陷
    - 依赖冲突和版本问题

  流程问题:
    - 开发流程不规范
    - 测试覆盖不足
    - 部署流程问题
    - 团队协作障碍
    - 文档维护不及时

  环境问题:
    - 开发环境配置
    - 生产环境差异
    - 第三方服务依赖
    - 网络连接问题
    - 硬件资源限制

智能分类:
  - 根本原因 vs 表面现象
  - 系统性问题 vs 偶发问题
  - 技术问题 vs 管理问题
  - 内部问题 vs 外部依赖
```

### 🔧 五个为什么方法论
```yaml
AI增强的五个为什么:
  Why 1 - 现象识别:
    - 详细描述问题现象
    - 收集相关数据和日志
    - 确定问题影响范围
    - 建立问题时间线

  Why 2 - 直接原因:
    - 分析直接触发因素
    - 识别相关系统组件
    - 检查配置和设置
    - 分析用户操作

  Why 3 - 系统原因:
    - 分析系统设计缺陷
    - 检查流程和规范
    - 识别架构问题
    - 分析依赖关系

  Why 4 - 管理原因:
    - 分析管理流程
    - 检查团队协作
    - 识别资源分配
    - 分析决策过程

  Why 5 - 根本原因:
    - 识别根本性问题
    - 分析文化和理念
    - 检查组织结构
    - 确定改进方向
```

### 📊 智能模式识别
```yaml
历史模式分析:
  - 相似问题识别
  - 问题发生频率分析
  - 解决方案效果评估
  - 预防措施有效性

关联性分析:
  - 问题间的因果关系
  - 系统组件关联性
  - 时间序列相关性
  - 环境因素影响

预测性分析:
  - 潜在问题预警
  - 风险评估和量化
  - 影响范围预测
  - 解决时间估算
```

## 🔄 AI Workflow Process - AI工作流程

### Phase 1: 问题收集阶段
```yaml
Step 1 - 问题定义:
  - 收集问题描述和现象
  - 整理相关日志和数据
  - 确定问题严重级别
  - 建立问题档案

Step 2 - 环境分析:
  - 分析问题发生环境
  - 检查系统配置状态
  - 收集相关依赖信息
  - 建立环境快照

Step 3 - 数据收集:
  - 收集错误日志和堆栈
  - 获取性能监控数据
  - 收集用户操作记录
  - 整理相关文档
```

### Phase 2: 智能分析阶段
```yaml
Step 4 - AI分析:
  - 执行智能问题分类
  - 进行模式匹配分析
  - 识别关联性和依赖
  - 生成分析假设

Step 5 - 五个为什么:
  - 引导式问题深挖
  - AI辅助原因推理
  - 验证分析假设
  - 确定根本原因

Step 6 - 验证分析:
  - 验证根因分析结果
  - 检查逻辑一致性
  - 评估解决方案可行性
  - 确认分析完整性
```

### Phase 3: 解决方案阶段
```yaml
Step 7 - 方案生成:
  - 生成多种解决方案
  - 评估方案优缺点
  - 计算实施成本和风险
  - 推荐最佳方案

Step 8 - 预防措施:
  - 设计预防性措施
  - 建立监控和预警
  - 制定应急预案
  - 更新最佳实践
```

## 🧠 Super Brain Integration - 超级大脑集成

### 智能推荐引擎
```yaml
问题模式学习:
  - 学习项目特定的问题模式
  - 积累解决方案知识库
  - 优化分析算法准确性
  - 建立预防性建议

经验积累:
  - 记录成功的分析案例
  - 学习失败的分析教训
  - 优化五个为什么的问题引导
  - 改进解决方案推荐

项目管理集成:
  - 根据项目阶段调整分析重点
  - 集成到问题管理流程
  - 提供项目风险评估
  - 支持决策支持系统
```

### 与其他规则协同
```yaml
code-quality-check协同:
  - 质量问题自动触发根因分析
  - 分析代码质量下降原因
  - 提供质量改进根本方案
  - 建立质量预防机制

commit-fast协同:
  - 分析提交失败原因
  - 优化提交工作流
  - 预防提交冲突
  - 改进提交质量

changelog-management协同:
  - 分析版本发布问题
  - 优化发布流程
  - 预防发布风险
  - 改进变更管理
```

## 📋 Analysis Categories - 分析分类

### 🔴 Critical Issues - 致命问题
```yaml
系统故障:
  - 服务完全不可用
  - 数据丢失或损坏
  - 安全漏洞被利用
  - 性能完全崩溃

分析重点:
  - 立即影响评估
  - 紧急恢复方案
  - 根本原因快速定位
  - 预防措施紧急部署
```

### 🟠 High Priority - 高优先级
```yaml
功能异常:
  - 核心功能不正常
  - 用户体验严重下降
  - 数据一致性问题
  - 集成接口故障

分析重点:
  - 功能影响范围分析
  - 用户影响评估
  - 修复优先级排序
  - 临时解决方案
```

### 🟡 Medium Priority - 中优先级
```yaml
性能问题:
  - 响应时间过长
  - 资源使用过高
  - 并发处理能力不足
  - 缓存效率低下

分析重点:
  - 性能瓶颈定位
  - 优化方案设计
  - 资源配置调整
  - 监控指标优化
```

### 🟢 Low Priority - 低优先级
```yaml
改进机会:
  - 代码可维护性
  - 用户体验优化
  - 流程效率提升
  - 文档完善

分析重点:
  - 长期改进规划
  - 最佳实践应用
  - 技术债务管理
  - 知识积累
```

## 🎯 Five Whys Templates - 五个为什么模板

### 技术问题模板
```yaml
问题: 网站响应时间过长

Why 1: 为什么网站响应时间过长？
答案: 数据库查询时间过长

Why 2: 为什么数据库查询时间过长？
答案: 缺少适当的索引

Why 3: 为什么缺少适当的索引？
答案: 数据库设计时没有考虑查询模式

Why 4: 为什么设计时没有考虑查询模式？
答案: 需求分析不充分，缺少性能要求

Why 5: 为什么需求分析不充分？
答案: 项目时间紧迫，跳过了详细的性能分析阶段

根本原因: 项目管理流程中缺少性能要求的强制性分析环节
解决方案: 建立性能要求分析检查点，完善项目管理流程
```

### 流程问题模板
```yaml
问题: 代码质量持续下降

Why 1: 为什么代码质量持续下降？
答案: 代码审查不够严格

Why 2: 为什么代码审查不够严格？
答案: 审查时间不足，压力过大

Why 3: 为什么审查时间不足？
答案: 项目进度紧张，优先功能开发

Why 4: 为什么项目进度紧张？
答案: 需求变更频繁，计划不准确

Why 5: 为什么需求变更频繁？
答案: 与客户沟通不充分，需求理解有偏差

根本原因: 需求管理流程不完善，缺少有效的需求确认机制
解决方案: 建立需求确认流程，加强客户沟通，完善变更管理
```

## 📊 Solution Generation - 解决方案生成

### 智能解决方案引擎
```yaml
方案生成策略:
  短期解决方案:
    - 快速修复当前问题
    - 临时缓解措施
    - 紧急恢复方案
    - 风险控制措施

  中期改进方案:
    - 系统优化改进
    - 流程规范完善
    - 工具和技术升级
    - 团队能力提升

  长期预防方案:
    - 架构设计改进
    - 管理流程优化
    - 文化和理念转变
    - 组织结构调整

方案评估维度:
  - 实施难度 (25%)
  - 成本效益 (25%)
  - 风险评估 (20%)
  - 时间要求 (15%)
  - 资源需求 (15%)
```

### 预防措施设计
```yaml
技术预防:
  - 自动化测试增强
  - 监控和预警系统
  - 代码质量门禁
  - 安全扫描集成

流程预防:
  - 检查点和审查机制
  - 风险评估流程
  - 变更管理规范
  - 知识分享机制

文化预防:
  - 质量意识培养
  - 持续改进文化
  - 学习型组织建设
  - 经验分享激励
```

## 🔄 AI Workflow Process - AI工作流程

### Phase 1: 问题定义阶段
```yaml
Step 1 - 问题收集:
  - 详细记录问题现象
  - 收集相关日志和数据
  - 确定问题影响范围
  - 建立问题时间线

Step 2 - 初步分类:
  - AI自动问题分类
  - 确定问题严重级别
  - 识别相关系统组件
  - 评估紧急程度

Step 3 - 背景分析:
  - 分析问题发生环境
  - 检查相关配置变更
  - 识别可能的触发因素
  - 建立问题上下文
```

### Phase 2: 根因挖掘阶段
```yaml
Step 4 - AI辅助五个为什么:
  - AI生成引导性问题
  - 智能推理和假设验证
  - 关联性分析和验证
  - 逻辑链条完整性检查

Step 5 - 模式匹配:
  - 搜索历史相似问题
  - 分析问题模式和趋势
  - 识别系统性问题
  - 评估问题复发风险

Step 6 - 根因验证:
  - 验证根因分析结果
  - 检查逻辑推理链条
  - 评估根因可信度
  - 确认分析完整性
```

### Phase 3: 方案制定阶段
```yaml
Step 7 - 解决方案生成:
  - AI生成多种解决方案
  - 评估方案可行性
  - 计算成本效益比
  - 推荐最优方案

Step 8 - 预防措施设计:
  - 设计预防性措施
  - 建立监控预警机制
  - 制定应急响应预案
  - 更新最佳实践库
```

## 📋 Analysis Templates - 分析模板

### 🐛 Bug分析模板
```yaml
问题描述:
  - 问题现象: [详细描述]
  - 复现步骤: [步骤列表]
  - 预期行为: [正确行为]
  - 实际行为: [错误行为]
  - 影响范围: [用户/功能影响]

五个为什么分析:
  Why 1: 为什么出现这个Bug？
  答案: [直接原因]
  
  Why 2: 为什么会有这个直接原因？
  答案: [系统原因]
  
  Why 3: 为什么系统会有这个问题？
  答案: [设计原因]
  
  Why 4: 为什么设计时没有考虑这个问题？
  答案: [流程原因]
  
  Why 5: 为什么流程中缺少这个考虑？
  答案: [根本原因]

解决方案:
  - 短期修复: [立即修复方案]
  - 中期改进: [系统改进方案]
  - 长期预防: [预防措施设计]
```

### ⚡ 性能问题模板
```yaml
问题描述:
  - 性能指标: [具体数据]
  - 基准对比: [历史数据对比]
  - 影响评估: [用户体验影响]
  - 监控数据: [系统监控信息]

根因分析:
  Why 1: 为什么性能下降？
  Why 2: 为什么会有性能瓶颈？
  Why 3: 为什么没有及时发现？
  Why 4: 为什么监控不够及时？
  Why 5: 为什么缺少性能监控？

优化方案:
  - 立即优化: [紧急优化措施]
  - 架构优化: [长期架构改进]
  - 监控完善: [监控体系建设]
```

## 🔗 Integration Points - 集成点

### 与现有规则集成
```yaml
code-quality-check集成:
  - 质量问题自动触发根因分析
  - 分析代码质量下降的根本原因
  - 提供质量改进的根本方案
  - 建立质量预防机制

commit-fast集成:
  - 分析提交失败的根本原因
  - 优化提交工作流程
  - 预防提交冲突和问题
  - 改进提交质量管理

changelog-management集成:
  - 分析版本发布问题的根因
  - 优化发布流程和管理
  - 预防发布风险和问题
  - 改进变更管理流程

super-brain-system集成:
  - 利用智能推荐引擎
  - 集成项目阶段感知
  - 支持学习和优化
  - 协同决策支持
```

## 🚨 Error Handling & Safety - 错误处理和安全保障

### 统一错误处理机制
```yaml
错误分类:
  Level 1 - 致命错误:
    - 分析引擎完全故障
    - 数据访问权限不足
    - 关键依赖服务不可用
    - 内存不足无法分析

  Level 2 - 严重错误:
    - 部分分析功能失败
    - AI推理引擎超时
    - 历史数据访问失败
    - 模式匹配算法错误

  Level 3 - 一般错误:
    - 单个分析步骤失败
    - 数据格式解析错误
    - 网络连接间歇性问题
    - 缓存数据不一致

  Level 4 - 警告信息:
    - 分析结果可信度低
    - 历史数据不充分
    - 模式匹配相似度低
    - 建议更新分析模型
```

### 错误恢复策略
```yaml
自动恢复:
  - 分析引擎重启和重试
  - 备用AI模型切换
  - 缓存数据恢复
  - 降级分析模式

人工干预:
  - 致命错误立即通知
  - 提供详细错误信息和解决方案
  - 支持手动分析模式
  - 集成feedback-enhanced反馈

日志记录:
  - 完整的分析过程日志
  - 错误堆栈和上下文
  - 用户操作记录
  - 分析结果和建议

与其他规则协调:
  - 与commit-fast共享错误处理
  - 与changelog-management协调日志
  - 与code-quality-check统一安全措施
  - 集成的恢复策略
```

## ⚡ Performance Optimization - 性能优化

### 智能缓存机制
```yaml
缓存策略:
  - 问题分析结果缓存
  - 历史模式数据缓存
  - AI推理结果缓存
  - 解决方案模板缓存

优化技术:
  - 增量分析算法
  - 并行处理管道
  - 智能预加载
  - 资源池管理
```

### 执行效率目标
```yaml
性能指标:
  - 问题分析: <10秒
  - 五个为什么: <15秒
  - 解决方案生成: <5秒
  - 总体流程: <30秒

优化措施:
  - 异步处理非关键任务
  - 智能跳过重复分析
  - 缓存重复计算结果
  - 优化AI模型推理
```

## 📋 Usage Examples - 使用示例

### 基础根因分析
```bash
# AI智能根因分析
/root-cause --issue "用户登录失败率突然增加"

# 输出示例:
# 🔍 根因分析完成
# 
# 📊 问题分类: 高优先级功能异常
# 🎯 根本原因: 认证服务配置变更导致token验证逻辑错误
# 
# 🔧 解决方案:
# 1. 立即回滚认证服务配置 (紧急)
# 2. 修复token验证逻辑 (短期)
# 3. 建立配置变更审查流程 (长期)
# 
# 🛡️ 预防措施:
# - 配置变更前强制测试
# - 建立认证服务监控
# - 完善变更管理流程
```

### 五个为什么分析
```bash
# 使用五个为什么方法
/root-cause --five-whys

# AI引导式问题分析:
# Why 1: 为什么会出现这个问题？
# [AI分析建议和引导问题]
# 
# Why 2: 为什么会有这个直接原因？
# [深入分析和验证]
# 
# [继续深入分析直到根本原因]
```

### 模式识别分析
```bash
# 模式识别分析
/root-cause --pattern

# 输出示例:
# 📊 模式识别结果
# 
# 🔍 发现相似问题: 3个
# - 2024-12-15: 相同的认证失败模式
# - 2024-11-20: 类似的配置变更问题
# - 2024-10-10: 相关的服务依赖问题
# 
# 📈 问题趋势: 配置变更相关问题呈上升趋势
# 🎯 建议重点: 加强配置管理和变更控制
```

---

**🎯 规则优先级**: 630 (与其他Phase 2规则协同)  
**🔄 更新频率**: 基于问题分析和解决效果持续优化  
**📊 成功指标**: 根因识别准确率>90%, 解决方案有效率>85%, 预防措施成功率>80%  
**🧠 AI模型**: 集成因果推理和模式识别引擎