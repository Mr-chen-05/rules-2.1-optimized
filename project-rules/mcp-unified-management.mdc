---
type: "project_rule"
description: "MCP统一管理策略 - 整合检测、推荐、配置、同步等所有MCP功能的统一管理"
globs: ["**/*"]
priority: 990
alwaysApply: true
---

# 🌐 MCP统一管理策略

> **一站式管理**: 整合所有MCP相关功能，提供统一的检测、推荐、配置和同步服务

## 🎯 核心功能

### 1. 跨平台环境检测
```yaml
支持的AI工具:
  Trae: "%USERPROFILE%\AppData\Roaming\Trae\User\mcp.json"
  Trae_CN: "%USERPROFILE%\AppData\Roaming\Trae CN\User\mcp.json"
  Cursor: "%USERPROFILE%\AppData\Roaming\Cursor\User\globalStorage\cursor.mcp\mcp_settings.json"
  Claude: "%USERPROFILE%\.claude\mcp_settings.json"

检测机制:
  自动扫描: 检测所有已安装的AI工具
  配置分析: 分析各平台MCP服务器配置
  差异识别: 识别配置不一致和缺失项
  性能评估: 分析服务器性能和可用性
```

### 2. MCP专用推荐引擎 (与全局推荐引擎协同)
```yaml
功能定位:
  专用领域: MCP工具选择和配置推荐
  与全局推荐引擎协同: 接收项目阶段信息，提供MCP工具建议
  避免重复: 专注MCP领域，不重复实现通用推荐算法

工具分层:
  Tier_1_核心工具 (必需):
    - server-filesystem: 文件系统操作
    - server-memory: 智能记忆系统
    - codebase-retrieval: 代码语义搜索
  
  Tier_2_协作工具 (推荐):
    - server-github: Git协作和PR管理
    - mcp-feedback-enhanced: 增强交互反馈
    - context7: 文档和知识管理
  
  Tier_3_高级工具 (可选):
    - 数据库服务器: MySQL/Redis集成
    - 自动化工具: Playwright/TestSprite
    - 视觉AI: Peekaboo (macOS 14.0+)

推荐算法:
  项目类型适配: 基于前端/后端/全栈自动推荐
  团队规模调整: 个人/小团队/大团队差异化配置
  经验水平适配: 新手/中级/专家不同复杂度
```

### 3. 统一命令系统
```yaml
检测命令:
  - "检查MCP状态" - 单平台检测
  - "检查所有AI工具MCP状态" - 跨平台检测
  - "MCP健康检查" - 全面状态检查
  - "MCP平台报告" - 详细分析报告

配置命令:
  - "推荐MCP工具" - 智能推荐配置
  - "一键配置MCP" - 自动安装配置
  - "优化MCP设置" - 性能优化调整

同步命令:
  - "同步MCP配置" - 跨平台配置同步
  - "统一MCP设置" - 多平台配置统一
  - "备份MCP配置" - 配置文件备份

管理命令:
  - "MCP使用报告" - 使用统计分析
  - "修复MCP问题" - 自动问题诊断
  - "更新MCP服务器" - 批量更新管理
```

## 🔧 智能工作流

### MCP智能检测和自动执行
```yaml
自动检测触发条件:
  任务开始时: 自动检测MCP配置状态
  文件操作时: 检查filesystem工具可用性
  代码分析时: 验证codebase-retrieval状态
  GitHub操作时: 确认github工具配置
  跨平台需求时: 自动运行mcp-cross-platform-sync.ps1

智能脚本调用:
  检测脚本位置: 
    - 项目根目录/mcp-tools/mcp-cross-platform-sync.ps1
    - 源码目录/mcp-scripts/mcp-cross-platform-sync.ps1
  
  自动执行条件:
    - 需要了解MCP配置状态时
    - 检测到多个AI工具时
    - 用户询问MCP相关问题时
    - 配置不完整需要分析时
  
  执行方式:
    - 静默执行: .\mcp-cross-platform-sync.ps1 -Action detect
    - 获取结果: 解析输出并整合到AI响应中
    - 智能分析: 基于检测结果提供建议
```

### MCP优先使用策略
```yaml
强制执行流程:
  任务接收 → 智能检测MCP状态 → 扫描可用工具 → 效率评估 → 选择最优方案 → 执行监控 → 动态调整

工具选择矩阵:
  文件操作: server-filesystem > 手动操作
  代码检索: codebase-retrieval > 盲目搜索
  GitHub操作: server-github > web抓取
  用户反馈: mcp-feedback-enhanced > 简单询问
  记忆管理: server-memory > 临时变量
  通用操作: server-everything > 手动执行

切换条件:
  - MCP工具不可用时使用备选方案
  - 功能不足时组合多个工具
  - 性能问题时动态调整策略
```

### 自动化配置生成
```yaml
配置模板:
  基础配置:
    - 标准mcp_settings.json结构
    - 工具优先级设置
    - 性能优化参数
    - 安全和权限配置
  
  平台适配:
    - Trae特定配置 (disabled字段、timeout)
    - Cursor工作区配置
    - Claude标准配置
    - 环境变量适配

渐进式配置:
  阶段1: 核心工具 (filesystem, memory, codebase)
  阶段2: 协作工具 (github, feedback-enhanced)
  阶段3: 高级工具 (数据库, 自动化, 视觉AI)
  阶段4: 定制工具 (项目特定需求)
```

## 📊 智能监控和优化

### 性能监控
```yaml
监控维度:
  可用性: MCP服务器连接状态和响应时间
  使用率: 工具调用频率和成功率
  效率: 任务完成时间和质量指标
  稳定性: 错误率和故障恢复能力

优化策略:
  实时调整: 基于使用频率调整工具优先级
  预测分析: 根据项目阶段预测工具需求
  自动修复: 检测到问题时自动尝试修复
  学习优化: 基于使用模式持续改进推荐
```

### 跨平台同步
```yaml
同步策略:
  智能源选择: 自动识别最完整的配置作为同步源
  增量同步: 只同步缺失的服务器配置
  冲突解决: 智能合并冲突配置
  备份保护: 同步前自动备份原始配置

同步流程:
  1. 扫描所有平台配置
  2. 分析配置差异和完整性
  3. 选择最佳配置作为同步源
  4. 生成同步计划和预览
  5. 执行同步并验证结果
```

## 🎯 使用示例

### 典型工作流
```yaml
场景1_新环境配置:
  用户: "检查MCP状态"
  AI: 自动检测 → 分析缺失 → 推荐配置 → 一键安装

场景2_跨平台同步:
  用户: "同步MCP配置"
  AI: 扫描平台 → 识别差异 → 智能同步 → 验证结果

场景3_性能优化:
  用户: "优化MCP设置"
  AI: 分析使用 → 识别瓶颈 → 调整配置 → 监控效果

场景4_问题诊断:
  用户: "MCP健康检查"
  AI: 全面检测 → 问题诊断 → 修复建议 → 自动修复
```

### 智能响应模板
```yaml
检测响应:
  "🔍 正在检测MCP环境..."
  "📊 检测到 [X] 个AI工具，[Y] 个MCP服务器"
  "💡 推荐配置: [具体建议]"
  "🚀 可选操作: [行动建议]"

同步响应:
  "🔄 开始跨平台同步..."
  "📖 源配置: [最佳平台] ([X] 个服务器)"
  "🎯 同步目标: [目标平台列表]"
  "✅ 同步完成: [结果摘要]"
```

## 📈 效果评估

### 关键指标
```yaml
效率指标:
  - 配置时间: 从30分钟 → 2分钟
  - 检测准确率: >95%
  - 同步成功率: >98%
  - 用户满意度: >4.5/5.0

质量指标:
  - 推荐准确率: >90%
  - 工具使用率: >85%
  - 错误率: <3%
  - 响应时间: <2秒
```

## 🔗 集成其他系统

### 超级大脑系统集成
```yaml
统一管理:
  - MCP状态纳入项目健康度评估
  - 工具推荐集成到阶段管理
  - 配置优化融入性能监控
  - 问题诊断连接故障处理

智能决策:
  - 基于项目阶段自动调整MCP配置
  - 根据团队规模优化工具组合
  - 结合开发需求动态推荐工具
  - 整合用户反馈持续改进
```

---

**🎯 激活提示**: 该统一管理策略整合了所有MCP相关功能，用户只需使用简单的命令即可获得完整的MCP管理服务。系统会自动选择最适合的功能模块来响应用户需求。