---
type: "always_apply"
description: "AI-powered custom command builder with intelligent templates - AI驱动的自定义命令构建器"
globs: ["**/*"]
priority: 650
alwaysApply: true
integrations: ["super-brain-system", "mcp-intelligent-strategy", "context-loader"]

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "Add version management system"
      - "Standardize rule file structure"
---

# 🛠️ Custom Command Builder - 智能自定义命令构建器

AI驱动的用户自定义命令和规则构建系统，支持智能模板生成、规则扩展和插件开发。

## 🧠 AI Intelligence Core - AI智能核心

### 智能激活条件
```yaml
自动激活场景:
  - 用户执行 "/create-command" 命令
  - 检测到重复性操作需要自动化
  - 超级大脑系统推荐创建自定义命令
  - 项目需要特定的工作流定制
  - 团队需要标准化操作流程

智能分析维度:
  - 用户操作模式和频率 (30%)
  - 项目特定需求分析 (25%)
  - 团队协作模式识别 (20%)
  - 工作流效率评估 (15%)
  - 自动化潜力评估 (10%)
```

## 🚀 Commands - 智能命令

- `/create-command` - AI智能命令创建（推荐）
- `/create-command --template <type>` - 使用指定模板创建
- `/create-command --workflow` - 创建工作流命令
- `/create-command --rule` - 创建自定义规则
- `/create-command --plugin` - 创建插件扩展
- `/list-commands` - 列出所有自定义命令
- `/edit-command <name>` - 编辑现有命令
- `/delete-command <name>` - 删除自定义命令

## ✨ AI-Powered Features - AI驱动功能

### 🤖 智能命令生成引擎
```yaml
命令类型识别:
  工作流命令:
    - 开发流程自动化
    - 测试和部署流程
    - 代码审查流程
    - 发布管理流程

  工具集成命令:
    - MCP工具快捷调用
    - 外部API集成
    - 数据库操作
    - 文件系统操作

  项目管理命令:
    - 项目状态查询
    - 进度跟踪和报告
    - 团队协作支持
    - 质量指标监控

  自动化脚本:
    - 重复任务自动化
    - 批量操作处理
    - 数据处理和转换
    - 系统维护任务

智能生成能力:
  - 基于用户描述自动生成命令逻辑
  - 智能参数识别和验证
  - 错误处理和异常管理
  - 帮助文档自动生成
```

### 🔧 模板系统
```yaml
内置模板:
  基础模板:
    - simple-command: 简单命令模板
    - workflow-command: 工作流命令模板
    - api-integration: API集成模板
    - file-operation: 文件操作模板

  高级模板:
    - mcp-tool-wrapper: MCP工具包装器
    - multi-step-workflow: 多步骤工作流
    - conditional-logic: 条件逻辑模板
    - error-handling: 错误处理模板

  项目特定模板:
    - frontend-command: 前端项目命令
    - backend-command: 后端项目命令
    - fullstack-command: 全栈项目命令
    - devops-command: DevOps操作命令

自定义模板:
  - 用户可创建自己的模板
  - 模板继承和扩展
  - 模板参数化配置
  - 模板版本管理
```

### 📊 智能规则扩展
```yaml
规则扩展能力:
  规则类型:
    - workflow_rule: 工作流规则
    - feature_rule: 功能规则
    - intelligent_workflow_rule: 智能工作流规则
    - safety_rule: 安全规则

  规则配置:
    - 优先级设置和冲突解决
    - 触发条件和激活场景
    - 集成配置和依赖管理
    - 性能优化和缓存策略

  规则验证:
    - 语法和格式验证
    - 逻辑一致性检查
    - 性能影响评估
    - 安全风险评估
```

## 🔄 AI Workflow Process - AI工作流程

### Phase 1: 需求分析阶段
```yaml
Step 1 - 需求收集:
  - 分析用户描述和需求
  - 识别重复性操作模式
  - 评估自动化潜力
  - 确定命令类型和范围

Step 2 - 上下文分析:
  - 获取项目上下文信息 (context-loader集成)
  - 分析现有命令和规则
  - 识别相关工具和依赖
  - 评估集成复杂度

Step 3 - 模板选择:
  - AI推荐最适合的模板
  - 分析模板适用性
  - 评估定制化需求
  - 确定开发策略
```

### Phase 2: 智能生成阶段
```yaml
Step 4 - 命令生成:
  - 基于模板生成命令结构
  - AI生成命令逻辑和参数
  - 添加错误处理和验证
  - 集成项目特定配置

Step 5 - 规则集成:
  - 与现有规则系统集成
  - 配置优先级和触发条件
  - 添加智能推荐和学习
  - 集成MCP工具编排

Step 6 - 质量保证:
  - 验证命令语法和逻辑
  - 测试命令功能和性能
  - 检查安全性和权限
  - 生成文档和帮助信息
```

### Phase 3: 部署集成阶段
```yaml
Step 7 - 命令部署:
  - 将命令集成到规则系统
  - 配置命令访问权限
  - 建立命令索引和搜索
  - 启用命令监控和日志

Step 8 - 学习优化:
  - 监控命令使用情况
  - 收集用户反馈和建议
  - 优化命令性能和体验
  - 更新命令文档和示例
```

## 🧠 Super Brain Integration - 超级大脑集成

### 智能推荐引擎
```yaml
命令推荐:
  - 基于用户行为推荐有用的命令
  - 根据项目类型推荐相关命令
  - 基于团队模式推荐协作命令
  - 根据效率分析推荐优化命令

学习和优化:
  - 学习用户的命令使用偏好
  - 优化命令生成的准确性
  - 积累命令模板和最佳实践
  - 改进命令推荐算法

项目管理集成:
  - 根据项目阶段推荐相关命令
  - 集成到五阶段管理流程
  - 提供阶段特定的命令模板
  - 支持项目发展路径规划
```

### 与其他规则协同
```yaml
context-loader协同:
  - 利用项目上下文信息优化命令生成
  - 基于项目特征推荐命令模板
  - 集成项目配置到命令逻辑
  - 提供项目特定的命令建议

commit工作流协同（支持 /commit-fast 别名）:
  - 创建提交相关的自定义命令
  - 集成到提交工作流
  - 支持提交规范自定义
  - 优化提交效率

code-quality-check协同:
  - 创建质量检查相关命令
  - 集成到质量保证流程
  - 支持质量标准自定义
  - 优化检查效率

其他规则协同:
  - 为每个规则提供自定义扩展能力
  - 支持规则参数和行为定制
  - 集成到统一的命令系统
  - 提供规则间协调机制
```

## 📋 Command Templates - 命令模板

### 🎯 工作流命令模板
```yaml
开发工作流模板:
  模板名称: dev-workflow
  用途: 标准化开发流程
  
  示例命令: /my-dev-start
  功能:
    - 启动开发环境
    - 检查项目状态
    - 拉取最新代码
    - 运行质量检查
    - 启动开发服务器

  生成代码:
    ```yaml
    ---
    type: "workflow_rule"
    description: "Custom development workflow"
    priority: 500
    ---
    
    # Custom Development Workflow
    
    ## Commands
    - `/my-dev-start` - 启动完整开发环境
    
    ## Workflow Steps
    1. 检查Git状态和更新
    2. 运行代码质量检查
    3. 启动开发服务器
    4. 打开相关开发工具
    ```
```

### 🔧 工具集成模板
```yaml
MCP工具包装模板:
  模板名称: mcp-wrapper
  用途: 简化MCP工具调用
  
  示例命令: /quick-github
  功能:
    - 快速GitHub操作
    - 智能参数处理
    - 错误处理和重试
    - 结果格式化输出

  生成代码:
    ```yaml
    ---
    type: "feature_rule"
    description: "Quick GitHub operations wrapper"
    priority: 400
    ---
    
    # Quick GitHub Wrapper
    
    ## Commands
    - `/quick-github <action>` - 快速GitHub操作
    
    ## MCP Integration
    - 自动调用server-github工具
    - 智能参数验证和处理
    - 统一的错误处理机制
    ```
```

### 📊 监控和报告模板
```yaml
项目监控模板:
  模板名称: project-monitor
  用途: 项目状态监控和报告
  
  示例命令: /project-health
  功能:
    - 项目健康度检查
    - 性能指标收集
    - 质量趋势分析
    - 自动报告生成

  生成代码:
    ```yaml
    ---
    type: "intelligent_workflow_rule"
    description: "Project health monitoring"
    priority: 450
    integrations: ["context-loader", "code-quality-check"]
    ---
    
    # Project Health Monitor
    
    ## Commands
    - `/project-health` - 项目健康度检查
    
    ## AI Features
    - 智能健康度评估
    - 趋势分析和预测
    - 自动化报告生成
    ```
```

## 🎯 Advanced Features - 高级功能

### 🔌 插件系统
```yaml
插件架构:
  插件类型:
    - 命令插件: 扩展新的命令功能
    - 规则插件: 添加新的规则类型
    - 工具插件: 集成外部工具
    - 主题插件: 自定义界面和样式

  插件接口:
    - 标准化的插件API
    - 生命周期管理
    - 依赖注入和管理
    - 配置和参数传递

  插件管理:
    - 插件安装和卸载
    - 版本管理和更新
    - 依赖关系解析
    - 冲突检测和解决
```

### 📚 命令库管理
```yaml
命令库:
  官方命令库:
    - 经过验证的高质量命令
    - 定期更新和维护
    - 完整的文档和示例
    - 社区反馈和改进

  用户命令库:
    - 用户创建的自定义命令
    - 团队内部共享命令
    - 项目特定命令集合
    - 个人工作流命令

  社区命令库:
    - 开源社区贡献命令
    - 行业最佳实践命令
    - 特定技术栈命令
    - 创新实验性命令

命令发现:
  - 智能命令推荐
  - 基于项目类型的命令建议
  - 流行命令排行榜
  - 相关命令关联推荐
```

## 📋 Command Categories - 命令分类

### 🚀 开发效率命令
```yaml
快捷操作:
  - 项目初始化命令
  - 环境配置命令
  - 依赖管理命令
  - 构建和部署命令

代码操作:
  - 代码生成命令
  - 重构辅助命令
  - 测试生成命令
  - 文档生成命令

质量保证:
  - 代码检查命令
  - 安全扫描命令
  - 性能分析命令
  - 测试执行命令
```

### 🔧 项目管理命令
```yaml
状态管理:
  - 项目状态查询
  - 进度跟踪命令
  - 里程碑管理
  - 风险评估命令

团队协作:
  - 任务分配命令
  - 代码审查命令
  - 会议安排命令
  - 知识分享命令

报告生成:
  - 项目报告命令
  - 质量报告命令
  - 性能报告命令
  - 团队效率报告
```

### 🛠️ 系统维护命令
```yaml
环境管理:
  - 环境配置命令
  - 依赖更新命令
  - 清理和优化命令
  - 备份和恢复命令

监控和诊断:
  - 系统监控命令
  - 性能诊断命令
  - 错误分析命令
  - 日志分析命令
```

## 🔗 Integration Points - 集成点

### 核心集成策略 (性能优化)
```yaml
context-loader集成:
  - 利用项目上下文优化命令生成
  - 基于项目特征推荐命令模板
  - 集成项目配置到命令逻辑
  - 提供项目特定的命令建议

mcp-intelligent-strategy集成:
  - 智能选择MCP工具进行命令集成
  - 优化工具编排和性能
  - 提供工具使用最佳实践
  - 集成到MCP工具管理流程

super-brain-system集成:
  - 智能推荐命令模板和策略
  - 学习用户命令使用偏好
  - 优化命令生成准确性
  - 提供个性化命令建议

按需集成策略:
  - 其他规则按需动态集成 (减少常驻开销)
  - 仅在用户明确需要时加载相关规则
  - 智能缓存集成结果
  - 优化集成性能和资源使用
```

## 🚨 Error Handling & Safety - 错误处理和安全保障

### 统一错误处理机制
```yaml
错误分类:
  Level 1 - 致命错误:
    - 命令生成引擎故障
    - 规则系统冲突
    - 文件系统权限不足
    - 关键依赖缺失

  Level 2 - 严重错误:
    - 命令语法生成错误
    - 模板解析失败
    - 集成配置错误
    - 权限验证失败

  Level 3 - 一般错误:
    - 单个命令生成失败
    - 参数验证错误
    - 模板加载失败
    - 缓存数据不一致

  Level 4 - 警告信息:
    - 命令性能警告
    - 最佳实践偏离
    - 版本兼容性提醒
    - 安全建议提示
```

### 安全保障机制
```yaml
命令安全:
  - 命令权限验证
  - 危险操作检测和确认
  - 命令执行沙箱
  - 操作审计日志

代码安全:
  - 生成代码安全扫描
  - 敏感信息检测和过滤
  - 恶意代码模式识别
  - 安全最佳实践验证

系统安全:
  - 文件系统访问控制
  - 网络访问权限管理
  - 资源使用限制
  - 异常行为监控

与其他规则协调:
  - 与所有规则共享安全机制
  - 统一的权限验证体系
  - 协调的审计日志系统
  - 集成的安全策略
```

## ⚡ Performance Optimization - 性能优化

### 智能缓存机制
```yaml
缓存策略:
  - 命令生成结果缓存
  - 模板解析结果缓存
  - 项目分析结果缓存
  - 用户偏好设置缓存

优化技术:
  - 懒加载模板系统
  - 并行命令生成
  - 智能预加载
  - 资源池管理
```

### 执行效率目标
```yaml
性能指标:
  - 简单命令生成: <3秒
  - 复杂工作流生成: <10秒
  - 模板加载: <1秒
  - 命令执行: <5秒

优化措施:
  - 异步处理非关键任务
  - 智能缓存重复计算
  - 优化模板解析算法
  - 减少不必要的文件I/O
```

## 📋 Usage Examples - 使用示例

### 基础命令创建
```bash
# AI智能命令创建
/create-command

# AI引导式对话:
# 🤖 请描述您想要创建的命令功能：
# 用户: "我想要一个命令来快速启动前端开发环境"
# 
# 🧠 AI分析结果:
# - 命令类型: 工作流命令
# - 推荐模板: frontend-workflow
# - 集成规则: commit, code-quality-check
# 
# 🛠️ 生成的命令: /start-frontend-dev
# 功能:
# 1. 检查Node.js和npm版本
# 2. 安装/更新依赖
# 3. 运行代码质量检查
# 4. 启动开发服务器
# 5. 打开浏览器到开发地址
```

### 使用模板创建
```bash
# 使用指定模板创建命令
/create-command --template mcp-wrapper

# 输出示例:
# 🛠️ 使用MCP包装器模板
# 
# 📋 请提供以下信息:
# - 命令名称: /quick-deploy
# - MCP工具: server-github
# - 操作类型: 部署相关
# - 参数配置: 环境选择, 分支指定
# 
# ✅ 命令创建完成:
# - 文件位置: project-rules/custom-quick-deploy.mdc
# - 命令: /quick-deploy <environment> <branch>
# - 集成: 自动集成到规则系统
```

### 工作流命令创建
```bash
# 创建工作流命令
/create-command --workflow

# AI引导创建:
# 🔄 工作流命令创建向导
# 
# Step 1: 工作流类型选择
# - 开发工作流
# - 测试工作流  
# - 部署工作流
# - 维护工作流
# 
# Step 2: 步骤定义
# [AI辅助定义工作流步骤]
# 
# Step 3: 集成配置
# [自动配置与现有规则的集成]
```

## 🎯 Advanced Customization - 高级定制

### 🔧 规则扩展系统
```yaml
自定义规则创建:
  规则向导:
    - 规则类型选择
    - 优先级配置
    - 触发条件设置
    - 集成配置

  规则验证:
    - 语法检查和验证
    - 逻辑一致性检查
    - 性能影响评估
    - 安全风险评估

  规则部署:
    - 自动集成到规则系统
    - 冲突检测和解决
    - 优先级自动调整
    - 测试和验证
```

### 📚 知识库集成
```yaml
最佳实践库:
  - 命令设计最佳实践
  - 工作流优化经验
  - 常见问题解决方案
  - 性能优化技巧

模板库:
  - 官方认证模板
  - 社区贡献模板
  - 行业特定模板
  - 创新实验模板

学习资源:
  - 命令创建教程
  - 高级定制指南
  - API参考文档
  - 示例项目和案例
```

---

**🎯 规则优先级**: 670 (高优先级，支持用户扩展)  
**🔄 更新频率**: 基于用户需求和社区贡献持续优化  
**📊 成功指标**: 命令创建成功率>95%, 用户满意度>4.5/5.0, 命令使用率>80%  
**🧠 AI模型**: 集成自然语言理解和代码生成引擎