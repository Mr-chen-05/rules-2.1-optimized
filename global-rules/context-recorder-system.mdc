---
type: "always_apply"
description: "Context Recorder System (记录员系统) - 模块化索引文件"
globs: ["**/*"]
priority: 920
alwaysApply: true
integrations: ["super-brain-system", "brain-recorder-integration"]
modules: ["context-recorder-core", "context-recorder-templates", "context-recorder-advanced", "context-recorder-edge-cases"]

# Version Management
version: "3.0.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "3.0.0"
    date: "2025-10-19"
    changes:
      - "Modularize recorder system to solve 20k character limit"
      - "Split into 4 modules: core, templates, advanced, edge-cases"
      - "Create lightweight index file"
      - "Each module under 20k characters"
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "Add version management system"
      - "Standardize rule file structure"
---

# 📝 Context Recorder System (记录员系统)

> **模块化架构**: 为解决单文件过大问题 (原50k字符)，系统已拆分为4个独立模块

## 🎯 系统概述

Context Recorder System (记录员系统) 是一个智能化的AI上下文管理系统，通过结构化记录确保：
- 项目需求和决策的完整记录
- 问题解决过程的经验积累
- 重要信息的持续可访问性
- 避免重复犯错和重复工作

---

## 📚 模块结构

系统采用模块化设计，分为以下4个核心模块：

### 1️⃣ 核心模块 (Core)
**文件**: `context-recorder-core.mdc`  
**优先级**: 920 (最高)  
**字符数**: ~15k

**包含内容**:
- 角色定义和核心使命
- 任务原子化（增量合并、快照归档）
- 核心技能矩阵（语义抽取、高置信判定、稳健合并）
- 数据保护规则和ID管理机制
- 文件创建和指令路由
- 触发条件矩阵
- 与超级大脑系统集成

**关键功能**:
- ✅ 自动语义抽取和信息分类
- ✅ 高置信度判定机制
- ✅ 增量合并和数据保护
- ✅ Memory工具协同（可选，Recorder优先）

---

### 2️⃣ 模板模块 (Templates)
**文件**: `context-recorder-templates.mdc`  
**优先级**: 918  
**字符数**: ~12k

**包含内容**:
- project.context.md 标准模板
- context.archive.md 标准模板
- 归档文件管理规则
- 多归档文件管理机制
- 归档生命周期管理
- 文档元数据标准
- 输出格式规范

**关键功能**:
- ✅ 标准化项目上下文模板
- ✅ 智能归档配置
- ✅ 多文件归档管理
- ✅ 归档索引和溯源

---

### 3️⃣ 高级功能模块 (Advanced)
**文件**: `context-recorder-advanced.mdc`  
**优先级**: 917  
**字符数**: ~12k

**包含内容**:
- 智能化增强功能
- 项目类型自动识别
- 智能标签系统
- 质量评分机制
- 关联关系管理
- 性能优化（大文件处理、缓存机制）
- 并发安全机制
- 错误恢复与回滚
- 敏感信息保护
- 监控和告警
- 插件和扩展

**关键功能**:
- ✅ 自动项目类型识别
- ✅ 智能质量评分（0-100分）
- ✅ 三级缓存策略
- ✅ 并发安全和文件锁
- ✅ 敏感信息脱敏

---

### 4️⃣ 边界情况模块 (Edge Cases)
**文件**: `context-recorder-edge-cases.mdc`  
**优先级**: 916  
**字符数**: ~11k

**包含内容**:
- 字符编码处理
- 时间戳精度管理
- 特殊字符处理
- 大文件处理策略
- 并发访问处理
- 备份和恢复机制
- 日志记录完整性
- 缓存管理
- 数据验证框架
- 完整性检查
- 异常场景处理

**关键功能**:
- ✅ 多编码格式支持
- ✅ 特殊字符转义
- ✅ 大文件分块处理
- ✅ 自动备份和恢复
- ✅ 异常场景优雅降级

---

## 🚀 快速使用

### 系统激活
记录员系统通过**超级大脑系统**自动激活，不提供独立激活入口：

```
用户: "启动超级大脑系统"
AI: 自动激活记录员系统并创建项目上下文文件
```

### 常用命令
```
/record         - 手动触发增量合并
/archive        - 手动触发快照归档
/record-status  - 查看当前记录状态
/rollback       - 回滚最后一次操作
/init-project   - 强制重新创建项目文件
```

### 自动触发
```yaml
自动记录触发:
    - Git提交完成后
    - 重要决策确认后
    - 模块开发完成后
    - 问题解决完成后

自动归档触发:
  - 文件大小 > 2.9MB
  - 记录数 > 150条
  - 时间跨度 > 14天
  - 项目阶段切换
```

---

## 📋 核心特性

### 🎯 智能记录
- **语义抽取**: 自动识别Facts/Decisions/TODO/Done/Notes
- **高置信判定**: 弱化词自动降级，确保信息准确性
- **触发词识别**: 基于上下文的智能分类

### 🔒 数据保护
- **受保护区块**: Pinned/Decisions区块不可删除
- **版本控制**: 完整的修改历史追踪
- **敏感信息保护**: 自动检测和脱敏处理

### ⚡ 性能优化
- **三级缓存**: 内存/解析/模板缓存
- **分块处理**: 大文件智能分块
- **并发安全**: 文件锁和原子操作

### 🛡️ 健壮可靠
- **自动备份**: 每小时自动备份
- **错误恢复**: 自动检测和恢复机制
- **完整性检查**: 多维度数据验证

---

## 🔗 系统集成

### 与超级大脑系统集成
```yaml
激活方式:
  - 统一入口: 通过 super-brain-system.mdc 统一激活
  - 自动激活: 超级大脑系统激活时自动激活记录员

协作模式:
  - 超级大脑负责决策和执行
  - 记录员负责记忆和追踪
  - 反馈系统负责用户交互
```

### Memory工具协同（可选）
```yaml
默认策略: Recorder 优先，Memory 可选

使用场景:
  - Recorder: 日常记录、分类、归档
  - Memory: 模糊搜索、跨项目检索、语义聚合
```

---

## 📊 模块依赖关系

```
context-recorder-system.mdc (索引文件)
  ├── context-recorder-core.mdc (核心模块) ⭐⭐⭐
  ├── context-recorder-templates.mdc (模板模块)
  ├── context-recorder-advanced.mdc (高级功能)
  └── context-recorder-edge-cases.mdc (边界情况)
```

**加载顺序**: core → templates → advanced → edge-cases

---

## 💡 最佳实践

### 建议使用场景
- ✅ 复杂项目的长期开发
- ✅ 多人协作的团队项目
- ✅ 需要详细记录的重要项目
- ✅ 学习和经验积累的项目

### 注意事项
- ⚠️ 定期检查文档完整性
- ⚠️ 及时确认重要决策
- ⚠️ 保持证据链接的有效性
- ⚠️ 适时进行归档整理

---

## 📈 版本历史

### v3.0.0 (2025-10-19) - 模块化重构
- ✨ 拆分为4个独立模块
- ✨ 每个模块 < 20k字符
- ✨ 解决Cursor规则文件大小限制
- ✨ 提升加载性能和可维护性

### v2.6.0 (2025-10-19)
- ✨ 添加版本管理系统
- ✨ 标准化规则文件结构

---

## 🆘 问题排查

### 模块加载失败
```
问题: 某个模块无法加载
解决: 检查文件是否存在于 P2-intelligent-system/ 目录
```

### 文件大小超限
```
问题: project.context.md 文件过大
解决: 执行 /archive 命令进行归档
```

### 数据丢失
```
问题: 重要信息丢失
解决: 使用 /rollback 命令恢复最近备份
```

---

## 📞 技术支持

**相关文档**:
- 核心模块: `context-recorder-core.mdc`
- 模板定义: `context-recorder-templates.mdc`
- 高级功能: `context-recorder-advanced.mdc`
- 边界情况: `context-recorder-edge-cases.mdc`

**集成系统**:
- 超级大脑系统: `super-brain-system.mdc`
- 大脑记录员集成: `brain-recorder-integration.mdc`

---

**记录员系统 v3.0 - 模块化架构，让AI永远记住项目的每一个重要时刻**

*新版本采用模块化设计，解决了单文件过大问题，提升了性能和可维护性*
