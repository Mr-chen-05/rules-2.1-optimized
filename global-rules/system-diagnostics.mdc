---
type: "always_apply"
description: "系统诊断工具 - 全面的系统健康检查和故障排查框架"
globs: ["**/*"]
alwaysApply: true
priority: 900

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "Add version management system"
      - "Standardize rule file structure"
---

# 🔧 系统诊断工具

## 第1层 - 诊断框架概述

### 核心诊断模块
```yaml
诊断系统包括:
  1. 规则系统诊断
  2. 上下文记录诊断
  3. 权限系统诊断
  4. 性能监控诊断
  5. 数据一致性诊断
  6. 集成测试诊断
```

## 第2层 - 规则系统诊断

### 规则健康检查
```yaml
检查项目:
  1. 规则文件完整性:
     - 检查所有规则文件是否存在
     - 检查文件大小和行数
     - 检查文件编码是否正确
  
  2. 规则语法检查:
     - 验证YAML语法有效性
     - 检查Markdown格式正确性
     - 验证特殊字符的编码
  
  3. 规则版本一致性:
     - 检查所有规则文件版本号
     - 确认版本号格式正确
     - 验证兼容性关系
  
  4. 规则引用检查:
     - 检查交叉引用有效性
     - 验证包含关系完整性
     - 检测循环引用
  
  5. 优先级冲突检查:
     - 检查优先级分配是否合理
     - 检测优先级冲突
     - 建议优先级优化

检查命令:
  /diagnose-rules - 执行完整规则诊断
  /check-rule-syntax [rule_file] - 检查特定规则文件语法
  /verify-rule-references - 验证规则间引用关系
  /check-rule-versions - 检查规则版本一致性
```

## 第3层 - 上下文记录诊断

### 上下文健康检查
```yaml
检查项目:
  1. 文件完整性:
     - 检查 project.context.md 是否存在
     - 检查 context.archive*.md 文件
     - 检查备份文件完整性
  
  2. 数据结构检查:
     - 验证所有必需区块存在
     - 检查区块内容格式
     - 验证ID唯一性
  
  3. 内容一致性检查:
     - 检查Pinned条目引用有效性
     - 验证TODO任务的状态一致性
     - 检测重复条目
  
  4. 时间戳有效性:
     - 检查所有时间戳格式正确
     - 验证时间戳的逻辑顺序
     - 检测时间异常
  
  5. 敏感信息扫描:
     - 检测未脱敏的敏感信息
     - 查找潜在的安全风险
     - 建议清理措施

检查命令:
  /diagnose-context - 执行完整上下文诊断
  /check-context-integrity - 检查上下文数据完整性
  /verify-timestamps - 验证时间戳一致性
  /scan-sensitive-info - 扫描敏感信息
  /check-duplicates - 检测重复条目
```

## 第4层 - 权限系统诊断

### 权限健康检查
```yaml
检查项目:
  1. 权限配置检查:
     - 验证权限配置文件有效性
     - 检查角色定义完整性
     - 验证权限分配正确性
  
  2. 审计日志检查:
     - 检查审计日志文件存在
     - 验证日志格式一致性
     - 检查日志文件大小
  
  3. 权限冲突检测:
     - 检测权限分配冲突
     - 发现权限缝隙
     - 建议权限优化
  
  4. 异常操作检测:
     - 检查是否有越权操作
     - 检测可疑的操作模式
     - 查找安全威胁

检查命令:
  /diagnose-permissions - 执行完整权限诊断
  /verify-permission-config - 验证权限配置
  /audit-anomalies - 检测审计异常
  /permission-conflict-check - 检查权限冲突
  /security-assessment - 执行安全评估
```

## 第5层 - 性能监控诊断

### 性能诊断
```yaml
监控指标:
  1. 文件操作性能:
     - 读取延迟 (ms)
     - 写入延迟 (ms)
     - 操作吞吐量 (ops/sec)
  
  2. 内存使用:
     - 当前内存占用 (MB)
     - 内存峰值 (MB)
     - 内存泄漏风险
  
  3. CPU使用率:
     - 当前CPU使用 (%)
     - 峰值CPU使用 (%)
  
  4. 系统负载:
     - 1分钟平均负载
     - 5分钟平均负载
     - 15分钟平均负载
  
  5. 缓存效率:
     - 缓存命中率 (%)
     - 缓存大小 (MB)
     - 缓存刷新频率

监控命令:
  /diagnose-performance - 获取性能诊断报告
  /monitor-memory - 监控内存使用
  /monitor-cpu - 监控CPU使用
  /cache-stats - 查看缓存统计
  /performance-trends - 查看性能趋势
```

## 第6层 - 数据一致性诊断

### 数据同步检查
```yaml
检查项目:
  1. Recorder vs Memory同步:
     - 检查两个系统的数据同步状态
     - 检测数据冲突
     - 验证一致性
  
  2. 版本号一致性:
     - 检查所有文件的版本号
     - 验证版本兼容性
  
  3. 备份一致性:
     - 检查备份文件与主文件的同步
     - 验证备份完整性
  
  4. 归档一致性:
     - 检查归档文件的完整性
     - 验证归档索引准确性

一致性修复:
  /fix-sync-conflict - 自动修复同步冲突
  /restore-from-backup - 从备份恢复数据
  /reindex-archives - 重新索引归档文件
  /verify-data-integrity - 验证数据完整性
```

## 第7层 - 集成测试诊断

### 端到端测试
```yaml
测试套件:
  1. 功能测试:
     - 测试所有主要命令
     - 测试所有工作流程
     - 测试边界情况
  
  2. 集成测试:
     - 测试规则间协作
     - 测试系统集成
     - 测试MCP工具集成
  
  3. 回归测试:
     - 测试已修复的缺陷
     - 验证功能稳定性
     - 检测新引入的bug
  
  4. 压力测试:
     - 大数据量测试
     - 并发操作测试
     - 长时间运行测试

测试命令:
  /run-tests - 运行完整测试套件
  /run-integration-tests - 运行集成测试
  /run-regression-tests - 运行回归测试
  /run-stress-tests - 运行压力测试
  /test-report - 生成测试报告
```

## 第8层 - 诊断报告生成

### 诊断报告格式
```yaml
报告结构:
  1. 执行摘要:
     - 诊断时间
     - 系统总体状态 (健康/警告/错误)
     - 检查项总数和通过数

  2. 详细发现:
     - 各模块的检查结果
     - 发现的问题列表
     - 严重程度评级 (Critical/High/Medium/Low)

  3. 建议措施:
     - 优先级排序的修复建议
     - 预防性措施
     - 性能优化建议

  4. 趋势分析:
     - 健康度变化趋势
     - 性能指标变化
     - 问题频率分析

报告生成:
  /generate-diagnostic-report - 生成完整诊断报告
  /export-report [format] - 导出报告 (JSON/PDF/HTML)
  /schedule-diagnostics [interval] - 定期运行诊断
  /diagnostic-history - 查看诊断历史
```

## 第9层 - 自动修复机制

### 自动修复流程
```yaml
修复级别:
  Level 1 - 自动修复:
    - 清理临时文件
    - 重建缓存
    - 重新索引数据
    - 执行条件: 问题不涉及数据损失
  
  Level 2 - 半自动修复:
    - 修复权限冲突
    - 更新版本号
    - 修复引用错误
    - 执行条件: 需要用户确认

  Level 3 - 手动修复:
    - 修复数据损坏
    - 修复严重冲突
    - 恢复删除的数据
    - 执行条件: 需要用户手动处理

自动修复命令:
  /auto-fix [issue_id] - 自动修复指定问题
  /auto-fix-all - 自动修复所有可修复的问题
  /repair-context - 修复上下文文件
  /rebuild-indexes - 重建所有索引
```

## 第10层 - 诊断仪表板

### 实时监控仪表板
```yaml
仪表板组件:
  1. 系统健康度:
     - 整体健康度 (0-100%)
     - 各子系统健康度
     - 关键指标

  2. 性能指标:
     - CPU/内存/磁盘使用
     - 响应时间
     - 吞吐量

  3. 最近事件:
     - 最近的错误
     - 最近的警告
     - 最近的操作

  4. 告警中心:
     - 活跃告警列表
     - 告警历史
     - 告警统计

仪表板命令:
  /dashboard - 显示实时诊断仪表板
  /dashboard [module] - 显示特定模块仪表板
  /alerts - 查看告警列表
  /notifications - 查看通知列表
```

---

## 诊断流程总结

```
用户执行诊断
    ↓
收集系统信息
    ↓
执行各模块检查
    ↓
汇总检查结果
    ↓
生成问题列表
    ↓
分析问题原因
    ↓
生成修复建议
    ↓
执行自动修复 (可选)
    ↓
生成诊断报告
    ↓
更新系统状态
```

---

**核心原则**: 透明诊断，主动预防，快速修复。