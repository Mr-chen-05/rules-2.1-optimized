---
type: "supporting_rule"
description: "Context Recorder Edge Cases (记录员边界情况) - 边界情况和错误处理"
globs: ["**/*"]
priority: 916
alwaysApply: false
parent: "context-recorder-core.mdc"

# Version Management
version: "3.0.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"
---

# 🛡️ Context Recorder Edge Cases (记录员边界情况处理)

> **模块说明**: 本文件包含边界情况处理、异常恢复和极端场景应对

## 相关模块
- `context-recorder-core.mdc` - 核心定义和主要规则
- `context-recorder-templates.mdc` - 模板定义
- `context-recorder-advanced.mdc` - 高级功能

---

## 字符编码处理

### 编码支持
\`\`\`yaml
支持的编码格式:
  - UTF-8 (默认推荐)
  - UTF-16
  - ISO-8859-1
  - GBK/GB18030 (中文)
  - ASCII
\`\`\`

### 编码检测和转换
\`\`\`yaml
自动检测流程:
  1. 读取文件首字节检查BOM
  2. 分析文本特征确定编码
  3. 尝试UTF-8解码
  4. 若失败，尝试其他编码
  5. 最后使用 ISO-8859-1

编码转换规则:
  输入时:
    - 自动检测输入编码
    - 转换为UTF-8内部表示
    - 保留原始编码信息
  
  输出时:
    - 统一使用UTF-8输出
    - 对特殊字符进行转义
    - 保持可读性

错误处理:
  - 编码错误时使用替代字符 (U+FFFD)
  - 记录编码错误到日志
  - 提示用户检查文件编码
\`\`\`

---

## 时间戳精度

### 时间戳格式
\`\`\`yaml
标准格式: YYYY-MM-DD HH:MM:SS.mmm ±TIMEZONE
示例: 2025-01-31 14:30:45.123 +08:00

精度要求:
  秒级: 正常操作 (标准)
  毫秒级: 高精度需求 (可选)
  微秒级: 性能敏感操作 (不推荐)
\`\`\`

### 时间戳验证
\`\`\`yaml
检查项:
  - 格式是否符合标准
  - 年月日是否有效
  - 小时分钟秒是否有效
  - 时区偏移是否正确

时间戳顺序检查:
  - 同一操作内时间戳必须递增
  - 不同操作的时间戳应合理
  - 检测到时间逆转时发出警告

系统时间校准:
  - 定期与NTP服务器同步
  - 检测到系统时间跳跃时告警
  - 时间异常时使用递增逻辑时间
\`\`\`

---

## 特殊字符处理

### 特殊字符分类
\`\`\`yaml
控制字符 (ASCII 0-31, 127):
  - 处理: 转义或删除
  - 示例: \\n, \\t, \\r

Unicode 补充字符:
  - 处理: 使用代理对表示
  - 范围: U+10000 到 U+10FFFF

零宽字符:
  - 零宽空格 (U+200B)
  - 零宽连接符 (U+200D)
  - 处理: 删除或标记

方向标记:
  - RTL标记 (U+202E)
  - LTR标记 (U+202D)
  - 处理: 保留，用于多语言支持
\`\`\`

### 特殊字符转义
\`\`\`yaml
在JSON中:
  - " → \\"
  - \\ → \\\\
  - \\n → \\\\n
  - \\t → \\\\t

在URL中:
  - 使用百分比编码 (%XX)

在Markdown中:
  - * → \\*
  - [ → \\[
  - _ → \\_
\`\`\`

---

## 大文件处理

### 大文件定义
\`\`\`yaml
文件分类:
  - 普通文件: < 10MB
  - 大文件: 10MB - 100MB
  - 超大文件: > 100MB
\`\`\`

### 处理策略
\`\`\`yaml
分块处理:
  块大小: 512KB
  处理流程:
    1. 打开文件流
    2. 逐块读取数据
    3. 处理每个块
    4. 累积结果
    5. 关闭文件流

内存优化:
  - 不一次性加载整个文件
  - 使用流式处理
  - 及时释放已处理数据

进度跟踪:
  - 显示处理进度百分比
  - 估计剩余时间
  - 允许用户取消操作
\`\`\`

---

## 并发访问处理

### 并发场景
\`\`\`yaml
常见场景:
  1. 多个用户同时写入
  2. 一个用户读，另一个用户写
  3. 多个AI实例同时操作
  4. 系统维护与用户操作冲突
\`\`\`

### 锁机制
\`\`\`yaml
文件锁:
  - 共享锁 (读操作)
  - 独占锁 (写操作)
  - 获取时间: 操作开始
  - 释放时间: 操作完成

锁超时:
  - 默认: 30秒
  - 超时后: 自动释放并记录错误
  - 防止死锁
\`\`\`

### 冲突解决
\`\`\`yaml
写写冲突:
  - 先到先得
  - 后续操作者收到"资源被锁定"错误
  - 重试机制: 最多重试3次，每次延迟1秒

读写冲突:
  - 读操作不阻塞其他读
  - 写操作必须等待所有读完成
  - 写操作会阻塞新的读操作
\`\`\`

---

## 备份和恢复机制

### 备份策略
\`\`\`yaml
自动备份:
  - 频率: 每小时一次
  - 保留: 最近7天的备份
  - 大小限制: 总计最多500MB

手动备份:
  - 用户可随时触发 /backup 命令
  - 备份时添加标签和描述
  - 手动备份永久保留
\`\`\`

### 备份存储
\`\`\`yaml
位置: .backup/ 目录
命名: {timestamp}_{label}.backup
格式: 压缩存档（gzip）
\`\`\`

### 恢复流程
\`\`\`yaml
步骤:
  1. 列出可用备份
  2. 选择目标备份
  3. 验证备份完整性
  4. 创建恢复前快照
  5. 执行恢复
  6. 验证恢复结果

恢复验证:
  - 检查文件完整性
  - 验证数据一致性
  - 检查所有区块完整
  - 确认没有数据丢失
\`\`\`

---

## 日志记录完整性

### 日志类型
\`\`\`yaml
操作日志 (.context-operations.log):
  - 记录所有操作
  - 包含时间戳、操作者、操作类型

错误日志 (.context-errors.log):
  - 记录所有错误和异常
  - 包含堆栈跟踪和上下文信息

审计日志 (.context-audit-log):
  - 记录权限检查和安全操作
  - 用于合规性审查

性能日志 (.context-performance.log):
  - 记录操作性能指标
  - 用于性能分析和优化
\`\`\`

### 日志轮换
\`\`\`yaml
大小限制: 单个日志文件 <= 100MB
时间限制: 每天午夜轮换
保留策略: 最多保留30个日志文件

日志压缩:
  - 老日志自动gzip压缩
  - 保留最近7天未压缩
  - 压缩日志后缀: .gz
\`\`\`

---

## 缓存管理

### 缓存类型
\`\`\`yaml
内存缓存 (L1):
  - 最近访问的文件内容
  - 大小限制: 100MB
  - TTL: 5分钟

磁盘缓存 (L2):
  - 处理过的数据快照
  - 大小限制: 500MB
  - TTL: 1小时
\`\`\`

### 缓存失效
\`\`\`yaml
主动失效:
  - 文件被修改时
  - 配置更改时
  - 明确调用 /clear-cache

被动失效:
  - TTL过期
  - 容量满时删除最旧项
  - 周期性验证 (每1小时)
\`\`\`

---

## 数据验证框架

### 验证规则
\`\`\`yaml
结构验证:
  - 所有必需字段存在
  - 字段类型正确
  - 嵌套结构有效

内容验证:
  - 字符串长度限制
  - 数值范围检查
  - 日期合理性检查

业务逻辑验证:
  - 引用有效性
  - 状态转换合法性
  - 权限一致性
\`\`\`

### 验证失败处理
\`\`\`yaml
处理方式:
  - 拒绝无效数据
  - 记录验证错误
  - 提示用户纠正
  - 可选的自动修复
\`\`\`

---

## 完整性检查

### 检查维度
\`\`\`yaml
结构完整性:
  - 所有必需区块存在
  - 区块内容格式有效

数据完整性:
  - 无重复条目
  - 无悬空引用
  - 关联关系一致

一致性检查:
  - 主备文件同步
  - 版本号一致
  - 时间戳递增
\`\`\`

### 检查触发时机
\`\`\`yaml
触发时机:
  - 系统启动时
  - 加载新文件时
  - 大操作后
  - 定期检查 (每6小时)
  - 用户手动请求
\`\`\`

### 检查结果处理
\`\`\`yaml
处理方式:
  通过: 正常继续
  警告: 记录并继续，提示用户
  错误: 中止操作，要求修复
  致命: 阻止系统启动，需要恢复
\`\`\`

---

## 异常场景处理

### 磁盘空间不足
\`\`\`yaml
检测:
  - 操作前检查可用空间
  - 最小要求: 100MB

处理:
  - 清理临时文件
  - 压缩归档文件
  - 提示用户清理空间
  - 如无法继续，优雅退出
\`\`\`

### 权限不足
\`\`\`yaml
检测:
  - 检查文件读写权限
  - 检查目录创建权限

处理:
  - 尝试请求权限提升
  - 建议用户手动调整权限
  - 提供详细的权限错误信息
  - 记录权限问题到日志
\`\`\`

### 网络中断
\`\`\`yaml
场景: 远程模板拉取失败

处理:
  1. 使用本地缓存模板
  2. 回退到内置模板
  3. 记录网络错误
  4. 稍后自动重试
\`\`\`

---

**记录员边界情况处理 v3.0 - 健壮可靠、优雅降级**

*相关模块: core | templates | advanced*
