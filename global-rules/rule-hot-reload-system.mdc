---
type: "global_rule"
description: "规则热更新机制 - 实时监控规则变化，动态加载更新，无需重启系统"
globs: ["**/*"]
priority: 942
alwaysApply: true

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "P2-16: 新增规则热更新机制"
      - "实现文件监控和动态加载"
      - "建立安全验证和回滚机制"
---

# 🔄 规则热更新系统

> **动态演进**: 规则无缝更新，系统持续运行，零停机时间，极致用户体验。

## 一、更新触发机制

### 1.1 文件监控

监控范围:
  目标目录:
    - .rules/ (所有规则文件)
    - global-rules/ (全局规则源)
    - project-rules/ (项目规则源)
  
  监控文件类型:
    - *.mdc (规则定义文件)
    - main.md (规则索引文件)
    - *.yaml (配置文件)

监控事件:
  文件修改:
    - 内容变化检测
    - 修改时间更新
    - 文件大小变化
  
  文件操作:
    - 新增文件
    - 删除文件
    - 重命名文件
    - 移动文件
  
  元数据变化:
    - 权限修改
    - 属性变化
    - frontmatter更新

监控实现:
  技术方案:
    - 文件系统监控API
    - 定期轮询检查
    - 哈希值对比
    - 修改时间戳
  
  监控频率:
    - 实时监控: 文件系统事件
    - 定期检查: 每30秒
    - 完整扫描: 每5分钟

### 1.2 触发条件

自动触发:
  文件内容变化:
    - 规则逻辑修改
    - 优先级调整
    - 配置参数变更
    - 元数据更新
  
  结构变化:
    - 新增规则文件
    - 删除规则文件
    - 目录结构调整
  
  立即生效条件:
    - P0级规则变更
    - 安全规则更新
    - 紧急修复补丁

手动触发:
  用户命令:
    - /reload-rules: 重新加载所有规则
    - /reload-rule [filename]: 重新加载指定规则
    - /reload-priority [level]: 重新加载指定优先级规则
  
  管理操作:
    - 规则发布命令
    - 配置更新命令
    - 系统维护命令

延迟触发:
  批量更新:
    - 检测到连续修改
    - 延迟5秒统一更新
    - 避免频繁重载
  
  计划更新:
    - 指定时间触发
    - 低峰期更新
    - 维护窗口执行

### 1.3 变更检测

哈希对比:
  文件指纹:
    - 计算文件MD5/SHA256
    - 与缓存哈希对比
    - 检测内容变化
  
  增量检测:
    - 仅检查修改文件
    - 跳过未变化文件
    - 优化检测性能

内容分析:
  结构化diff:
    - frontmatter变化
    - 规则内容变化
    - 优先级变更
    - 依赖关系变化
  
  影响评估:
    - 变更范围
    - 影响模块
    - 兼容性
    - 风险等级

版本追踪:
  版本号比对:
    - 读取version字段
    - 对比当前版本
    - 识别升级/降级
    - 兼容性检查

## 二、更新流程

### 2.1 变更检测阶段

文件扫描:
  步骤1 - 收集变更:
    - 列出所有变化文件
    - 记录变更类型
    - 提取变更内容
  
  步骤2 - 计算哈希:
    - 为每个文件计算哈希
    - 与缓存对比
    - 确认实际变更
  
  步骤3 - 识别影响:
    - 分析变更范围
    - 识别依赖关系
    - 评估影响面

### 2.2 验证检查阶段

语法验证:
  frontmatter检查:
    - YAML格式正确
    - 必需字段存在
    - 字段类型正确
    - 值范围合法
  
  内容验证:
    - Markdown格式
    - 代码块语法
    - 链接有效性
    - 引用正确性

优先级验证:
  冲突检查:
    - 检测重复优先级
    - 验证范围合法性
    - 确认层级正确
  
  范围验证:
    - P0: 1100-1200
    - P1: 1000-1099
    - P2: 900-999
    - P3: 800-899
    - P4: 700-799
    - P5: 600-699
    - P6: 500-599
    - P7: 300-499

依赖检查:
  引用验证:
    - 检查文件引用
    - 验证规则引用
    - 确认依赖存在
  
  循环检测:
    - 检测循环依赖
    - 识别死锁风险
    - 建议修复方案

版本兼容性:
  兼容性检查:
    - 系统版本要求
    - API版本匹配
    - 功能支持验证
  
  breaking changes:
    - 检测破坏性变更
    - 警告不兼容
    - 提供迁移建议

### 2.3 安全评估阶段

风险评级:
  低风险更新:
    - 文档修改
    - 注释变更
    - 格式调整
    - 非功能性更新
  
  中风险更新:
    - 逻辑优化
    - 参数调整
    - 功能增强
    - 性能优化
  
  高风险更新:
    - 核心逻辑变更
    - 安全规则修改
    - 优先级重大调整
    - 破坏性变更

影响分析:
  影响范围:
    - 受影响的模块
    - 关联的规则
    - 依赖的系统
    - 潜在的副作用
  
  回滚预案:
    - 备份当前版本
    - 准备回滚数据
    - 测试回滚流程
    - 确认恢复方案

用户确认:
  自动应用:
    - 低风险更新
    - 文档类变更
    - 优化类修改
  
  请求确认:
    - 中风险更新
    - 功能性变更
    - 配置调整
  
  强制确认:
    - 高风险更新
    - 安全相关
    - 核心逻辑
    - 需详细说明

### 2.4 应用更新阶段

加载策略:
  热加载:
    - 不中断当前任务
    - 新任务使用新规则
    - 平滑过渡
  
  温加载:
    - 等待当前任务完成
    - 切换到新规则
    - 最小影响
  
  冷加载:
    - 完全重启系统
    - 重新加载所有规则
    - 最彻底更新

更新顺序:
  优先级顺序:
    1. P0核心安全规则
    2. P1核心身份规则
    3. P2智能系统规则
    4. P3-P7其他规则
  
  依赖顺序:
    - 被依赖的先更新
    - 依赖者后更新
    - 独立规则并行更新

原子操作:
  事务机制:
    - 所有更新成功或全部回滚
    - 中间状态不可见
    - 确保一致性
  
  状态管理:
    - 记录更新进度
    - 支持断点续传
    - 故障自动恢复

### 2.5 验证生效阶段

功能测试:
  自动测试:
    - 规则加载测试
    - 优先级测试
    - 依赖关系测试
    - 基本功能测试
  
  测试结果:
    - 全部通过: 更新成功
    - 部分失败: 回滚变更
    - 全部失败: 紧急回滚

一致性检查:
  规则一致性:
    - 优先级无冲突
    - 依赖关系正确
    - 引用有效
    - 版本匹配
  
  数据一致性:
    - 配置同步
    - 状态一致
    - 缓存更新

性能验证:
  性能对比:
    - 加载时间
    - 响应速度
    - 资源使用
    - 错误率
  
  性能下降:
    - >20%: 警告
    - >50%: 建议回滚
    - >100%: 强制回滚

## 三、回滚机制

### 3.1 自动回滚

触发条件:
  更新失败:
    - 验证失败
    - 加载错误
    - 依赖冲突
    - 语法错误
  
  严重问题:
    - 系统崩溃
    - 性能骤降
    - 功能失效
    - 安全漏洞

回滚流程:
  步骤1 - 检测失败:
    - 捕获错误
    - 分析原因
    - 决定回滚
  
  步骤2 - 恢复备份:
    - 从备份恢复规则
    - 重新加载旧版本
    - 恢复配置
  
  步骤3 - 验证恢复:
    - 功能测试
    - 性能验证
    - 确认正常
  
  步骤4 - 记录日志:
    - 失败原因
    - 回滚过程
    - 当前状态

### 3.2 手动回滚

用户命令:
  /rule-rollback:
    功能: 回滚规则更新
    参数:
      --to [version]: 回滚到指定版本
      --file [filename]: 回滚指定文件
      --last: 回滚到上一版本
    
    确认:
      - 显示变更详情
      - 用户明确确认
      - 执行回滚
      - 验证结果

回滚验证:
  完整性检查:
    - 文件完整
    - 格式正确
    - 功能正常
  
  功能验证:
    - 关键功能测试
    - 依赖关系验证
    - 性能检查

### 3.3 回滚日志

记录内容:
  回滚信息:
    - 回滚时间
    - 回滚原因
    - 回滚版本
    - 受影响规则
  
  影响分析:
    - 丢失的功能
    - 降级的性能
    - 需要的补偿

## 四、更新策略

### 4.1 批量更新

合并策略:
  检测窗口:
    - 监测连续修改
    - 5秒内的变更
    - 合并为一次更新
  
  批量处理:
    - 一次验证所有
    - 一次应用所有
    - 事务性更新

优化处理:
  并行验证:
    - 独立规则并行
    - 加速验证过程
    - 提高效率
  
  增量更新:
    - 只更新变化部分
    - 保持未变化规则
    - 最小化影响

### 4.2 增量更新

变更追踪:
  差异识别:
    - 精确定位变更
    - 最小更新范围
    - 保留未变化
  
  部分更新:
    - 只重载变化规则
    - 其他规则不动
    - 高效更新

### 4.3 版本管理

版本快照:
  自动快照:
    - 每次更新前创建
    - 记录完整状态
    - 支持任意版本恢复
  
  快照内容:
    - 所有规则文件
    - 配置文件
    - 版本信息
    - 变更历史

版本历史:
  历史记录:
    - 版本号
    - 更新时间
    - 变更内容
    - 更新者
    - 回滚状态
  
  历史查询:
    - /rule-history: 查看历史
    - /rule-diff [v1] [v2]: 对比版本
    - /rule-info [version]: 版本详情

## 五、监控和通知

### 5.1 更新监控

监控指标:
  成功率:
    - 更新成功数
    - 更新失败数
    - 回滚次数
    - 成功率趋势
  
  性能指标:
    - 更新耗时
    - 验证时间
    - 加载速度
    - 资源消耗
  
  错误统计:
    - 错误类型
    - 错误频率
    - 错误影响
    - 修复状态

实时监控:
  监控面板:
    - 当前规则版本
    - 更新状态
    - 错误告警
    - 性能指标
  
  告警机制:
    - 更新失败告警
    - 性能下降告警
    - 频繁回滚告警
    - 异常模式告警

### 5.2 用户通知

更新通知:
  重要更新:
    - 弹窗提醒
    - 详细说明
    - 影响范围
    - 操作建议
  
  一般更新:
    - 界面提示
    - 简要说明
    - 后台更新
  
  静默更新:
    - 无需通知
    - 自动应用
    - 日志记录

变更摘要:
  内容:
    - 变更规则列表
    - 新增功能
    - 修复问题
    - 注意事项
  
  格式:
    - Markdown格式
    - 清晰分类
    - 易于阅读

## 六、配置选项

### 6.1 更新配置

启用/禁用:
  hot_reload_enabled: true/false
    - true: 启用热更新
    - false: 禁用热更新，需手动重载

监控配置:
  monitor_interval: 30
    - 单位: 秒
    - 默认: 30秒
    - 范围: 10-300秒
  
  batch_window: 5
    - 单位: 秒
    - 默认: 5秒
    - 用于合并连续修改

自动更新:
  auto_apply_low_risk: true
    - 自动应用低风险更新
  
  auto_apply_medium_risk: false
    - 中风险更新需确认
  
  auto_apply_high_risk: false
    - 高风险更新必须确认

回滚配置:
  auto_rollback_on_failure: true
    - 失败时自动回滚
  
  keep_backup_versions: 10
    - 保留备份版本数
  
  backup_location: ".backup/rules/"
    - 备份存储位置

### 6.2 通知配置

通知级别:
  notification_level: "important"
    - all: 所有更新通知
    - important: 仅重要更新
    - critical: 仅关键更新
    - none: 无通知

通知方式:
  notification_methods:
    - popup: 弹窗通知
    - inline: 界面提示
    - log: 日志记录

## 七、最佳实践

### 7.1 开发建议

规则开发:
  - 小步快走，频繁提交
  - 充分测试再部署
  - 做好版本标注
  - 写清变更日志

风险控制:
  - 关键时段禁用自动更新
  - 重要变更手动触发
  - 准备回滚预案
  - 监控更新效果

测试验证:
  - 本地充分测试
  - 沙箱环境验证
  - 灰度发布策略
  - 监控关键指标

### 7.2 运维建议

监控告警:
  - 配置合理告警阈值
  - 及时响应告警
  - 分析告警模式
  - 持续优化规则

备份策略:
  - 定期验证备份
  - 测试恢复流程
  - 保留足够版本
  - 异地备份重要版本

性能优化:
  - 减少不必要的监控
  - 优化验证流程
  - 批量处理更新
  - 异步执行非关键操作

---

**🔥 持续演进**: 规则热更新让系统始终保持最新状态，无需重启，极致体验！
