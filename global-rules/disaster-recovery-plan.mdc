---
type: "global_rule"
description: "灾难恢复计划 - 应对数据丢失、系统故障和安全事件的完整恢复策略"
globs: ["**/*"]
priority: 945
alwaysApply: true

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "P2-15: 新增灾难恢复计划"
      - "定义灾难场景分类和恢复策略"
      - "建立备份机制和恢复流程"
---

# 🚨 灾难恢复计划

> **韧性保障**: 面对意外情况，确保系统能够快速恢复，最大限度减少数据丢失和服务中断。

## 一、灾难场景分类

### 1.1 数据丢失类

项目记忆文件损坏:
  严重程度: 🔴 高
  影响范围:
    - project.context.md 完全损坏
    - 部分内容不可读
    - 关键区块缺失
    - 元数据错误
  
  恢复优先级: P0
  恢复目标时间 (RTO): <5分钟
  恢复点目标 (RPO): <15分钟

配置文件误删:
  严重程度: 🟠 中
  影响范围:
    - .rules/ 目录被删除
    - MCP配置丢失
    - 模板文件缺失
    - 脚本文件丢失
  
  恢复优先级: P1
  恢复目标时间: <10分钟
  恢复点目标: <1小时

重要决策记录丢失:
  严重程度: 🟡 中-低
  影响范围:
    - Decisions区块为空
    - TODO项目丢失
    - Notes内容缺失
  
  恢复优先级: P2
  恢复目标时间: <30分钟
  恢复点目标: <4小时

用户数据意外清除:
  严重程度: 🔴 高
  影响范围:
    - 代码文件被删
    - 项目文件丢失
    - 敏感信息泄露
  
  恢复优先级: P0
  恢复目标时间: 立即
  恢复点目标: <5分钟

### 1.2 系统故障类

超级大脑系统崩溃:
  严重程度: 🔴 高
  症状表现:
    - 激活流程失败
    - Context记录无响应
    - Memory系统错误
    - 推荐引擎失效
  
  恢复策略:
    1. 检测崩溃原因
    2. 重置系统状态
    3. 重新激活
    4. 验证功能

MCP工具全部失效:
  严重程度: 🔴 高
  症状表现:
    - 文件操作失败
    - GitHub连接中断
    - Memory无法访问
    - 所有工具超时
  
  恢复策略:
    1. 检查MCP配置
    2. 重启MCP服务
    3. 降级到基础模式
    4. 手动操作辅助

规则加载失败:
  严重程度: 🟠 中
  症状表现:
    - .rules目录不可读
    - 规则文件损坏
    - 优先级冲突
    - 语法错误
  
  恢复策略:
    1. 验证规则文件
    2. 修复语法错误
    3. 解决冲突
    4. 重新加载

死循环或无限递归:
  严重程度: 🟠 中
  症状表现:
    - 系统hang住
    - CPU 100%
    - 内存持续增长
    - 无响应
  
  恢复策略:
    1. 强制中断
    2. 识别循环点
    3. 修复逻辑
    4. 添加保护

### 1.3 安全事件类

敏感信息泄露:
  严重程度: 🔴 高
  事件类型:
    - 密码/Token泄露
    - API密钥暴露
    - 个人信息公开
    - 内部数据外泄
  
  响应流程:
    1. 立即停止操作
    - 撤销已泄露内容
    - 轮换密钥/Token
    - 通知相关方
    - 安全审计

未授权操作执行:
  严重程度: 🟠 中-高
  事件类型:
    - 权限绕过
    - 强制执行
    - 恶意命令
    - 数据篡改
  
  响应流程:
    1. 撤销操作
    2. 恢复数据
    3. 封锁漏洞
    4. 审计日志
    5. 权限加固

恶意规则注入:
  严重程度: 🟠 中
  事件类型:
    - 规则文件被篡改
    - 恶意代码注入
    - 后门植入
  
  响应流程:
    1. 隔离受影响规则
    2. 从备份恢复
    3. 扫描所有规则
    4. 验证完整性
    5. 加强防护

权限绕过:
  严重程度: 🔴 高
  事件类型:
    - Level 0规则被绕过
    - 安全边界突破
    - 强制执行危险操作
  
  响应流程:
    1. 立即终止会话
    2. 记录详细日志
    3. 修复漏洞
    4. 加强验证
    5. 安全审计

## 二、预防措施

### 2.1 自动备份机制

备份策略:
  实时备份:
    - 触发时机: 每次修改前
    - 备份对象: 被修改的文件
    - 保留策略: 最近3个版本
    - 存储位置: .backup/realtime/
  
  定时备份:
    - 触发时机: 每小时一次
    - 备份对象: 所有上下文文件
    - 保留策略: 24小时内每小时一份
    - 存储位置: .backup/hourly/
  
  每日备份:
    - 触发时机: 每天凌晨2点
    - 备份对象: 完整项目状态
    - 保留策略: 最近7天
    - 存储位置: .backup/daily/
  
  每周归档:
    - 触发时机: 每周日凌晨
    - 备份对象: 完整项目快照
    - 保留策略: 最近4周
    - 存储位置: .backup/weekly/

备份内容:
  必须备份:
    - project.context.md
    - context.archive*.md (所有归档文件)
    - .rules/ 目录
    - templates/ 目录
    - 用户代码文件
  
  可选备份:
    - .logs/ 目录
    - .data/ 目录
    - 临时文件
  
  不备份:
    - node_modules/
    - .git/
    - 编译产物
    - 缓存文件

备份验证:
  完整性检查:
    - 文件哈希验证
    - 大小合理性
    - 可读性测试
    - 结构完整性
  
  定期测试:
    - 每周恢复测试
    - 随机抽样验证
    - 完整性报告
    - 问题修复

### 2.2 数据完整性保护

修改前验证:
  pre_write_check:
    - 文件是否存在
    - 是否有写权限
    - 内容格式正确
    - 无冲突修改
  
  创建检查点:
    - 记录当前状态
    - 生成操作ID
    - 记录修改意图
    - 准备回滚数据

原子操作:
  写入策略:
    1. 写入临时文件
    2. 验证临时文件
    3. 原子性替换
    4. 清理临时文件
  
  失败处理:
    - 自动回滚
    - 保留原文件
    - 记录错误
    - 通知用户

版本控制:
  版本追踪:
    - 每次修改生成版本
    - 记录修改时间
    - 记录修改者
    - 记录修改原因
  
  版本对比:
    - 支持版本diff
    - 快速回滚
    - 选择性恢复
    - 合并操作

数据校验:
  格式验证:
    - YAML frontmatter
    - Markdown结构
    - JSON格式
    - 文件编码
  
  逻辑验证:
    - 引用有效性
    - 数据一致性
    - 完整性约束
    - 业务规则

### 2.3 监控和检测

健康检查:
  定期检查:
    - 每5分钟检查一次
    - 文件完整性
    - 系统状态
    - 服务可用性
  
  检查项目:
    - 关键文件存在性
    - 文件可读写性
    - 格式正确性
    - 大小合理性

异常检测:
  实时监控:
    - 文件异常修改
    - 权限异常变化
    - 大小异常变化
    - 访问异常模式
  
  告警触发:
    - 立即告警
    - 详细日志
    - 自动响应
    - 人工介入

审计追踪:
  完整记录:
    - 所有文件操作
    - 权限变更
    - 配置修改
    - 系统事件
  
  日志保留:
    - 操作日志: 30天
    - 安全日志: 永久
    - 性能日志: 7天
    - 审计日志: 90天

## 三、恢复流程

### 3.1 快速恢复 (< 5分钟)

适用场景:
  - 单个文件损坏
  - 最近修改错误
  - 轻微数据丢失

恢复步骤:
  步骤1 - 识别问题:
    - 确认损坏文件
    - 评估影响范围
    - 选择恢复点
  
  步骤2 - 停止操作:
    - 暂停所有写操作
    - 锁定受影响文件
    - 记录当前状态
  
  步骤3 - 恢复文件:
    - 从最近备份恢复
    - 验证文件完整性
    - 解锁文件
  
  步骤4 - 验证结果:
    - 文件可读性
    - 内容正确性
    - 功能正常性
  
  步骤5 - 恢复操作:
    - 解除写锁定
    - 继续正常工作
    - 记录恢复日志

恢复命令:
  /recover-last-version [filename]:
    功能: 恢复到最近一个版本
    确认: 需要用户确认
    影响: 丢失最近修改

### 3.2 完整恢复 (< 30分钟)

适用场景:
  - 多个文件损坏
  - 系统配置错误
  - 中度数据丢失

恢复步骤:
  步骤1 - 评估损坏:
    - 列出所有受影响文件
    - 评估数据丢失程度
    - 确定恢复策略
  
  步骤2 - 选择恢复点:
    - 查看备份列表
    - 选择合适时间点
    - 预估恢复影响
  
  步骤3 - 备份当前状态:
    - 即使损坏也备份
    - 便于后续分析
    - 防止进一步丢失
  
  步骤4 - 执行恢复:
    - 批量恢复文件
    - 修复配置
    - 重建索引
  
  步骤5 - 重建缺失:
    - 补全丢失内容
    - 修复损坏部分
    - 验证一致性
  
  步骤6 - 全面测试:
    - 功能测试
    - 数据验证
    - 性能检查

恢复命令:
  /restore-from-backup [timestamp]:
    功能: 从指定时间点恢复
    确认: 需要详细确认
    影响: 恢复后的修改丢失

### 3.3 灾难性恢复 (< 2小时)

适用场景:
  - 系统完全损坏
  - 大规模数据丢失
  - 安全事件后恢复

恢复步骤:
  步骤1 - 激活应急预案:
    - 通知相关人员
    - 启动应急团队
    - 记录事件详情
  
  步骤2 - 损失评估:
    - 全面检查系统
    - 评估数据丢失
    - 分析影响范围
    - 确定恢复策略
  
  步骤3 - 数据抢救:
    - 尝试恢复残留数据
    - 从日志重建
    - 合并多个备份
    - 最大化数据保留
  
  步骤4 - 系统重建:
    - 从归档恢复
    - 重新安装规则
    - 恢复配置
    - 重建索引
  
  步骤5 - 数据恢复:
    - 恢复项目记忆
    - 恢复用户数据
    - 恢复关键文件
    - 验证完整性
  
  步骤6 - 功能验证:
    - 全面功能测试
    - 性能验证
    - 安全检查
    - 用户验收
  
  步骤7 - 事后分析:
    - 根因分析
    - 改进措施
    - 文档更新
    - 预防机制

应急联系:
  技术支持: support@agentrules.com
  安全团队: security@agentrules.com
  紧急热线: 400-XXX-XXXX

## 四、数据抢救

### 4.1 部分损坏恢复

损坏检测:
  文件扫描:
    - 读取文件内容
    - 识别损坏区域
    - 标记可用部分
  
  结构分析:
    - 解析文件结构
    - 识别完整区块
    - 提取有效数据

数据提取:
  可用部分:
    - 提取完整区块
    - 保存到临时文件
    - 验证数据有效性
  
  重建策略:
    - 从备份补全
    - 从日志重建
    - 智能推断缺失
    - 用户确认补全

合并操作:
  多源合并:
    - 合并多个备份
    - 取最新有效数据
    - 解决冲突
    - 验证一致性

### 4.2 历史版本合并

版本对比:
  差异分析:
    - 对比多个版本
    - 识别变更
    - 提取增量
  
  智能选择:
    - 选择最佳版本
    - 合并关键内容
    - 保留重要修改

合并算法:
  三路合并:
    - 基准版本
    - 版本A
    - 版本B
    - 智能合并
  
  冲突解决:
    - 自动解决简单冲突
    - 标记复杂冲突
    - 用户手动解决

### 4.3 日志重建

日志分析:
  操作重放:
    - 分析操作日志
    - 重放有效操作
    - 跳过失败操作
    - 重建数据
  
  一致性保证:
    - 验证操作顺序
    - 检查依赖关系
    - 确保数据一致

部分重建:
  增量重建:
    - 从最近备份开始
    - 重放后续操作
    - 达到最新状态
  
  验证重建:
    - 数据完整性
    - 逻辑一致性
    - 功能正常性

## 五、恢复命令

### 5.1 用户命令

/disaster-recover:
  功能: 灾难恢复向导
  流程:
    1. 诊断灾难类型
    2. 列出可用备份
    3. 预览恢复后状态
    4. 用户确认恢复
    5. 执行恢复
    6. 验证和报告
  
  选项:
    --quick: 快速恢复模式
    --full: 完整恢复模式
    --test: 测试模式（不实际恢复）

/list-backups:
  功能: 列出所有可用备份
  输出:
    - 备份时间
    - 备份类型
    - 文件大小
    - 完整性状态
    - 包含内容
  
  选项:
    --recent [N]: 最近N个备份
    --date [DATE]: 指定日期的备份

/verify-integrity:
  功能: 验证系统完整性
  检查:
    - 文件存在性
    - 格式正确性
    - 数据一致性
    - 引用有效性
  
  输出:
    - 完整性评分
    - 问题列表
    - 修复建议

/create-backup:
  功能: 手动创建备份
  范围:
    --full: 完整备份
    --context: 仅上下文文件
    --config: 仅配置文件
  
  输出:
    - 备份路径
    - 备份大小
    - 包含文件列表

### 5.2 系统命令

自动恢复触发:
  条件检测:
    - 文件损坏
    - 写入失败
    - 系统异常
  
  自动响应:
    1. 立即停止操作
    2. 评估损坏程度
    3. 选择恢复策略
    4. 执行恢复
    5. 验证结果
    6. 通知用户

健康检查:
  定期执行:
    - 每5分钟
    - 检查关键文件
    - 验证系统状态
    - 记录健康度
  
  问题响应:
    - 自动修复轻微问题
    - 告警中等问题
    - 人工介入严重问题

## 六、预防培训

### 6.1 最佳实践

操作规范:
  - 重要操作前备份
  - 使用版本控制
  - 定期验证备份
  - 测试恢复流程

风险意识:
  - 识别高危操作
  - 谨慎执行删除
  - 验证操作结果
  - 及时发现问题

应急准备:
  - 熟悉恢复命令
  - 了解备份位置
  - 掌握基本修复
  - 知道求助渠道

### 6.2 定期演练

演练计划:
  月度演练:
    - 模拟数据丢失
    - 执行恢复流程
    - 验证恢复效果
    - 总结改进点
  
  季度演练:
    - 模拟灾难场景
    - 全面恢复测试
    - 团队协作演练
    - 更新应急预案

---

**🛡️ 防患未然**: 完善的备份和恢复机制，确保系统韧性和数据安全！
