---
type: "supporting_rule"
description: "Context Recorder Advanced (记录员高级功能) - 性能优化和智能增强"
globs: ["**/*"]
priority: 917
alwaysApply: false
parent: "context-recorder-core.mdc"

# Version Management
version: "3.0.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"
---

# ⚡ Context Recorder Advanced (记录员高级功能)

> **模块说明**: 本文件包含性能优化、智能增强和高级功能配置

## 相关模块
- `context-recorder-core.mdc` - 核心定义和主要规则
- `context-recorder-templates.mdc` - 模板定义
- `context-recorder-edge-cases.mdc` - 边界情况处理

---

## 智能化增强功能

### 项目类型自动识别
\`\`\`yaml
检测规则:
  文件结构分析:
    - package.json → frontend
    - pom.xml → backend
    - pyproject.toml → python
    - Cargo.toml → rust
  
  技术栈识别:
    - React/Vue → frontend
    - Spring/Django → backend
    - Express → backend
    - Next.js → fullstack
  
  目录结构:
    - src/components → frontend
    - src/main/java → backend
    - src/pages → frontend
    - api/ → backend

自动配置:
  - 根据项目类型加载对应模板区块
  - 设置合适的归档策略和触发条件
  - 配置相关的集成工具和监控指标
\`\`\`

### 智能标签系统
\`\`\`yaml
自动标签生成:
  技术标签:
    - 基于依赖文件分析
    - 识别主要框架和库
    - 标记编程语言
  
  状态标签:
    - 基于项目进度
    - 活动频率分析
    - 开发阶段识别
  
  团队标签:
    - 提交记录分析
    - 协作模式识别
    - 团队规模评估

标签管理:
  - 动态更新: 随项目发展自动调整
  - 权重计算: 基于使用频率
  - 关联推荐: 相似项目标签模式
\`\`\`

### 质量评分机制
\`\`\`yaml
评分维度:
  内容完整性 (权重 30%):
    - 必填字段完成度 (10分)
    - 描述详细程度 (10分)
    - 格式规范性 (10分)
  
  证据充分性 (权重 25%):
    - 链接有效性 (10分)
    - 证据完整性 (10分)
    - 可追溯性 (5分)
  
  时效性 (权重 25%):
    - 更新频率 (10分)
    - 信息新鲜度 (10分)
    - 版本标记 (5分)
  
  关联性 (权重 20%):
    - 任务依赖标记 (5分)
    - 决策追溯链 (5分)
    - 问题关联 (10分)

总分计算:
  最终评分 = 维度1*0.3 + 维度2*0.25 + 维度3*0.25 + 维度4*0.2
  评分范围: 0-100分
  等级划分:
    90-100: ⭐⭐⭐⭐⭐ 优秀
    70-89:  ⭐⭐⭐⭐ 良好
    50-69:  ⭐⭐⭐ 一般
    30-49:  ⭐⭐ 较差
    0-29:   ⭐ 极差

评分透明化:
  - 每次评分时输出详细计算过程
  - 显示各维度得分和权重
  - 标记导致低分的具体原因
  - 提供具体的改进建议
\`\`\`

### 关联关系管理
\`\`\`yaml
自动关联检测:
  任务依赖:
    - 基于描述和时间序列分析
    - 识别前置任务和后置任务
    - 标记依赖关系链
  
  决策影响:
    - 分析决策对后续任务的影响
    - 追踪决策执行情况
    - 评估决策效果
  
  问题关联:
    - 识别相似问题
    - 关联解决方案
    - 建立知识库

关系可视化:
  - 依赖图谱: 显示任务和决策的依赖关系
  - 影响分析: 评估变更的潜在影响范围
  - 历史追溯: 追踪决策和问题的演化过程
\`\`\`

---

## 性能优化

### 大文件处理优化
\`\`\`yaml
文件大小检测:
  操作前检查:
    - 读取文件前先获取文件大小
    - 如果文件 > 1MB，启用分块处理模式
    - 记录文件大小到操作日志

分块操作策略:
  区块定位:
    - 使用正则表达式 /^## / 定位区块边界
    - 只读取需要修改的目标区块内容
    - 保持其他区块完全不变
  
  内存优化:
    - 优先使用增量更新工具
    - 避免全文件重写
    - 处理完成后立即释放内存
    - 使用流式处理
\`\`\`

### 缓存机制
\`\`\`yaml
三级缓存策略:
  L1 - 内存缓存:
    - 最近访问的文件内容
    - 最多3个文件
    - 5分钟有效
    - 失效: 会话结束或30分钟无活动
  
  L2 - 解析缓存:
    - 区块结构解析结果
    - 避免重复解析
    - 失效: 文件修改或24小时过期
    - 版本控制: 基于文件哈希
  
  L3 - 模板缓存:
    - 远程模板本地缓存
    - 24小时有效期
    - 失效: 模板更新或7天过期
    - 智能预热: 根据使用频率

缓存性能优化:
  - 缓存命中率监控（目标>85%）
  - 自动清理低频访问缓存
  - 内存压力下的优雅降级
  - 缓存统计和性能报告
\`\`\`

### 并发安全机制
\`\`\`yaml
文件锁机制:
  锁文件检查:
    - 操作前检查 .context.lock 文件
    - 锁文件格式: JSON (进程ID、时间戳、操作类型)
    - 存在活跃锁: 等待30秒或提示重试
  
  锁定流程:
    1. 创建 .context.lock 文件
    2. 写入当前操作信息
    3. 执行文件操作
    4. 操作完成后删除锁文件
  
  超时处理:
    - 默认操作: 30秒
    - 大文件操作: 60秒
    - 归档操作: 120秒
    - 超时后自动释放锁

原子操作保障:
  安全写入策略:
    1. 操作前自动备份
    2. 使用临时文件修改
    3. 验证文件格式和完整性
    4. 原子性重命名替换
    5. 失败时自动恢复备份
  
  备份管理:
    - 保留最近3个备份
    - 命名: .project.context.backup.1, .2, .3
    - 成功操作后轮转备份
\`\`\`

---

## 错误恢复与回滚

### 错误检测
\`\`\`yaml
自动检测条件:
  - 文件格式验证失败
  - 必要区块缺失或损坏
  - 操作中断或异常终止
  - 文件大小异常变化
\`\`\`

### 恢复策略
\`\`\`yaml
自动恢复:
  1. 检测到错误立即停止
  2. 从最近的备份恢复
  3. 记录错误原因和恢复过程
  4. 通知用户恢复结果

手动回滚:
  - /rollback --to backup1 (回滚到指定备份)
  - /rollback --steps 1 (回滚指定步数)
  - /rollback --auto (自动选择最佳回滚点)
\`\`\`

### 操作日志
\`\`\`yaml
记录内容:
  - 操作时间戳和类型
  - 文件变更前后大小
  - 操作成功/失败状态
  - 错误信息和恢复动作

日志文件: .context-operations.log
保留期限: 30天
\`\`\`

---

## 敏感信息保护

### 敏感信息识别
\`\`\`yaml
检测类型:
  API密钥和凭证:
    - 模式: /api[_-]?key|apikey|api.?secret/i
    - 处理: 脱敏为 [REDACTED]
  
  密码和认证:
    - 模式: /password|passwd|pwd|secret|credential/i
    - 处理: 完全移除或替换
  
  令牌和授权码:
    - 模式: /token|authorization|bearer|jwt/i
    - 处理: 保留前4个字符 + ****
  
  数据库连接:
    - 模式: /(mysql|postgresql|mongodb):[\/\/]?/
    - 处理: 移除密码部分，保留结构
\`\`\`

### 脱敏规则
\`\`\`yaml
脱敏等级:
  Critical (0分):
    - API密钥、密码、令牌
    - 处理: [REDACTED]
    - 完全移除，不保留特征
  
  High (1分):
    - 数据库连接信息
    - 处理: user:****@host:port/db
    - 保留结构，移除认证信息
  
  Medium (2分):
    - 个人身份信息
    - 处理: ****-****-****-1234
    - 保留部分特征便于追踪
  
  Low (3分):
    - 服务器IP
    - 处理: 203.***.***.**
    - 保留头部便于识别网段
\`\`\`

### 安全日志
\`\`\`yaml
日志文件: .context-security-log
记录内容 (不包含具体敏感值):
  - 时间戳
  - 检测到的敏感信息类型
  - 发现位置 (文件、行号、区块)
  - 脱敏处理方式
  - 操作者身份 (User/AI)

日志保留: 最多3个月
定期审核: 生成月度安全报告
\`\`\`

---

## 监控和告警

### 性能监控
\`\`\`yaml
监控指标:
  系统健康:
    - 平均响应时间
    - 错误率
    - 资源使用率
  
  数据质量:
    - 数据完整性
    - 一致性检查结果
    - 异常数据比例
\`\`\`

### 告警规则
\`\`\`yaml
立即告警 (Critical):
  - 无法访问主文件
  - 数据损坏检测
  - 权限冲突

高优先级 (High):
  - 响应时间 > 1秒
  - 错误率 > 1%
  - 磁盘使用 > 80%

普通告警 (Medium):
  - 响应时间 > 500ms
  - 缓存命中率 < 50%
  - 日志文件 > 50MB
\`\`\`

---

## 插件和扩展

### 扩展点
\`\`\`yaml
数据处理扩展:
  - 自定义验证规则
  - 自定义转换逻辑

输出格式扩展:
  - 自定义报告格式
  - 自定义导出格式

存储扩展:
  - 支持不同存储后端
  - 支持云存储集成

通知扩展:
  - 自定义告警通知
  - 第三方集成
\`\`\`

### 插件管理
\`\`\`
/plugin-list - 列出已安装插件
/plugin-install [url] - 安装插件
/plugin-uninstall [name] - 卸载插件
/plugin-config [name] - 配置插件
\`\`\`

---

**记录员高级功能 v3.0 - 智能化、高性能、可扩展**

*相关模块: core | templates | edge-cases*
