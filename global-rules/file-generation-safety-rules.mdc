---
type: "always_apply"
description: "文件生成安全规则 - 强制性用户确认机制，防止AI未经授权生成文件"
globs: ["**/*"]
alwaysApply: true
priority: 1200

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "Add version management system"
      - "Standardize rule file structure"
---

# 🚨 文件生成安全规则（死命令）

## ⚠️ 核心安全原则

**绝对禁止规则：任何AI助手在执行文件生成操作前，必须获得用户明确确认！**

这是不可违反的核心安全机制，旨在防止AI助手在未经用户授权的情况下生成或修改文件。

## 🔒 强制确认的操作类型

### 📝 所有文件生成操作
以下操作**必须**先获得用户明确确认，无任何例外：

#### 代码文件
- `.js`, `.ts`, `.jsx`, `.tsx` - JavaScript/TypeScript文件
- `.vue`, `.svelte` - 前端框架组件文件  
- `.py`, `.java`, `.go`, `.rs`, `.php`, `.rb`, `.cs` - 后端代码文件
- `.html`, `.css`, `.scss`, `.sass`, `.less` - 样式和标记文件
- `.sql` - 数据库脚本文件

#### 配置文件
- `package.json`, `yarn.lock`, `pnpm-lock.yaml` - 包管理配置
- `tsconfig.json`, `jsconfig.json` - TypeScript/JavaScript配置
- `vite.config.js`, `webpack.config.js`, `rollup.config.js` - 构建工具配置
- `eslint.config.js`, `.prettierrc`, `stylelint.config.js` - 代码规范配置
- `docker-compose.yml`, `Dockerfile` - 容器化配置
- `requirements.txt`, `pom.xml`, `Cargo.toml`, `go.mod` - 依赖管理文件

#### 文档文件
- `README.md`, `CHANGELOG.md`, `LICENSE` - 项目文档
- API文档, 架构文档, 用户手册 - 技术文档
- 项目规划, 需求文档, 设计文档 - 项目管理文档

#### 项目结构文件
- 目录结构创建
- 脚手架文件生成
- 模板文件创建
- 示例代码文件

#### 部署和运维文件
- CI/CD配置文件 (`.github/workflows/`, `.gitlab-ci.yml`)
- 服务器配置文件 (`nginx.conf`, `apache.conf`)
- 监控配置文件
- 日志配置文件

#### 数据文件
- JSON, XML, YAML 数据文件
- 配置数据文件
- 测试数据文件
- 种子数据文件

## 🛡️ 执行前强制检查机制

### 检查清单
在调用任何 `write_to_file`, `replace_in_file`, 或其他文件操作工具前，AI助手必须确认：

- [ ] **用户明确指令**：用户是否明确表达了"开始开发"、"生成代码"、"创建文件"、"开始实现"等指令？
- [ ] **方案确认**：技术方案、架构设计、文件结构是否已经过用户确认？
- [ ] **内容说明**：即将生成的文件内容和作用是否已向用户详细说明？
- [ ] **影响理解**：用户是否理解文件生成对项目的影响？
- [ ] **权限确认**：用户是否具有在当前目录生成文件的权限和意愿？

### 确认方式
AI助手必须通过以下方式之一获得确认：

1. **直接询问**：
   ```
   "我准备为您生成以下文件：
   - src/components/UserCard.vue (用户卡片组件)
   - src/types/user.ts (用户类型定义)
   - package.json (项目配置文件)
   
   这些文件将实现用户卡片功能。请确认是否开始生成这些文件？"
   ```

2. **MCP反馈工具**：
   ```
   调用 interactive_feedback_mcp-feedback-enhanced 工具，
   详细说明即将生成的文件和原因，等待用户明确确认。
   ```

3. **方案展示**：
   ```
   先展示完整的技术方案和文件结构，
   明确询问用户是否同意开始实现。
   ```

## ⛔ 违规处理机制

### 违规行为定义
以下行为被视为违规：
- 在未获得用户确认的情况下直接生成文件
- 假设用户同意而跳过确认步骤
- 将需求描述误解为开发指令
- 在讨论阶段就开始生成代码文件

### 违规处理流程
如果AI助手违反了文件生成安全规则：

1. **立即停止**：停止所有文件生成操作
2. **承认错误**：向用户道歉并说明违规情况
3. **调用反馈**：使用反馈机制重新与用户沟通
4. **重新确认**：详细说明计划并等待明确指令
5. **记录教训**：将此次违规记录到 Recorder；如需语义检索可同步至 Memory（可选），以避免重复

### 示例处理话术
```
"抱歉，我刚才违反了文件生成安全规则，在未获得您明确确认的情况下
尝试生成文件。让我重新来：

我理解您希望创建一个用户管理系统。在开始生成任何代码文件之前，
请允许我先为您详细说明技术方案：

[详细方案说明...]

请确认：您是否希望我开始生成这些文件？"
```

## 🎯 用户指令识别标准

### 明确的开发指令（可以开始生成文件）
- "开始开发"、"开始实现"、"开始编码"
- "生成代码"、"创建文件"、"写代码"
- "按照这个方案实现"、"就这样做"
- "确认，开始"、"同意，执行"

### 需求讨论（不能生成文件）
- "我想要一个..."、"帮我设计..."
- "如何实现..."、"什么方案比较好..."
- "分析一下..."、"给我建议..."
- "我有个想法..."、"能不能..."

### 模糊指令（需要进一步确认）
- "帮我做一个..."
- "实现这个功能"
- "按照需求开发"
- "根据描述编写"

## 📋 最佳实践建议

### 对于AI助手
1. **保守原则**：当不确定时，选择询问而不是假设
2. **详细说明**：在请求确认时，详细说明将要生成的文件
3. **分步确认**：对于复杂项目，可以分阶段确认
4. **记录决策**：将用户的确认和偏好记录到 Recorder；如需语义检索可同步至 Memory（可选）

### 对于用户
1. **明确指令**：使用明确的开发指令，如"开始实现"
2. **详细需求**：提供详细的需求描述和技术偏好
3. **及时反馈**：对AI的确认请求及时回应
4. **分阶段确认**：对于大型项目，可以分阶段确认实现

## 🔧 技术实现

### 工具调用前检查
```javascript
// 伪代码示例
function beforeFileOperation(operation, filePath, content) {
    if (!userConfirmationReceived) {
        throw new Error("文件生成安全规则违规：未获得用户确认");
    }
    
    if (!isExplicitDevelopmentCommand(userInput)) {
        requestUserConfirmation(operation, filePath, content);
        return false;
    }
    
    return true;
}
```

### 确认状态管理
AI助手应该维护一个确认状态，跟踪：
- 用户是否已经给出明确的开发指令
- 哪些文件已经获得生成授权
- 当前处于讨论阶段还是实现阶段

## 📊 监控和审计

### 违规监控
- 记录所有文件生成操作
- 标记未经确认的操作尝试
- 统计违规频率和类型

### 审计报告
定期生成审计报告，包括：
- 文件生成操作统计
- 用户确认率
- 违规事件分析
- 改进建议

## 🔒 默认只读模式与冻结目录（新增，强制）

### **默认只读模式（Must）**
- **所有文件/脚本/配置改动，默认拒绝，除非用户明确授权。**
- **"启动超级大脑系统"等系统级命令，仅允许读操作与环境检测；不得触发任何写入或同步动作。**
- **需要修改时，必须逐项列出即将改动的文件清单与变更要点，并征得"明确同意"。**

### **冻结目录（Must）**
以下路径为冻结目录，未经逐项授权，禁止任何写入/重命名/删除：
- `mcp-scripts/`（含 `mcp-cross-platform-sync.ps1`）
- `global-rules/`（所有 `.mdc` 规则文件）
- `project-rules/`（所有 `.mdc` 规则文件）
- `install-scripts/`（含 `install-ultra.bat` 等安装脚本）
- `scripts/`（系统级脚本文件）

### **脚本执行白名单（Must）**
- **允许静默执行的仅限"检测/只读"动作：**
  - `mcp-scripts/mcp-cross-platform-sync.ps1 -Action detect|current`
  - 任何带有 `status`、`check`、`list`、`show` 参数的只读命令
- **明确禁止的自动动作（需逐项授权后才可执行）：**
  - `sync`、任何会写入 MCP 配置/本地脚本/系统配置的操作
  - 修改、删除、重命名系统文件的操作

### **强制确认模板（Must）**
每次准备变更时，助手必须给出：
1. **变更目标与原因**
2. **影响范围与回滚方式**  
3. **文件清单（含路径）**
4. **执行动作（新增/修改/删除/同步）**
5. **"是否授权执行（y/n）"**

### **操作分类管控**
- **白名单操作（可直接执行）**：
  - 项目代码开发（src/, components/, pages/ 等业务目录）
  - 文档编写（README.md, docs/ 等）
  - 依赖管理（package.json, requirements.txt 等）
  - Bug修复和功能开发

- **灰名单操作（需要授权）**：
  - 系统配置文件修改
  - MCP服务器配置变更
  - 构建脚本和部署配置

- **黑名单操作（绝对禁止）**：
  - 删除系统核心文件
  - 格式化或重置操作
  - 未经授权的批量修改

## 🎉 总结

这个文件生成安全规则是保护用户项目安全的重要机制。所有AI助手都必须严格遵循这些规则，确保在获得用户明确授权之前，绝不生成任何文件。

**新增的权限控制确保了系统级配置的安全性，同时保持了正常开发工作的流畅性。**

**记住：宁可多问一次，也不要未经授权就行动！**

## 🔒 上下文记录系统安全增强

### 敏感信息检测与保护
```yaml
自动检测规则:
  敏感信息模式:
    - API密钥: /(?:api[_-]?key|token)["\s:=]+([A-Za-z0-9+/]{20,})/i
    - 密码: /(?:password|pwd|secret)["\s:=]+([^\s"']+)/i
    - 邮箱: /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/
    - IP地址: /\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b/
    - 数据库连接: /(?:mongodb|mysql|postgres):\/\/[^\s]+/i
    - 私钥: /-----BEGIN [A-Z ]+PRIVATE KEY-----/
    - JWT令牌: /eyJ[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*/

处理策略:
  自动脱敏:
    - 保留前3位和后3位字符，中间用 *** 替换
    - 示例: "sk-abc***xyz" (API密钥脱敏)
    - 邮箱脱敏: "user***@domain.com"
    - IP脱敏: "192.168.***.***"

  安全提醒:
    - 在 Notes 区块自动添加: "⚠️ 检测到敏感信息已自动脱敏处理"
    - 记录敏感信息类型和检测时间
    - 建议用户检查是否有其他敏感信息泄露

  审计日志:
    - 记录到 .context-security.log 文件
    - 包含: 时间戳、信息类型、原始长度、脱敏后内容
    - 不记录原始敏感信息内容
```

### 访问控制与权限管理
```yaml
区块权限控制:
  权限级别:
    admin: 可修改所有区块 (Pinned, Decisions, TODO, Done, Notes)
    developer: 可修改 TODO, Done, Notes
    viewer: 只能查看，不能修改

  权限检查:
    - 每次写入操作前检查用户权限
    - Pinned 区块修改需要 admin 权限
    - Decisions 区块只允许追加，不允许删除
    - 无权限时自动降级处理或拒绝操作

操作审计:
  审计内容:
    - 所有修改操作的时间戳和操作者
    - 变更前后的内容对比
    - 权限检查结果和拒绝原因
    - 敏感信息检测和处理记录

  审计文件:
    - .context-audit.log (操作审计日志)
    - .context-security.log (安全事件日志)
    - 日志轮转: 每月归档，保留12个月
```

### 数据完整性验证
```yaml
格式验证:
  必要区块检查:
    - 确保所有标准区块存在 (Pinned, Decisions, TODO, Done, Notes)
    - 验证区块标题格式正确
    - 检查必要的元数据字段

  内容验证:
    - TODO 项目必须包含 ID 和状态
    - Done 项目必须包含证据链接
    - Decisions 必须包含时间戳
    - 验证 Markdown 格式正确性

  一致性检查:
    - TODO ID 唯一性验证
    - 时间戳格式一致性 (YYYY-MM-DD)
    - 引用链接有效性检查
    - 区块间关联关系验证

错误处理:
  验证失败处理:
    1. 立即停止写入操作
    2. 记录详细错误信息
    3. 尝试自动修复简单错误
    4. 无法修复时回滚到备份文件
    5. 通知用户验证失败原因
```

### 安全配置管理
```yaml
配置文件: .context-security-config.yaml
默认配置:
  敏感信息检测: enabled
  自动脱敏: enabled
  访问控制: disabled (默认关闭，需要手动启用)
  操作审计: enabled
  格式验证: enabled
  备份保留: 7天

安全策略:
  严格模式:
    - 启用所有安全检查
    - 拒绝任何可疑操作
    - 强制用户确认敏感操作

  宽松模式:
    - 仅启用基础安全检查
    - 允许自动修复简单错误
    - 记录但不阻止可疑操作

  自定义模式:
    - 用户可自定义检测规则
    - 可配置脱敏策略
    - 可设置权限级别
```

### 紧急响应机制
```yaml
安全事件分类:
  高危事件:
    - 检测到明文密码或私钥
    - 未授权的 Pinned 区块修改
    - 批量删除重要内容

  中危事件:
    - 检测到 API 密钥或令牌
    - 格式验证多次失败
    - 异常的大量修改操作

  低危事件:
    - 检测到邮箱或 IP 地址
    - 权限检查失败
    - 轻微的格式错误

响应策略:
  高危事件:
    1. 立即停止所有操作
    2. 自动备份当前状态
    3. 发送安全警报
    4. 要求用户确认继续操作

  中危事件:
    1. 记录安全日志
    2. 自动脱敏处理
    3. 通知用户注意安全
    4. 继续正常操作

  低危事件:
    1. 静默处理
    2. 记录到日志
    3. 定期汇总报告
```

**安全增强版本 v1.0 - 保护项目记忆的每一个细节**

---

## 🔐 MCP 工具权限管理系统 (新增)

### MCP 工具分类与权限

白名单工具 (可直接使用，部分操作需授权):
  
  文件系统工具 (server-filesystem | b-ideaProgram-projects | e-vue-projects):
    无需授权操作:
      - 读取文件 (read_file, read_text_file)
      - 列出目录 (list_directory)
      - 搜索文件 (search_files)
      - 获取文件信息 (get_file_info)
      - 目录树查看 (directory_tree)
    
    需要授权操作:
      - 写入文件 (write_file, edit_file)
      - 创建目录 (create_directory)
      - 移动文件 (move_file)
      - 批量操作 (read_multiple_files)
    
    禁止操作:
      - 删除文件 (需明确指令 + 二次确认)
      - 修改系统文件
      - 操作冻结目录
  
  GitHub 集成 (server-github):
    无需授权操作:
      - 查看仓库信息
      - 读取文件内容
      - 列出提交记录
      - 查看Issue和PR
      - 搜索代码
    
    需要授权操作:
      - 创建分支
      - 提交代码
      - 创建Issue
      - 创建PR
      - Fork仓库
    
    禁止操作:
      - 强制推送 (force push)
      - 删除分支
      - 合并到主分支 (需明确确认)
      - 修改仓库设置
  
  记忆系统 (server-memory):
    无需授权操作:
      - 读取知识图谱
      - 搜索节点
      - 查看实体信息
    
    需要授权操作:
      - 创建实体
      - 创建关系
      - 添加观察
      - 修改节点信息
    
    禁止操作:
      - 删除实体（需二次确认）
      - 批量删除
      - 存储敏感信息
  
  反馈增强 (mcp-feedback-enhanced):
    无需授权操作:
      - 显示反馈界面
      - 收集用户输入
      - 获取系统信息
    
    需要授权操作:
      - (无，用户主动交互)
    
    禁止操作:
      - (无特殊限制)
  
  知识库检索 (context7):
    无需授权操作:
      - 解析库ID
      - 获取文档
      - 搜索知识
    
    需要授权操作:
      - (无，只读工具)
    
    禁止操作:
      - (无，只读工具)

灰名单工具 (需要逐项授权):
  
  数据库工具 (MySQL_Server):
    所有操作需授权:
      - 执行SELECT查询 (需确认)
      - 执行INSERT/UPDATE (需确认 + 显示SQL)
      - 执行DELETE (需二次确认 + 显示影响范围)
      - 执行DDL (需二次确认 + 备份提醒)
    
    特殊保护:
      - DROP操作需输入表名确认
      - TRUNCATE需二次确认
      - 批量DELETE需显示影响行数
  
  Testsprite 测试工具:
    需要授权操作:
      - 初始化测试环境
      - 生成测试代码
      - 执行测试
      - 修改项目配置
    
    自动授权场景:
      - 用户明确说"开始测试"
      - 用户使用测试命令
  
  其他MCP服务器:
    默认策略:
      - 首次使用需说明功能
      - 写操作需授权
      - 敏感操作需二次确认

黑名单操作 (绝对禁止):
  
  系统级危险操作:
    - 格式化磁盘
    - 修改系统配置
    - 操作注册表（Windows）
    - 修改环境变量（除项目内）
    - 修改hosts文件
    - 操作系统服务
  
  数据库危险操作:
    - DROP DATABASE（除非明确且二次确认）
    - 无WHERE的DELETE
    - 无WHERE的UPDATE
    - 修改系统表
  
  版本控制危险操作:
    - git push --force 到主分支
    - git reset --hard（未备份）
    - 删除远程分支
    - 修改已推送的提交历史

### 权限检查流程

操作前检查:
  function check_mcp_permission(tool, operation, params):
      # 1. 检查工具类别
      tool_category = get_tool_category(tool)
      
      if tool_category == "blacklist":
          return DENY("该操作被永久禁止")
      
      # 2. 检查操作类型
      if operation in get_prohibited_operations(tool):
          return DENY("该工具的此操作被禁止")
      
      # 3. 检查是否需要授权
      if operation in get_auth_required_operations(tool):
          if not has_user_authorization(tool, operation):
              return REQUEST_AUTH(generate_auth_prompt(tool, operation, params))
      
      # 4. 检查冻结目录
      if is_file_operation(operation):
          target_path = params.get("path")
          if is_frozen_directory(target_path):
              return DENY("目标路径被冻结保护")
      
      # 5. 检查敏感信息
      if is_write_operation(operation):
          if contains_sensitive_data(params):
              return DENY("检测到敏感信息，拒绝操作")
      
      # 6. 全部通过
      return ALLOW()

授权请求模板:
  "🔒 MCP 工具授权请求
   
   工具名称: {tool_name}
   操作类型: {operation}
   操作说明: {description}
   
   📋 操作详情:
   {formatted_params}
   
   ⚠️ 影响范围:
   - 将修改: {affected_resources}
   - 可能影响: {potential_impacts}
   
   🛡️ 安全提示:
   {safety_warnings}
   
   是否授权此操作? (y/n)
   [y] 授权执行
   [n] 拒绝操作
   [d] 显示更多详情"

### 权限缓存机制

会话级授权缓存:
  # 避免重复询问相同操作
  authorization_cache = {
      "session_id": "sess_20251018_001",
      "cached_authorizations": [
          {
              "tool": "server-filesystem",
              "operation": "write_file",
              "scope": "project-memory/active/",
              "granted_at": "2025-10-18T10:30:00Z",
              "valid_until": "session_end",
              "conditions": ["no_sensitive_data", "not_frozen_dir"]
          }
      ]
  }
  
  缓存策略:
    单次授权: 仅本次操作有效
    会话授权: 本次会话内相同操作有效
    持久授权: 跨会话有效（仅限低风险操作）
    
  缓存失效:
    - 会话结束
    - 用户明确撤销
    - 操作条件变化
    - 检测到风险变化

### 审计日志

MCP操作审计:
  记录内容:
    - 时间戳
    - 工具名称
    - 操作类型
    - 参数详情
    - 授权状态
    - 执行结果
    - 用户决策
    
  日志文件:
    - .logs/mcp-operations.log
    - 每日轮转
    - 保留30天
    
  高危操作特别记录:
    - 单独日志: .logs/mcp-sensitive-ops.log
    - 永久保留
    - 包含完整上下文