---
type: "global_rule"
description: "错误恢复机制 - 系统级错误检测和自动恢复策略"
globs: ["**/*"]
priority: 940
alwaysApply: true

# Version Management
version: "2.6.0"
last_updated: "2025-10-18"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-18"
    changes:
      - "P2-6: 创建错误恢复机制系统"
      - "实现系统激活/文件操作/MCP工具故障恢复"
      - "添加备份机制和回滚策略"
---

# 🔄 错误恢复机制系统

> **智能恢复**: 自动检测错误并执行恢复策略，确保系统稳定运行

## 🎯 系统概述

错误恢复机制为规则系统提供三层保护：
1. **预防层**: 操作前验证和备份
2. **检测层**: 实时监控和异常识别
3. **恢复层**: 自动修复和降级策略

## 📋 恢复机制类型

### 1. 系统激活中断恢复

```yaml
检测方法:
  完整性检查:
    - 检查 project.context.md 存在性
    - 验证文件完整性（必需区块）
    - 检查元数据一致性
    - 验证文件大小和时间戳
  
  必需区块列表:
    - "项目元数据 (Project Metadata)"
    - "快速导航 (Quick Navigation)"
    - "置顶信息 (Pinned)"
    - "决策记录 (Decisions)"
    - "待办事项 (TODO)"
  
  完整性评分:
    计算公式: (存在的必需区块数 / 总必需区块数) * 100
    
恢复策略:
  完整性 100%:
    → 跳过激活
    → 输出: "✅ 系统已激活，上下文完整"
    → 继续正常工作流
  
  完整性 50-99%:
    → 补全缺失部分
    → 保留现有内容
    → 输出: "⚠️ 检测到部分缺失，已自动补全"
    → 执行增量更新
  
  完整性 <50%:
    → 备份现有文件
    → 重新激活系统
    → 输出: "🔄 系统损坏严重，执行完整重建"
    → 询问用户是否恢复备份
  
  完整性 0%:
    → 全新激活
    → 输出: "🆕 首次激活系统"
    → 创建完整项目记忆文件

中断恢复流程:
  1. 检测中断点:
     - 读取 .cache/activation-checkpoint.json
     - 识别上次失败的步骤
  
  2. 继续执行:
     - 从中断点继续
     - 跳过已完成步骤
     - 输出进度: "🔄 从步骤 X 继续..."
  
  3. 清理检查点:
     - 成功完成后删除检查点文件
     - 失败时保留供下次恢复
```

### 2. 文件操作失败恢复

```yaml
备份机制:
  自动备份:
    触发时机:
      - 修改 project.context.md 之前
      - 执行大规模文件操作之前
      - 用户明确请求时
    
    备份路径:
      - .backups/project.context.md.{timestamp}.bak
      - 保留最近 3 个版本
      - 超过 7 天的备份自动清理
    
    备份内容:
      - 完整文件内容
      - 文件元数据
      - 时间戳和校验和
  
  备份元数据:
    {
      "version": "1.0",
      "original_file": "project.context.md",
      "backup_time": "2025-10-18T10:30:00Z",
      "file_size": 15360,
      "checksum": "abc123def456...",
      "reason": "before_update",
      "can_auto_restore": true
    }

恢复命令:
  用户指令:
    - "/恢复上一版本" → 恢复最近的备份
    - "/查看备份历史" → 列出所有可用备份
    - "/恢复到 {timestamp}" → 恢复指定备份
    - "/手动回滚" → 交互式选择备份
  
  自动回滚:
    触发条件:
      - 文件操作失败
      - 文件损坏检测到
      - 写入操作异常
    
    回滚流程:
      1. 检测失败: catch exception
      2. 查找最近备份: 最新的 .bak 文件
      3. 验证备份完整性: checksum验证
      4. 执行回滚: 覆盖当前文件
      5. 通知用户: "🔄 操作失败，已自动回滚"
      6. 记录日志: 失败原因和恢复结果

失败处理流程:
  try {
    // 1. 创建备份
    backup_file = create_backup("project.context.md")
    
    // 2. 执行操作
    perform_file_operation()
    
    // 3. 验证结果
    if not validate_result():
      throw new Error("Operation validation failed")
    
    // 4. 操作成功，可选择删除备份
    if auto_cleanup:
      schedule_backup_cleanup(backup_file)
  
  } catch (error) {
    // 5. 操作失败，自动回滚
    log_error(error)
    restore_from_backup(backup_file)
    notify_user("🔄 操作失败，已回滚到安全状态")
    throw error  // 重新抛出供上层处理
  }
```

### 3. MCP 工具故障恢复

```yaml
故障检测:
  工具调用超时:
    - 默认超时: 30秒
    - 文件操作超时: 60秒
    - 网络操作超时: 120秒
    - 超时处理: 自动取消并切换备用方案
  
  工具返回错误:
    - 权限错误: 提示用户检查权限
    - 文件不存在: 尝试创建或使用备用路径
    - 网络错误: 重试 3 次，间隔递增
    - 语法错误: 记录详细信息并降级
  
  工具不可用:
    - 检测方法: 调用前验证工具存在
    - MCP服务器离线: 切换到基础工具
    - 工具版本不兼容: 使用兼容性包装器

恢复策略:
  自动切换备用工具:
    主工具 → 备用工具映射:
      mcp_filesystem → 内置 read_file/write_file
      mcp_memory → context_recorder 系统
      mcp_github → 手动git命令
      mcp_everything → 基础功能
    
    切换逻辑:
      if primary_tool_failed:
        log("工具故障: " + tool_name)
        backup_tool = get_backup_tool(tool_name)
        
        if backup_tool:
          log("切换到备用工具: " + backup_tool)
          return call_backup_tool(backup_tool, params)
        else:
          return manual_fallback(operation)
  
  降级到基础工具:
    高级功能 → 基础功能:
      - 智能检索 → 简单文本搜索
      - 语义分析 → 关键词匹配
      - 自动补全 → 模板填充
      - 跨项目检索 → 单项目查询
    
    降级提示:
      "⚠️ 高级功能暂时不可用，使用基础模式"
      "您的操作将以简化方式执行"
  
  手动模式提示:
    不可恢复的故障:
      → 提供详细错误信息
      → 建议手动操作步骤
      → 输出替代命令
      → 记录反馈供后续改进
    
    示例提示:
      "❌ 自动操作失败，建议手动执行以下步骤：
       1. 打开文件: project.context.md
       2. 找到 [TODO] 部分
       3. 添加以下内容: [具体内容]
       4. 保存文件"
```

## 🔍 错误检测机制

```yaml
实时监控:
  文件监控:
    - 监控 project.context.md 的修改
    - 检测文件大小异常变化
    - 验证文件格式完整性
    - 监控关键区块存在性
  
  操作监控:
    - 记录每次文件操作
    - 追踪操作成功率
    - 识别重复失败模式
    - 分析失败根本原因
  
  性能监控:
    - 操作响应时间
    - 资源使用情况
    - 缓存命中率
    - 错误发生频率

异常识别:
  文件异常:
    - 文件大小突然变为 0
    - 关键区块消失
    - 文件编码错误
    - 时间戳异常倒退
  
  操作异常:
    - 连续操作失败 (3次+)
    - 操作超时频繁发生
    - 返回数据格式错误
    - 权限突然被拒绝
  
  系统异常:
    - 内存使用激增
    - 磁盘空间不足
    - 进程响应停滞
    - 依赖服务不可用
```

## 📊 恢复日志和报告

```yaml
日志记录:
  错误日志:
    路径: .logs/error-recovery.log
    级别: ERROR, WARNING, INFO
    
    格式:
      [2025-10-18 10:30:00] [ERROR] 文件操作失败
      原因: Permission denied on project.context.md
      恢复: 自动回滚到 backup_20251018_103000.bak
      结果: 成功恢复
      耗时: 0.5秒
  
  恢复统计:
    记录内容:
      - 总错误次数
      - 成功恢复次数
      - 失败恢复次数
      - 平均恢复时间
      - 最常见错误类型
    
    统计报告:
      生成频率: 每周
      报告路径: .logs/recovery-report-weekly.md
      内容: 统计数据 + 改进建议

用户通知:
  恢复成功:
    "✅ 系统已自动恢复 (耗时: 0.5秒)"
    "📄 备份文件: .backups/project.context.md.20251018.bak"
  
  恢复失败:
    "❌ 自动恢复失败，需要手动干预"
    "📋 错误详情: [详细错误信息]"
    "💡 建议操作: [具体步骤]"
  
  预防提示:
    "⚠️ 检测到高风险操作，建议先备份"
    "💾 自动备份已创建: backup_20251018.bak"
```

## 🛡️ 预防措施

```yaml
操作前验证:
  文件操作:
    - 检查文件是否存在
    - 验证文件权限
    - 确保磁盘空间充足
    - 锁定文件防止并发修改
  
  工具调用:
    - 验证工具可用性
    - 检查参数有效性
    - 预估执行时间
    - 准备降级方案

风险评估:
  高风险操作:
    - 删除操作 → 必须备份
    - 大规模修改 → 分批执行
    - 不可逆操作 → 需要确认
    - 跨文件操作 → 事务处理
  
  风险提示:
    "⚠️ 此操作有风险，已自动创建备份"
    "🔒 操作将被锁定，防止并发冲突"

自动备份策略:
  触发规则:
    - 重要文件修改前
    - 批量操作开始前
    - 风险等级 >= HIGH
    - 用户明确请求
  
  备份优化:
    - 增量备份: 只备份变更部分
    - 压缩存储: 减少磁盘占用
    - 智能清理: 保留重要版本
    - 快速恢复: 优化读取性能
```

## 🔧 恢复命令

```yaml
用户命令:
  查看状态:
    - "/系统状态" → 显示当前系统健康度
    - "/错误历史" → 查看最近错误记录
    - "/恢复日志" → 显示恢复操作历史
  
  手动恢复:
    - "/恢复上一版本" → 恢复最近备份
    - "/查看备份" → 列出所有备份
    - "/恢复到 <时间戳>" → 恢复指定版本
    - "/强制重建" → 完全重建项目记忆
  
  系统维护:
    - "/清理备份" → 删除旧备份文件
    - "/验证完整性" → 检查文件完整性
    - "/修复系统" → 自动修复检测到的问题

自动执行:
  无需用户干预:
    - 自动备份
    - 自动回滚
    - 自动切换工具
    - 自动清理过期备份
  
  需要用户确认:
    - 完整系统重建
    - 删除重要备份
    - 修改配置文件
    - 不可逆操作
```

## 📝 集成说明

```yaml
与其他规则协调:
  context-recorder-system:
    - 调用备份机制
    - 使用完整性检查
    - 集成恢复命令
  
  permission-control-system:
    - 遵守权限规则
    - 记录操作审计
    - 验证用户授权
  
  audit-logging-system:
    - 写入恢复日志
    - 记录错误事件
    - 生成统计报告

最佳实践:
  开发建议:
    - 高风险操作前总是创建备份
    - 使用 try-catch 包裹文件操作
    - 验证操作结果
    - 记录详细错误信息
  
  用户建议:
    - 定期查看备份历史
    - 出现错误不要慌张
    - 信任自动恢复机制
    - 必要时手动干预
```

---

**💡 使用提示**: 错误恢复机制会在后台自动运行，大多数情况下无需手动干预。系统会在检测到错误时自动尝试恢复，并在恢复失败时提供详细的手动操作指引。
