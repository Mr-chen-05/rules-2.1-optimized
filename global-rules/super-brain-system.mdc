---
type: "global_rule"
description: "超级大脑系统 - 智能项目管理激活机制和核心功能"
globs: ["**/*"]
priority: 970
alwaysApply: false
dependencies: ["context-recorder-system.mdc"]
integrations: ["context-recorder-system", "intelligent-recommendation-engine"]

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "P1-10: 新增系统状态管理(第七章)"
      - "实现状态检测机制(完整性评分0-100%)"
      - "添加5级状态恢复策略"
      - "建立中断恢复机制(5步流程)"
      - "实现状态持久化和健康度监控"
      - "新增5个状态管理命令"
---

# 🧠 超级大脑系统

> **智能核心**: 集成项目管理、阶段控制、记忆系统和智能推荐的统一管理平台

## 🎯 系统定义

超级大脑系统是一个智能化的AI代理管理平台，整合了项目生命周期管理、智能决策支持、记忆系统和自动化工作流编排功能。

## 🚀 激活机制

### 触发词和激活规则

#### 激活触发词
```yaml
系统激活:
  完整触发词:
    - "启动超级大脑系统"
    - "启动智能项目管理"
    - "激活项目大脑"
    - "开启智能管理"
    - "启动AI项目助手"
  
  简化触发词:
    - "超级大脑"
    - "智能管理"
    - "项目大脑"
  
  状态查询:
    - "查看项目状态"
    - "项目进度如何"
    - "当前在哪个阶段"
    - "系统状态"
    - "大脑状态"
```

#### 触发词匹配策略
```yaml
匹配优先级:
  P1 - 严格完全匹配 (100% 置信度):
    - 完整触发词精确匹配
    - 立即激活系统
  
  P2 - 前缀/后缀匹配 (95% 置信度):
    - 触发词作为前缀: "启动超级大脑系统，我要..."
    - 触发词作为后缀: "我想启动超级大脑系统"
    - 立即激活系统
  
  P3 - 意图识别 (85% 置信度):
    - 动词+对象组合: 启动 + 项目 / 项目管理 / 大脑
    - 分析 + 项目需求 / 方案
    - 查询 + 项目状态 / 进度
    - 进入确认对话或激活系统
  
  P4 - 上下文判断 (需要验证):
    - 检查是否在代码块内 (跳过触发)
    - 检查是否为引用/示例 (跳过触发)
    - 检查用户意图是否明确 (模糊则确认)
```

### 激活响应模板
```yaml
激活成功响应:
  "🧠 超级大脑系统已激活！
   
   📊 系统状态: 运行中
   🎯 当前项目: [项目名称或'未设定']
   📋 当前阶段: [阶段信息或'待确定']
   💾 记忆状态: [已加载/空白]
   📝 记录员状态: [已集成/待激活]
   🔎 记忆策略: Recorder 优先，Memory 可选（按需联动）
   
   🤖 可用功能:
   • 智能阶段推荐 (/recommend)
   • 项目状态查询 (/status)
   • 阶段切换 (/switch [阶段号])
   • 记忆查看 (/memory) [可选]
   • 自动记录 (/brain-record)
   • 工具编排优化
   
   💡 请告诉我您的项目需求，我将为您提供最佳的管理方案！
   📝 所有决策和操作将自动记录到项目上下文中。"
```

### 执行约束 (新增)
```yaml
强制执行规则:
  触发词识别后:
    ✅ 必须做:
      - 立即开始激活流程
      - 直接执行状态检测
      - 显示标准激活响应
    
    ❌ 禁止做:
      - 重新读取本规则文件进行"二次确认"
      - 询问"是否需要启动"（触发词本身就是明确指令）
      - 解释"什么是超级大脑系统"（用户说启动，不是问是什么）
      - 等待额外确认（除非涉及文件创建需要安全规则）
  
  执行时限:
    - 识别触发词 → 开始执行：< 1秒
    - 完成检测 → 显示响应：< 5秒
```

### 常见执行错误（避免）
```yaml
❌ 错误示例1 - 重复验证:
  用户: "启动超级大脑系统"
  AI: "让我先读取规则文件确认一下..."  # ← 错误！规则已加载

✅ 正确示例1:
  用户: "启动超级大脑系统"
  AI: 立即执行检测 → 显示激活响应  # ← 正确！直接行动

❌ 错误示例2 - 过度解释:
  用户: "启动超级大脑系统"
  AI: "超级大脑系统是一个..."  # ← 错误！用户要的是启动

✅ 正确示例2:
  用户: "启动超级大脑系统"
  AI: "🧠 超级大脑系统已激活！..."  # ← 正确！直接响应

❌ 错误示例3 - 询问确认:
  用户: "启动超级大脑系统"
  AI: "您确定要启动吗？"  # ← 错误！触发词就是确认

✅ 正确示例3:
  用户: "启动超级大脑系统"
  AI: 直接执行激活流程  # ← 正确！无需二次确认
```

## 🎛️ 核心功能模块

### 1. 智能项目识别
```yaml
项目类型识别:
  Web应用:
    关键词: ["网站", "Web", "前端", "后端", "全栈"]
    推荐阶段: 需求分析
    技术栈: React/Vue + Node.js/Python
  
  移动应用:
    关键词: ["APP", "移动", "手机", "iOS", "Android"]
    推荐阶段: 需求分析
    技术栈: React Native/Flutter
  
  桌面应用:
    关键词: ["桌面", "客户端", "软件", "工具"]
    推荐阶段: 需求分析
    技术栈: Electron/Tauri
  
  数据分析:
    关键词: ["数据", "分析", "可视化", "报表"]
    推荐阶段: 需求分析
    技术栈: Python/R + 可视化库
  
  AI/ML项目:
    关键词: ["AI", "机器学习", "深度学习", "模型"]
    推荐阶段: 需求分析
    技术栈: Python + ML框架
```

### 2. 智能决策引擎
```yaml
决策支持:
  技术选型建议:
    - 基于项目类型和规模
    - 考虑团队技能和偏好
    - 评估维护成本和生态
  
  架构模式推荐:
    - 单体 vs 微服务
    - 前后端分离 vs 全栈
    - 云原生 vs 传统部署
  
  开发流程优化:
    - 敏捷 vs 瀑布模型
    - CI/CD 流水线设计
    - 测试策略制定
```

### 3. 自动化工作流编排
```yaml
MCP工具智能编排:
  工具选择策略:
    - 基于当前阶段自动选择最优工具
    - 考虑工具间的协同效应
    - 动态调整工具使用优先级
  
  执行优化:
    - 并行执行非依赖任务
    - 智能重试和错误恢复
    - 资源使用优化
  
  结果验证:
    - 自动质量检查
    - 输出结果验证
    - 异常情况处理
```

### 4. 学习和优化系统
```yaml
持续学习:
  模式识别:
    - 用户行为模式分析
    - 项目成功模式总结
    - 常见问题模式识别
  
  优化建议:
    - 基于历史数据的改进建议
    - 个性化工作流推荐
    - 效率提升方案
  
  知识积累:
    - 最佳实践库构建
    - 经验教训总结
    - 技术趋势跟踪
```

## 🔄 统一系统激活管理

### 激活逻辑统一
```yaml
统一入口:
  主触发词: "启动超级大脑系统"
  
  其他兼容触发词:
    - "启动智能项目管理"
    - "激活项目大脑"
    - "开启智能管理"
    - "启动AI项目助手"
    - "智能管理"
    - "项目大脑"
  
  状态查询:
    - "查看项目状态"
    - "项目进度如何"
    - "当前在哪个阶段"
    - "系统状态"

自动子系统激活:
  1. 记录员系统 (context-recorder-system.mdc)
  2. 项目管理系统 (intelligent-project-management.mdc)
  3. MCP工具策略 (mcp-intelligent-strategy.mdc)
  4. 工作流编排 (intelligent-workflow-orchestration.mdc - 企业级项目)
```

### 与记录员系统集成
```yaml
自动激活机制:
  1. 超级大脑系统启动时自动激活记录员系统
  2. 所有重大决策自动触发记录
  3. 阶段切换时自动归档当前状态
  4. 项目初始化时创建上下文文件

联动规则:
  决策记录: 技术选型、架构设计、阶段切换 → 自动记录
  任务跟踪: Git提交、模块完成、问题解决 → 自动更新
  状态同步: 项目进度、记忆状态、系统状态 → 实时同步
  
集成命令:
  - /brain-start: 同时激活超级大脑和记录员
  - /brain-status: 显示两个系统综合状态
  - /brain-record: 手动触发决策记录
  - /brain-archive: 阶段完成时综合归档
```

### 与项目管理系统集成
```yaml
集成要求:
  1. 自动检测项目管理规则激活状态
  2. 同步项目阶段和记忆信息
  3. 协调MCP工具使用策略
  4. 统一用户交互界面
```

### 与MCP工具集成
```yaml
工具编排原则:
  1. 优先使用高效工具组合
  2. 避免重复和冲突操作
  3. 智能错误处理和恢复
  4. 实时性能监控和优化
```

## 📊 状态监控

### 系统健康检查
```yaml
监控指标:
  - 响应时间和处理效率
  - 工具使用成功率
  - 用户满意度指标
  - 项目完成质量
  
告警机制:
  - 性能下降预警
  - 工具故障检测
  - 异常行为识别
  - 资源使用监控
```

### 用户反馈循环
```yaml
反馈收集:
  - 实时用户体验评分
  - 功能使用频率统计
  - 问题和建议收集
  - 改进效果评估
  
优化迭代:
  - 基于反馈的功能调整
  - 算法参数优化
  - 新功能开发优先级
  - 用户体验持续改进
```

## 🎯 使用指南

### 快速启动
1. 使用触发词激活系统
2. 描述项目需求和目标
3. 接受智能推荐的阶段和工具
4. 开始智能化项目管理

### 高级功能
1. 自定义项目模板
2. 个性化工作流配置
3. 团队协作模式设置
4. 性能监控和优化

### 最佳实践
1. 定期查看项目状态和进度
2. 及时响应系统推荐和建议
3. 积极提供反馈和改进意见
4. 充分利用记忆系统和历史经验

---

## 七、系统状态管理

### 7.1 状态检测机制

激活前状态检测:
  检测项目:
    - [ ] 检查 project-memory/active/project.context.md 存在性
    - [ ] 检查 project-memory/archives/ 目录存在性
    - [ ] 验证现有文件完整性
    - [ ] 检测上次激活状态
    - [ ] 识别中断激活场景
  
  完整性验证:
    必需区块检查:
      - 📌 置顶信息 (Pinned)
      - 🎯 决策记录 (Decisions)
      - 📝 待办事项 (TODO)
      - ✅ 已完成事项 (Done)
      - 📋 项目笔记 (Notes)
    
    元数据验证:
      - 项目类型字段
      - 创建时间字段
      - 最后修改时间
      - 模板版本字段
    
    完整性评分:
      100%: 所有必需区块和元数据完整
      80-99%: 缺少非关键区块或部分元数据
      50-79%: 缺少关键区块但主体存在
      <50%: 文件严重不完整或损坏
      0%: 文件不存在

### 7.2 状态恢复策略

恢复决策树:
  完整性 100%:
    → 系统已完整激活
    → 跳过激活流程
    → 显示当前状态
    → 提供状态刷新选项
  
  完整性 80-99%:
    → 系统部分激活
    → 补全缺失区块
    → 保留现有内容
    → 记录恢复操作
  
  完整性 50-79%:
    → 系统不完整激活
    → 询问用户选择:
      1. 补全修复（推荐）
      2. 重新激活
      3. 备份后重建
  
  完整性 <50%:
    → 系统激活失败
    → 备份现有文件
    → 提供重新激活
    → 记录失败原因
  
  完整性 0%:
    → 首次激活
    → 执行完整激活流程
    → 创建所有文件
    → 初始化系统状态

### 7.3 中断恢复机制

中断检测:
  检测标志:
    - 存在临时激活标记文件: .brain-activating
    - project.context.md 修改时间异常（创建后1分钟内未更新完成标记）
    - 归档文件存在但项目文件不存在
    - 文件大小异常（小于预期最小值）
  
  中断原因分析:
    - 用户手动中断 (Ctrl+C)
    - 系统崩溃或异常
    - 网络或IO错误
    - 权限不足
    - 磁盘空间不足

恢复流程:
  步骤1 - 检测中断:
    if exists(".brain-activating"):
      detect_interruption = True
      last_step = read_last_step_from_marker()
    
  步骤2 - 备份现场:
    if incomplete_files_exist():
      backup_dir = f"project-memory/backups/interrupted-{timestamp}/"
      backup_incomplete_files(backup_dir)
  
  步骤3 - 用户确认:
    "🔍 检测到系统激活被中断
     
     上次激活进度: [last_step]
     中断时间: [timestamp]
     
     恢复选项:
     1. 从中断点继续（推荐）
     2. 重新完整激活
     3. 取消并保持现状
     4. 清理并退出
     
     请选择 (1-4):"
  
  步骤4 - 执行恢复:
    选项1: resume_from_checkpoint(last_step)
    选项2: full_reactivation()
    选项3: keep_current_state()
    选项4: cleanup_and_exit()
  
  步骤5 - 清理标记:
    remove(".brain-activating")
    record_recovery_to_recorder()

### 7.4 状态持久化

激活检查点:
  checkpoint_structure:
    {
      "activation_id": "act_20251018_001",
      "start_time": "2025-10-18T10:30:00Z",
      "current_step": "creating_archive_file",
      "completed_steps": [
        "directory_creation",
        "project_context_creation"
      ],
      "pending_steps": [
        "archive_file_creation",
        "template_initialization",
        "final_verification"
      ],
      "state_data": {
        "project_name": "Agent",
        "project_type": "hybrid",
        "detected_tech_stack": "PowerShell, Markdown"
      }
    }
  
  检查点位置:
    - .brain-activating (激活进行中标记)
    - project-memory/.activation-state.json (详细状态)

### 7.5 状态管理命令

新增命令:
  /brain-status:
    功能: 显示超级大脑系统当前状态
    输出:
      - 激活状态 (已激活/未激活/部分激活)
      - 文件完整性评分
      - 各子系统状态
      - 最后激活时间
      - 健康度评分
  
  /brain-repair:
    功能: 修复系统状态问题
    流程:
      1. 诊断问题
      2. 生成修复方案
      3. 请求用户确认
      4. 执行修复
      5. 验证结果
  
  /brain-reset:
    功能: 完全重置系统状态
    警告: 将清除所有激活数据
    流程:
      1. 备份现有数据
      2. 确认用户意图（需输入项目名称确认）
      3. 清理所有文件
      4. 重新完整激活
  
  /brain-backup:
    功能: 创建系统状态备份
    输出: 备份文件路径
  
  /brain-restore:
    功能: 从备份恢复系统状态
    输入: 备份文件路径或时间点

### 7.6 健康度监控

健康度评估:
  评估维度:
    文件完整性 (30%):
      - 必需文件存在
      - 文件格式正确
      - 内容完整性
    
    数据一致性 (25%):
      - 元数据一致
      - 引用有效性
      - 时间戳合理
    
    功能可用性 (25%):
      - 记录系统正常
      - 推荐引擎可用
      - MCP工具就绪
    
    性能指标 (20%):
      - 响应速度
      - 资源使用
      - 错误率
  
  健康度等级:
    优秀 (90-100分): 🟢 系统运行完美
    良好 (75-89分): 🟡 系统基本正常
    一般 (60-74分): 🟠 建议进行检查
    较差 (40-59分): 🔴 需要立即修复
    危险 (<40分): ⚠️ 系统严重问题

自动修复:
  轻微问题:
    - 自动修复并记录
    - 无需用户干预
    - 后台静默处理
  
  中等问题:
    - 提示用户注意
    - 提供修复建议
    - 用户确认后修复
  
  严重问题:
    - 立即告警用户
    - 详细说明影响
    - 强制修复或重置

---

**🚀 立即体验**: 输入"启动超级大脑系统"开始您的智能项目管理之旅！