---
type: "global_rule"
description: "性能监控系统 - 实时监控系统性能指标，优化资源使用和响应速度"
globs: ["**/*"]
priority: 960
alwaysApply: true

# Version Management
version: "2.6.0"
last_updated: "2025-10-19"
author: "system"
status: "stable"
compatibility: "rule-system >= 2.0"

changelog:
  - version: "2.6.0"
    date: "2025-10-19"
    changes:
      - "P2-14: 新增性能监控系统"
      - "实现多维度性能监控"
      - "建立性能基准和告警机制"
---

# 📈 性能监控系统

> **实时洞察**: 全面监控系统性能，识别瓶颈，优化用户体验，确保系统高效运行。

## 一、监控维度

### 1.1 响应时间监控

用户请求响应:
  首次响应时间:
    - 目标: <2秒
    - 测量点: 用户输入完成 → AI首次输出
    - 监控频率: 每次请求
    - 异常阈值: >5秒
  
  完整响应时间:
    - 目标: 简单查询<5秒, 复杂任务<30秒
    - 测量点: 请求开始 → 任务完成
    - 监控频率: 每次请求
    - 异常阈值: >2倍预期时间

工具调用性能:
  MCP工具执行:
    - 文件读取: <500ms
    - 文件写入: <1秒
    - 目录操作: <200ms
    - GitHub API: <3秒
    - Memory操作: <1秒
  
  超时检测:
    - 轻度超时: >2倍正常时间
    - 严重超时: >5倍正常时间
    - 超时处理: 自动重试或降级

文件操作性能:
  读取性能:
    - 小文件(<1MB): <100ms
    - 中文件(1-10MB): <500ms
    - 大文件(>10MB): 分块读取
  
  写入性能:
    - 追加操作: <200ms
    - 完整写入: <500ms
    - 批量操作: <2秒

任务完成时间:
  按复杂度分类:
    - Level 1任务: <10秒
    - Level 2任务: <30秒
    - Level 3任务: <2分钟
    - Level 4任务: <5分钟
    - Level 5任务: <15分钟

### 1.2 资源使用监控

内存占用:
  正常范围:
    - 空闲状态: <100MB
    - 轻度使用: <300MB
    - 中度使用: <500MB
    - 重度使用: <1GB
  
  监控指标:
    - 当前内存使用
    - 内存使用峰值
    - 内存增长率
    - 内存泄漏检测
  
  告警阈值:
    - 警告: >800MB
    - 严重: >1.5GB
    - 危险: >2GB

CPU使用率:
  正常范围:
    - 空闲状态: <10%
    - 思考状态: 20-40%
    - 工具调用: 30-60%
    - 密集计算: 60-80%
  
  监控指标:
    - 当前CPU使用率
    - CPU使用峰值
    - 平均CPU使用率
    - CPU使用时长
  
  告警阈值:
    - 警告: 持续>70%超过30秒
    - 严重: 持续>90%超过10秒

磁盘IO:
  读取性能:
    - 正常: <50MB/s
    - 峰值: <100MB/s
    - 监控: 读取次数和总量
  
  写入性能:
    - 正常: <30MB/s
    - 峰值: <80MB/s
    - 监控: 写入次数和总量
  
  IO等待:
    - 正常: <5%
    - 警告: >15%
    - 严重: >30%

网络请求:
  请求统计:
    - API调用次数
    - 请求成功率
    - 平均响应时间
    - 带宽使用
  
  异常监控:
    - 连接超时
    - 请求失败率
    - 重试次数
    - 限流触发

### 1.3 系统指标监控

工具调用统计:
  成功率监控:
    - 目标: >99%
    - 监控: 成功/失败/超时
    - 分类统计: 按工具类型分组
  
  失败分析:
    - 失败原因分类
    - 失败频率趋势
    - 失败影响范围
    - 自动修复尝试

错误频率:
  错误分级:
    - 致命错误: 立即告警
    - 严重错误: 记录并通知
    - 一般错误: 记录日志
    - 警告信息: 定期汇总
  
  频率监控:
    - 每小时错误数
    - 错误率趋势
    - 错误类型分布
    - 错误恢复率

重试机制:
  重试统计:
    - 重试次数
    - 重试成功率
    - 平均重试时间
    - 最终失败率
  
  优化建议:
    - 高重试率操作识别
    - 重试策略调整
    - 超时阈值优化

缓存性能:
  命中率统计:
    - L1缓存: 目标>90%
    - L2缓存: 目标>80%
    - L3缓存: 目标>70%
  
  性能指标:
    - 缓存读取时间
    - 缓存更新时间
    - 缓存失效频率
    - 缓存大小控制

## 二、性能基准

### 2.1 响应时间基准

任务类型基准:
  简单查询:
    - 优秀: <2秒
    - 良好: 2-5秒
    - 一般: 5-10秒
    - 较慢: >10秒
  
  中等复杂度:
    - 优秀: <5秒
    - 良好: 5-15秒
    - 一般: 15-30秒
    - 较慢: >30秒
  
  复杂任务:
    - 优秀: <15秒
    - 良好: 15-60秒
    - 一般: 1-3分钟
    - 较慢: >3分钟

工具调用基准:
  常用工具:
    - read_file: <500ms
    - write_file: <1秒
    - grep: <2秒
    - codebase_search: <5秒
    - run_terminal_cmd: <3秒

### 2.2 资源使用基准

内存使用:
  目标范围:
    - 理想: <300MB
    - 正常: 300-500MB
    - 警告: 500-800MB
    - 异常: >800MB

CPU使用:
  目标范围:
    - 理想: <30%
    - 正常: 30-50%
    - 警告: 50-70%
    - 异常: >70%

磁盘IO:
  目标范围:
    - 理想: <50MB/s
    - 正常: 50-100MB/s
    - 警告: 100-200MB/s
    - 异常: >200MB/s

缓存命中:
  目标范围:
    - 优秀: >90%
    - 良好: 80-90%
    - 一般: 70-80%
    - 较差: <70%

## 三、监控实现

### 3.1 数据收集

实时采集:
  采集点:
    - 请求开始时刻
    - 工具调用前后
    - 任务完成时刻
    - 错误发生时刻
  
  数据结构:
    {
      "timestamp": "2025-10-19T10:30:00Z",
      "metric_type": "response_time|resource_usage|system_metric",
      "metric_name": "first_response_time",
      "value": 1.8,
      "unit": "seconds",
      "context": {
        "task_type": "code_generation",
        "complexity_level": 3,
        "user_id": "user_001"
      },
      "tags": ["performance", "critical"]
    }

采样策略:
  高频指标:
    - CPU使用率: 每5秒
    - 内存使用: 每10秒
    - 响应时间: 每次请求
  
  中频指标:
    - 磁盘IO: 每30秒
    - 网络请求: 每次调用
    - 缓存统计: 每分钟
  
  低频指标:
    - 系统健康: 每5分钟
    - 趋势分析: 每小时
    - 汇总报告: 每天

### 3.2 数据存储

存储层次:
  实时数据:
    - 位置: 内存缓存
    - 保留: 最近1小时
    - 用途: 实时监控面板
  
  短期数据:
    - 位置: .logs/performance.json
    - 保留: 最近7天
    - 用途: 趋势分析
  
  长期数据:
    - 位置: .logs/performance-archive/
    - 保留: 30天（压缩）
    - 用途: 历史对比

数据聚合:
  分钟级聚合:
    - 平均值
    - 最大值
    - 最小值
    - 第95百分位
  
  小时级聚合:
    - 趋势统计
    - 异常次数
    - 性能评分
  
  日级聚合:
    - 全天总结
    - 对比分析
    - 优化建议

### 3.3 数据分析

实时分析:
  异常检测:
    - 统计阈值: 超过基准的3个标准差
    - 趋势异常: 突然的性能下降
    - 模式异常: 与历史模式不符
  
  瓶颈识别:
    - 响应时间最长的操作
    - 资源使用最高的模块
    - 错误率最高的功能
    - 重试次数最多的调用

趋势分析:
  性能趋势:
    - 响应时间变化曲线
    - 资源使用趋势
    - 错误率变化
    - 用户满意度趋势
  
  容量规划:
    - 资源增长预测
    - 扩容建议时机
    - 优化优先级排序

根因分析:
  性能下降原因:
    - 代码变更影响
    - 数据量增长
    - 外部依赖变慢
    - 资源竞争
  
  关联分析:
    - 多指标联动
    - 时间相关性
    - 原因推断

## 四、性能优化

### 4.1 自动优化

智能缓存:
  缓存策略:
    - 慢操作自动缓存
    - LRU缓存淘汰
    - 预测性预加载
    - 智能失效机制
  
  缓存优化:
    - 热点数据识别
    - 缓存大小动态调整
    - 缓存穿透防护

并行化:
  任务并行:
    - 独立任务并发执行
    - 多文件并行读取
    - 批量操作优化
  
  资源调度:
    - 优先级队列
    - 资源分配优化
    - 负载均衡

预加载:
  智能预测:
    - 用户行为预测
    - 常用数据预加载
    - 上下文预热
  
  预加载策略:
    - 高频操作优先
    - 空闲时段预加载
    - 渐进式加载

资源释放:
  主动释放:
    - 不用的缓存清理
    - 临时文件删除
    - 内存及时释放
  
  垃圾回收:
    - 定期GC触发
    - 内存压力响应
    - 资源泄漏检测

### 4.2 告警机制

告警级别:
  性能下降:
    - 轻微: 响应时间增加20%
    - 中度: 响应时间增加50%
    - 严重: 响应时间增加100%
  
  资源超限:
    - 警告: 达到80%阈值
    - 严重: 达到90%阈值
    - 危险: 达到95%阈值
  
  异常频率:
    - 注意: 错误率>1%
    - 警告: 错误率>5%
    - 严重: 错误率>10%

告警通知:
  实时通知:
    - 严重问题: 立即弹窗
    - 中度问题: 界面提示
    - 轻微问题: 日志记录
  
  定期报告:
    - 每日性能摘要
    - 每周趋势报告
    - 每月优化建议

## 五、性能报告

### 5.1 实时面板

显示内容:
  核心指标:
    - 当前响应速度
    - 实时资源使用
    - 系统健康度
    - 错误率统计
  
  可视化:
    - 实时曲线图
    - 资源使用仪表盘
    - 性能评分表
    - 异常告警列表

更新频率:
  - 关键指标: 每5秒
  - 一般指标: 每30秒
  - 趋势图表: 每分钟

### 5.2 定期报告

日报内容:
  性能统计:
    - 平均响应时间
    - 资源使用峰值
    - 错误总数
    - 缓存命中率
  
  异常事件:
    - 性能告警次数
    - 超时事件
    - 错误详情
  
  优化建议:
    - 瓶颈识别
    - 优化方向
    - 预期效果

周报内容:
  趋势分析:
    - 性能变化曲线
    - 资源使用趋势
    - 用户体验评分
  
  对比分析:
    - 周环比变化
    - 性能改善点
    - 待优化项
  
  行动计划:
    - 下周优化重点
    - 容量规划
    - 技术债务

月报内容:
  全面评估:
    - 月度性能总结
    - 关键指标对比
    - 优化效果验证
  
  战略建议:
    - 架构优化方向
    - 资源投入建议
    - 长期规划

### 5.3 报告输出

报告位置:
  - 实时数据: .logs/performance.json
  - 日报: .logs/daily-performance-YYYYMMDD.md
  - 周报: .logs/weekly-performance-YYYYWW.md
  - 月报: .logs/monthly-performance-YYYYMM.md

报告格式:
  - Markdown格式
  - 包含图表链接
  - 可读性优化
  - 数据可导出

---

**🎯 性能目标**: 持续监控，及时优化，确保系统始终处于最佳状态！
