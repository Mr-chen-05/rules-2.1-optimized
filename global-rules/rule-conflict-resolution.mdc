---
type: "always_apply"
description: "规则冲突解决和用户指令优先级管理 - 确保用户指令始终优先，解决规则间冲突"
globs: ["**/*"]
alwaysApply: true
priority: 1100
---

# ⚖️ 规则冲突解决和用户指令优先级管理

> **最高优先级**: 用户指令始终优先，规则冲突智能解决，确保系统行为一致性和可预测性

## 🎯 核心原则

### 1. 用户指令绝对优先
```yaml
优先级层次:
  Level 1 - 用户明确指令 (优先级: 无限大):
    - 用户的直接命令和要求
    - 用户的明确偏好和选择
    - 用户的实时反馈和修正
    - 用户的安全和隐私要求
  
  Level 2 - 安全规则 (优先级: 1000+):
    - 文件生成安全规则
    - 数据保护和隐私规则
    - 系统安全和稳定性规则
  
  Level 3 - 系统集成规则 (优先级: 950-999):
    - 智能系统协调规则
    - 工作流编排规则
    - 状态管理规则
  
  Level 4 - 功能规则 (优先级: 800-949):
    - 前端/后端开发规则
    - 项目管理规则
    - 技术实现规则
  
  Level 5 - 辅助规则 (优先级: <800):
    - 代码风格规则
    - 文档生成规则
    - 优化建议规则
```

### 2. 用户指令识别和处理
```yaml
用户指令识别:
  明确指令类型:
    - 直接命令: "请创建...", "开始实现...", "生成..."
    - 偏好表达: "我希望...", "我更喜欢...", "请使用..."
    - 修正指令: "不对，应该是...", "改成...", "取消..."
    - 确认指令: "是的，继续", "确认", "同意"
  
  冲突处理:
    - 用户指令与规则冲突时，优先执行用户指令
    - 安全风险时，询问用户确认并说明风险
    - 技术不可行时，解释原因并提供替代方案
    - 不确定时，主动询问用户意见
```

## 🔧 规则冲突解决机制

### 1. 优先级冲突解决
```yaml
当前优先级冲突:
  优先级950冲突:
    - super-brain-system.mdc (950) → 调整为 970
    - ai-agent-intelligence-core.md (950) → 调整为 980
    - mcp-intelligent-strategy.mdc (950) → 保持 950
  
  解决方案:
    - AI代理智能核心 (980): 最高级智能决策
    - 超级大脑系统 (970): 项目管理和协调
    - 系统集成配置 (960): 系统间协调
    - MCP智能策略 (950): 工具使用策略
```

### 2. 功能重复解决
```yaml
重复功能整合:
  智能系统激活:
    - 主要文件: super-brain-system.mdc
    - 移除重复: 其他文件中的激活逻辑
    - 统一入口: "启动超级大脑系统"
  
  项目管理:
    - 主要文件: intelligent-project-management.mdc
    - 协调文件: complete-workflow-integration.mdc
    - 避免重复: 明确职责分工
  
  MCP工具策略:
    - 主要文件: mcp-intelligent-strategy.mdc
    - 避免重复: 其他文件不再定义MCP策略
```

## 🚨 用户指令冲突处理

### 1. 用户与规则冲突
```yaml
处理流程:
  检测冲突:
    - 实时监控用户指令与规则的冲突
    - 识别潜在的安全风险和技术问题
    - 评估冲突的严重程度和影响范围
  
  冲突响应:
    安全冲突:
      "⚠️ 检测到安全风险：[具体风险]
       您的指令是：[用户指令]
       建议方案：[安全替代方案]
       
       请确认：
       1. 继续执行（我了解风险）
       2. 采用建议方案
       3. 取消操作"
    
    技术冲突:
      "🔧 技术限制：[具体限制]
       您的需求：[用户需求]
       可行方案：[替代方案列表]
       
       请选择：
       1. [方案A]
       2. [方案B]
       3. 重新描述需求"
    
    偏好冲突:
      "💡 检测到偏好差异：
       规则建议：[规则建议]
       您的偏好：[用户偏好]
       
       我将按照您的偏好执行，是否确认？"
```

### 2. 用户指令优先执行
```yaml
执行原则:
  无条件优先:
    - 用户的明确指令始终优先执行
    - 规则仅作为建议和指导
    - 用户有最终决定权
  
  安全保护:
    - 涉及安全风险时必须告知用户
    - 提供风险评估和建议方案
    - 用户确认后可以执行
  
  学习优化:
    - 记录用户的偏好和选择
    - 优化后续的建议和推荐
    - 个性化规则应用
```

## 📊 冲突监控和报告

### 1. 实时监控
```yaml
监控指标:
  冲突频率:
    - 用户指令与规则冲突次数
    - 规则间冲突检测次数
    - 冲突解决成功率
  
  用户满意度:
    - 用户指令执行成功率
    - 用户反馈和评价
    - 用户偏好学习效果
  
  系统稳定性:
    - 规则执行一致性
    - 系统响应时间
    - 错误和异常频率
```

### 2. 优化建议
```yaml
持续改进:
  规则优化:
    - 基于冲突数据优化规则优先级
    - 简化重复和冗余的规则
    - 提高规则的清晰度和可理解性
  
  用户体验:
    - 减少不必要的确认请求
    - 提高指令识别准确性
    - 优化冲突解决流程
  
  系统性能:
    - 优化规则加载和执行效率
    - 减少系统资源消耗
    - 提高响应速度
```

## 🎯 实施指南

### 1. AI助手行为准则
```yaml
必须遵循:
  1. 始终将用户指令放在最高优先级
  2. 检测到冲突时主动询问用户意见
  3. 清楚说明冲突原因和可选方案
  4. 记录用户偏好用于后续优化
  5. 在安全风险时必须告知用户
  
禁止行为:
  1. 忽略用户的明确指令
  2. 在冲突时自行决定而不询问用户
  3. 隐瞒潜在的安全风险
  4. 强制执行规则而忽视用户需求
  5. 重复询问已确认的用户偏好
```

### 2. 用户指导建议
```yaml
最佳实践:
  明确表达:
    - 使用清晰明确的指令
    - 表达具体的需求和偏好
    - 及时提供反馈和确认
  
  安全意识:
    - 理解安全风险提醒
    - 谨慎处理敏感操作
    - 配合安全检查流程
  
  有效沟通:
    - 描述期望的结果
    - 说明特殊要求和限制
    - 提供必要的上下文信息
```

---

**🎯 核心目标**: 确保用户指令始终优先，规则冲突得到智能解决，系统行为保持一致性和可预测性，用户体验持续优化！